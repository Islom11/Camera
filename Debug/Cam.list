
Cam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dcc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  08008f54  08008f54  00018f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091e0  080091e0  000202d8  2**0
                  CONTENTS
  4 .ARM          00000008  080091e0  080091e0  000191e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091e8  080091e8  000202d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080091e8  080091e8  000191e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091f0  080091f0  000191f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  080091f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202d8  2**0
                  CONTENTS
 10 .bss          0000ec10  200002d8  200002d8  000202d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000eee8  2000eee8  000202d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016834  00000000  00000000  00020308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000321a  00000000  00000000  00036b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f00  00000000  00000000  00039d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000df0  00000000  00000000  0003ac58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025208  00000000  00000000  0003ba48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015e24  00000000  00000000  00060c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb943  00000000  00000000  00076a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001423b7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003cac  00000000  00000000  0014240c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200002d8 	.word	0x200002d8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008f3c 	.word	0x08008f3c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200002dc 	.word	0x200002dc
 80001c4:	08008f3c 	.word	0x08008f3c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <_Z17CRC16_Q921_updateth>:
    0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78
};

//вычисляет CRC16 очередного байта (в соответствии с Q.921 RFC1662 (стр.20))
uint16_t CRC16_Q921_update(uint16_t crc, uint8_t new_byte)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	460a      	mov	r2, r1
 80004ca:	80fb      	strh	r3, [r7, #6]
 80004cc:	4613      	mov	r3, r2
 80004ce:	717b      	strb	r3, [r7, #5]
    return (crc >> 8) ^ fcstab[(crc ^ new_byte) & 0xff];
 80004d0:	88fb      	ldrh	r3, [r7, #6]
 80004d2:	121b      	asrs	r3, r3, #8
 80004d4:	b21a      	sxth	r2, r3
 80004d6:	88f9      	ldrh	r1, [r7, #6]
 80004d8:	797b      	ldrb	r3, [r7, #5]
 80004da:	404b      	eors	r3, r1
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	4906      	ldr	r1, [pc, #24]	; (80004f8 <_Z17CRC16_Q921_updateth+0x38>)
 80004e0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80004e4:	b21b      	sxth	r3, r3
 80004e6:	4053      	eors	r3, r2
 80004e8:	b21b      	sxth	r3, r3
 80004ea:	b29b      	uxth	r3, r3
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	08008f54 	.word	0x08008f54

080004fc <_ZN20T_DataLinkLayer_base20SendByteWithStaffingEh>:
 */
#include "DataLinKLayer.h"


void T_DataLinkLayer_base::SendByteWithStaffing(uint8_t val)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	460b      	mov	r3, r1
 8000506:	70fb      	strb	r3, [r7, #3]
    if((val==DLL_STAF_TOKEN)||(val==DLL_START_OR_END_FRAME))
 8000508:	78fb      	ldrb	r3, [r7, #3]
 800050a:	2b7d      	cmp	r3, #125	; 0x7d
 800050c:	d002      	beq.n	8000514 <_ZN20T_DataLinkLayer_base20SendByteWithStaffingEh+0x18>
 800050e:	78fb      	ldrb	r3, [r7, #3]
 8000510:	2b7e      	cmp	r3, #126	; 0x7e
 8000512:	d106      	bne.n	8000522 <_ZN20T_DataLinkLayer_base20SendByteWithStaffingEh+0x26>
    {
        val-=0x20;
 8000514:	78fb      	ldrb	r3, [r7, #3]
 8000516:	3b20      	subs	r3, #32
 8000518:	70fb      	strb	r3, [r7, #3]
        SendByte_p(DLL_STAF_TOKEN);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	207d      	movs	r0, #125	; 0x7d
 8000520:	4798      	blx	r3
    }
    SendByte_p(val);
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	78fa      	ldrb	r2, [r7, #3]
 8000528:	4610      	mov	r0, r2
 800052a:	4798      	blx	r3
}
 800052c:	bf00      	nop
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <_ZN20T_DataLinkLayer_base13SendData_baseEPKhmt>:



void T_DataLinkLayer_base::SendData_base(const uint8_t* Data_p, uint32_t Len, const uint16_t TxDataLenLimit)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
 800053a:	60f8      	str	r0, [r7, #12]
 800053c:	60b9      	str	r1, [r7, #8]
 800053e:	607a      	str	r2, [r7, #4]
 8000540:	807b      	strh	r3, [r7, #2]
    while(Len)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d041      	beq.n	80005cc <_ZN20T_DataLinkLayer_base13SendData_baseEPKhmt+0x98>
    {
        uint16_t crc = INIT_CRC16_Q921;
 8000548:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800054c:	83fb      	strh	r3, [r7, #30]

        //Передача заголовка фрейма
        SendByte_p(DLL_START_OR_END_FRAME);				//Признак начала кадра
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	207e      	movs	r0, #126	; 0x7e
 8000554:	4798      	blx	r3

        //Определение количества байт данных в передаваемом фрейме, если данных больше
        // лимита TxDataLenLimit, то данные будут разбиты на несколько фреймов
        uint32_t cnt;
        if(Len>TxDataLenLimit) cnt = TxDataLenLimit;
 8000556:	887b      	ldrh	r3, [r7, #2]
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	429a      	cmp	r2, r3
 800055c:	d902      	bls.n	8000564 <_ZN20T_DataLinkLayer_base13SendData_baseEPKhmt+0x30>
 800055e:	887b      	ldrh	r3, [r7, #2]
 8000560:	61bb      	str	r3, [r7, #24]
 8000562:	e001      	b.n	8000568 <_ZN20T_DataLinkLayer_base13SendData_baseEPKhmt+0x34>
        else cnt = Len;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	61bb      	str	r3, [r7, #24]
        Len -= cnt;
 8000568:	687a      	ldr	r2, [r7, #4]
 800056a:	69bb      	ldr	r3, [r7, #24]
 800056c:	1ad3      	subs	r3, r2, r3
 800056e:	607b      	str	r3, [r7, #4]

        //Передача данных
        while(cnt--)
 8000570:	69bb      	ldr	r3, [r7, #24]
 8000572:	1e5a      	subs	r2, r3, #1
 8000574:	61ba      	str	r2, [r7, #24]
 8000576:	2b00      	cmp	r3, #0
 8000578:	bf14      	ite	ne
 800057a:	2301      	movne	r3, #1
 800057c:	2300      	moveq	r3, #0
 800057e:	b2db      	uxtb	r3, r3
 8000580:	2b00      	cmp	r3, #0
 8000582:	d012      	beq.n	80005aa <_ZN20T_DataLinkLayer_base13SendData_baseEPKhmt+0x76>
        {
            uint8_t byte = *Data_p++;
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	1c5a      	adds	r2, r3, #1
 8000588:	60ba      	str	r2, [r7, #8]
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	75fb      	strb	r3, [r7, #23]
            SendByteWithStaffing(byte);
 800058e:	7dfb      	ldrb	r3, [r7, #23]
 8000590:	4619      	mov	r1, r3
 8000592:	68f8      	ldr	r0, [r7, #12]
 8000594:	f7ff ffb2 	bl	80004fc <_ZN20T_DataLinkLayer_base20SendByteWithStaffingEh>
            crc = CRC16_Q921_update(crc, byte);
 8000598:	7dfa      	ldrb	r2, [r7, #23]
 800059a:	8bfb      	ldrh	r3, [r7, #30]
 800059c:	4611      	mov	r1, r2
 800059e:	4618      	mov	r0, r3
 80005a0:	f7ff ff8e 	bl	80004c0 <_Z17CRC16_Q921_updateth>
 80005a4:	4603      	mov	r3, r0
 80005a6:	83fb      	strh	r3, [r7, #30]
        while(cnt--)
 80005a8:	e7e2      	b.n	8000570 <_ZN20T_DataLinkLayer_base13SendData_baseEPKhmt+0x3c>
        }
        crc ^= 0xffff;
 80005aa:	8bfb      	ldrh	r3, [r7, #30]
 80005ac:	43db      	mvns	r3, r3
 80005ae:	83fb      	strh	r3, [r7, #30]
        //Передача контрольной суммы
        SendByteWithStaffing(crc);		//Младший байт
 80005b0:	8bfb      	ldrh	r3, [r7, #30]
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	4619      	mov	r1, r3
 80005b6:	68f8      	ldr	r0, [r7, #12]
 80005b8:	f7ff ffa0 	bl	80004fc <_ZN20T_DataLinkLayer_base20SendByteWithStaffingEh>
        SendByteWithStaffing(crc>>8);	//Старший байт
 80005bc:	8bfb      	ldrh	r3, [r7, #30]
 80005be:	121b      	asrs	r3, r3, #8
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	4619      	mov	r1, r3
 80005c4:	68f8      	ldr	r0, [r7, #12]
 80005c6:	f7ff ff99 	bl	80004fc <_ZN20T_DataLinkLayer_base20SendByteWithStaffingEh>
    while(Len)
 80005ca:	e7ba      	b.n	8000542 <_ZN20T_DataLinkLayer_base13SendData_baseEPKhmt+0xe>
    }
    SendByte_p(DLL_START_OR_END_FRAME);
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	207e      	movs	r0, #126	; 0x7e
 80005d2:	4798      	blx	r3
}
 80005d4:	bf00      	nop
 80005d6:	3720      	adds	r7, #32
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <Camera_init>:
#include "camera_config.h"
#include <stdio.h>
I2C_HandleTypeDef *hi2c;
DCMI_HandleTypeDef *hdcmi;

HAL_StatusTypeDef Camera_init(I2C_HandleTypeDef *_hi2c){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af02      	add	r7, sp, #8
 80005e2:	6078      	str	r0, [r7, #4]
	hi2c = _hi2c;
 80005e4:	4a08      	ldr	r2, [pc, #32]	; (8000608 <Camera_init+0x2c>)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6013      	str	r3, [r2, #0]
	//hdcmi = _hdcmi;
	return HAL_I2C_Master_Transmit(hi2c, CAMERA_WRITE, 0x00, 1, 100);
 80005ea:	4b07      	ldr	r3, [pc, #28]	; (8000608 <Camera_init+0x2c>)
 80005ec:	6818      	ldr	r0, [r3, #0]
 80005ee:	2364      	movs	r3, #100	; 0x64
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2301      	movs	r3, #1
 80005f4:	2200      	movs	r2, #0
 80005f6:	2142      	movs	r1, #66	; 0x42
 80005f8:	f004 f952 	bl	80048a0 <HAL_I2C_Master_Transmit>
 80005fc:	4603      	mov	r3, r0
	//return Camera_write(0x12, 0x80);
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	2000ce74 	.word	0x2000ce74

0800060c <Camera_write>:



HAL_StatusTypeDef Camera_write(uint8_t reg_adres, uint8_t data){
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af04      	add	r7, sp, #16
 8000612:	4603      	mov	r3, r0
 8000614:	460a      	mov	r2, r1
 8000616:	71fb      	strb	r3, [r7, #7]
 8000618:	4613      	mov	r3, r2
 800061a:	71bb      	strb	r3, [r7, #6]
	return HAL_I2C_Mem_Write(hi2c, CAMERA_WRITE, reg_adres, 1, &data, 1, 100);
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <Camera_write+0x38>)
 800061e:	6818      	ldr	r0, [r3, #0]
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	b29a      	uxth	r2, r3
 8000624:	2364      	movs	r3, #100	; 0x64
 8000626:	9302      	str	r3, [sp, #8]
 8000628:	2301      	movs	r3, #1
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	1dbb      	adds	r3, r7, #6
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2301      	movs	r3, #1
 8000632:	2142      	movs	r1, #66	; 0x42
 8000634:	f004 fa32 	bl	8004a9c <HAL_I2C_Mem_Write>
 8000638:	4603      	mov	r3, r0
}
 800063a:	4618      	mov	r0, r3
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	2000ce74 	.word	0x2000ce74

08000648 <Camera_config>:

HAL_StatusTypeDef Camera_config()
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
  for(uint32_t i = 0; i< 122; i++) {
	Camera_write(OV7670_reg[i][0], OV7670_reg[i][1]);

  }
  */
  int i=0;
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
  while(OV7670_registrs[i][0]!=0xFF || OV7670_registrs[i][1]!=0xFF)
 8000652:	e00f      	b.n	8000674 <Camera_config+0x2c>
  {
	  Camera_write(OV7670_registrs[i][0], OV7670_registrs[i][1]);
 8000654:	4a10      	ldr	r2, [pc, #64]	; (8000698 <Camera_config+0x50>)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800065c:	490e      	ldr	r1, [pc, #56]	; (8000698 <Camera_config+0x50>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	440b      	add	r3, r1
 8000664:	785b      	ldrb	r3, [r3, #1]
 8000666:	4619      	mov	r1, r3
 8000668:	4610      	mov	r0, r2
 800066a:	f7ff ffcf 	bl	800060c <Camera_write>
	  ++i;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3301      	adds	r3, #1
 8000672:	607b      	str	r3, [r7, #4]
  while(OV7670_registrs[i][0]!=0xFF || OV7670_registrs[i][1]!=0xFF)
 8000674:	4a08      	ldr	r2, [pc, #32]	; (8000698 <Camera_config+0x50>)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800067c:	2bff      	cmp	r3, #255	; 0xff
 800067e:	d1e9      	bne.n	8000654 <Camera_config+0xc>
 8000680:	4a05      	ldr	r2, [pc, #20]	; (8000698 <Camera_config+0x50>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	4413      	add	r3, r2
 8000688:	785b      	ldrb	r3, [r3, #1]
 800068a:	2bff      	cmp	r3, #255	; 0xff
 800068c:	d1e2      	bne.n	8000654 <Camera_config+0xc>
  }
  return HAL_OK;
 800068e:	2300      	movs	r3, #0
}
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	08009154 	.word	0x08009154

0800069c <SELECT>:
#define SD_CS_GPIO_Port GPIOC
#define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2110      	movs	r1, #16
 80006a4:	4802      	ldr	r0, [pc, #8]	; (80006b0 <SELECT+0x14>)
 80006a6:	f003 ff79 	bl	800459c <HAL_GPIO_WritePin>
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40020800 	.word	0x40020800

080006b4 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	2110      	movs	r1, #16
 80006bc:	4802      	ldr	r0, [pc, #8]	; (80006c8 <DESELECT+0x14>)
 80006be:	f003 ff6d 	bl	800459c <HAL_GPIO_WritePin>
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40020800 	.word	0x40020800

080006cc <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80006d6:	bf00      	nop
 80006d8:	4808      	ldr	r0, [pc, #32]	; (80006fc <SPI_TxByte+0x30>)
 80006da:	f007 fa8c 	bl	8007bf6 <HAL_SPI_GetState>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d1f9      	bne.n	80006d8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80006e4:	1df9      	adds	r1, r7, #7
 80006e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ea:	2201      	movs	r2, #1
 80006ec:	4803      	ldr	r0, [pc, #12]	; (80006fc <SPI_TxByte+0x30>)
 80006ee:	f006 ffa4 	bl	800763a <HAL_SPI_Transmit>
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200003ec 	.word	0x200003ec

08000700 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000706:	23ff      	movs	r3, #255	; 0xff
 8000708:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800070e:	bf00      	nop
 8000710:	4809      	ldr	r0, [pc, #36]	; (8000738 <SPI_RxByte+0x38>)
 8000712:	f007 fa70 	bl	8007bf6 <HAL_SPI_GetState>
 8000716:	4603      	mov	r3, r0
 8000718:	2b01      	cmp	r3, #1
 800071a:	d1f9      	bne.n	8000710 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 800071c:	1dba      	adds	r2, r7, #6
 800071e:	1df9      	adds	r1, r7, #7
 8000720:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	2301      	movs	r3, #1
 8000728:	4803      	ldr	r0, [pc, #12]	; (8000738 <SPI_RxByte+0x38>)
 800072a:	f007 f8c2 	bl	80078b2 <HAL_SPI_TransmitReceive>

  return data;
 800072e:	79bb      	ldrb	r3, [r7, #6]
}
 8000730:	4618      	mov	r0, r3
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200003ec 	.word	0x200003ec

0800073c <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000744:	f7ff ffdc 	bl	8000700 <SPI_RxByte>
 8000748:	4603      	mov	r3, r0
 800074a:	461a      	mov	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	701a      	strb	r2, [r3, #0]
}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <SD_ReadyWait+0x34>)
 8000760:	2232      	movs	r2, #50	; 0x32
 8000762:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000764:	f7ff ffcc 	bl	8000700 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000768:	f7ff ffca 	bl	8000700 <SPI_RxByte>
 800076c:	4603      	mov	r3, r0
 800076e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	2bff      	cmp	r3, #255	; 0xff
 8000774:	d004      	beq.n	8000780 <SD_ReadyWait+0x28>
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <SD_ReadyWait+0x34>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	b2db      	uxtb	r3, r3
 800077c:	2b00      	cmp	r3, #0
 800077e:	d1f3      	bne.n	8000768 <SD_ReadyWait+0x10>

  return res;
 8000780:	79fb      	ldrb	r3, [r7, #7]
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	2000ce60 	.word	0x2000ce60

08000790 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000796:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800079a:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 800079c:	f7ff ff8a 	bl	80006b4 <DESELECT>

  for(int i = 0; i < 10; i++)
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	e005      	b.n	80007b2 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80007a6:	20ff      	movs	r0, #255	; 0xff
 80007a8:	f7ff ff90 	bl	80006cc <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	3301      	adds	r3, #1
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	2b09      	cmp	r3, #9
 80007b6:	ddf6      	ble.n	80007a6 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 80007b8:	f7ff ff70 	bl	800069c <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 80007bc:	2340      	movs	r3, #64	; 0x40
 80007be:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80007d0:	2395      	movs	r3, #149	; 0x95
 80007d2:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	e009      	b.n	80007ee <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80007da:	1d3a      	adds	r2, r7, #4
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	4413      	add	r3, r2
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ff72 	bl	80006cc <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	3301      	adds	r3, #1
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	2b05      	cmp	r3, #5
 80007f2:	ddf2      	ble.n	80007da <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80007f4:	e002      	b.n	80007fc <SD_PowerOn+0x6c>
  {
    Count--;
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	3b01      	subs	r3, #1
 80007fa:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80007fc:	f7ff ff80 	bl	8000700 <SPI_RxByte>
 8000800:	4603      	mov	r3, r0
 8000802:	2b01      	cmp	r3, #1
 8000804:	d002      	beq.n	800080c <SD_PowerOn+0x7c>
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d1f4      	bne.n	80007f6 <SD_PowerOn+0x66>
  }

  DESELECT();
 800080c:	f7ff ff52 	bl	80006b4 <DESELECT>
  SPI_TxByte(0XFF);
 8000810:	20ff      	movs	r0, #255	; 0xff
 8000812:	f7ff ff5b 	bl	80006cc <SPI_TxByte>

  PowerFlag = 1;
 8000816:	4b03      	ldr	r3, [pc, #12]	; (8000824 <SD_PowerOn+0x94>)
 8000818:	2201      	movs	r2, #1
 800081a:	701a      	strb	r2, [r3, #0]
}
 800081c:	bf00      	nop
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200002f5 	.word	0x200002f5

08000828 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <SD_PowerOff+0x14>)
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	200002f5 	.word	0x200002f5

08000840 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000844:	4b03      	ldr	r3, [pc, #12]	; (8000854 <SD_CheckPower+0x14>)
 8000846:	781b      	ldrb	r3, [r3, #0]
}
 8000848:	4618      	mov	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	200002f5 	.word	0x200002f5

08000858 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <SD_RxDataBlock+0x68>)
 8000864:	220a      	movs	r2, #10
 8000866:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000868:	f7ff ff4a 	bl	8000700 <SPI_RxByte>
 800086c:	4603      	mov	r3, r0
 800086e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000870:	7bfb      	ldrb	r3, [r7, #15]
 8000872:	2bff      	cmp	r3, #255	; 0xff
 8000874:	d104      	bne.n	8000880 <SD_RxDataBlock+0x28>
 8000876:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <SD_RxDataBlock+0x68>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	d1f3      	bne.n	8000868 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	2bfe      	cmp	r3, #254	; 0xfe
 8000884:	d001      	beq.n	800088a <SD_RxDataBlock+0x32>
    return FALSE;
 8000886:	2300      	movs	r3, #0
 8000888:	e016      	b.n	80008b8 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	1c5a      	adds	r2, r3, #1
 800088e:	607a      	str	r2, [r7, #4]
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff53 	bl	800073c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	1c5a      	adds	r2, r3, #1
 800089a:	607a      	str	r2, [r7, #4]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff4d 	bl	800073c <SPI_RxBytePtr>
  } while(btr -= 2);
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	3b02      	subs	r3, #2
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d1ed      	bne.n	800088a <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 80008ae:	f7ff ff27 	bl	8000700 <SPI_RxByte>
  SPI_RxByte();
 80008b2:	f7ff ff25 	bl	8000700 <SPI_RxByte>

  return TRUE;
 80008b6:	2301      	movs	r3, #1
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	2000ce5f 	.word	0x2000ce5f

080008c4 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80008d4:	f7ff ff40 	bl	8000758 <SD_ReadyWait>
 80008d8:	4603      	mov	r3, r0
 80008da:	2bff      	cmp	r3, #255	; 0xff
 80008dc:	d001      	beq.n	80008e2 <SD_TxDataBlock+0x1e>
    return FALSE;
 80008de:	2300      	movs	r3, #0
 80008e0:	e040      	b.n	8000964 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fef1 	bl	80006cc <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	2bfd      	cmp	r3, #253	; 0xfd
 80008ee:	d031      	beq.n	8000954 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	1c5a      	adds	r2, r3, #1
 80008f8:	607a      	str	r2, [r7, #4]
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fee5 	bl	80006cc <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	1c5a      	adds	r2, r3, #1
 8000906:	607a      	str	r2, [r7, #4]
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fede 	bl	80006cc <SPI_TxByte>
    } while (--wc);
 8000910:	7bbb      	ldrb	r3, [r7, #14]
 8000912:	3b01      	subs	r3, #1
 8000914:	73bb      	strb	r3, [r7, #14]
 8000916:	7bbb      	ldrb	r3, [r7, #14]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d1eb      	bne.n	80008f4 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 800091c:	f7ff fef0 	bl	8000700 <SPI_RxByte>
    SPI_RxByte();
 8000920:	f7ff feee 	bl	8000700 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000924:	e00b      	b.n	800093e <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000926:	f7ff feeb 	bl	8000700 <SPI_RxByte>
 800092a:	4603      	mov	r3, r0
 800092c:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 800092e:	7bfb      	ldrb	r3, [r7, #15]
 8000930:	f003 031f 	and.w	r3, r3, #31
 8000934:	2b05      	cmp	r3, #5
 8000936:	d006      	beq.n	8000946 <SD_TxDataBlock+0x82>
        break;

      i++;
 8000938:	7b7b      	ldrb	r3, [r7, #13]
 800093a:	3301      	adds	r3, #1
 800093c:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 800093e:	7b7b      	ldrb	r3, [r7, #13]
 8000940:	2b40      	cmp	r3, #64	; 0x40
 8000942:	d9f0      	bls.n	8000926 <SD_TxDataBlock+0x62>
 8000944:	e000      	b.n	8000948 <SD_TxDataBlock+0x84>
        break;
 8000946:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000948:	bf00      	nop
 800094a:	f7ff fed9 	bl	8000700 <SPI_RxByte>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d0fa      	beq.n	800094a <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	f003 031f 	and.w	r3, r3, #31
 800095a:	2b05      	cmp	r3, #5
 800095c:	d101      	bne.n	8000962 <SD_TxDataBlock+0x9e>
    return TRUE;
 800095e:	2301      	movs	r3, #1
 8000960:	e000      	b.n	8000964 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000962:	2300      	movs	r3, #0
}
 8000964:	4618      	mov	r0, r3
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	6039      	str	r1, [r7, #0]
 8000976:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000978:	f7ff feee 	bl	8000758 <SD_ReadyWait>
 800097c:	4603      	mov	r3, r0
 800097e:	2bff      	cmp	r3, #255	; 0xff
 8000980:	d001      	beq.n	8000986 <SD_SendCmd+0x1a>
    return 0xFF;
 8000982:	23ff      	movs	r3, #255	; 0xff
 8000984:	e040      	b.n	8000a08 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fe9f 	bl	80006cc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	0e1b      	lsrs	r3, r3, #24
 8000992:	b2db      	uxtb	r3, r3
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fe99 	bl	80006cc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	0c1b      	lsrs	r3, r3, #16
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fe93 	bl	80006cc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	0a1b      	lsrs	r3, r3, #8
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fe8d 	bl	80006cc <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fe88 	bl	80006cc <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	2b40      	cmp	r3, #64	; 0x40
 80009c4:	d101      	bne.n	80009ca <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80009c6:	2395      	movs	r3, #149	; 0x95
 80009c8:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2b48      	cmp	r3, #72	; 0x48
 80009ce:	d101      	bne.n	80009d4 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80009d0:	2387      	movs	r3, #135	; 0x87
 80009d2:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fe78 	bl	80006cc <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	2b4c      	cmp	r3, #76	; 0x4c
 80009e0:	d101      	bne.n	80009e6 <SD_SendCmd+0x7a>
    SPI_RxByte();
 80009e2:	f7ff fe8d 	bl	8000700 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80009e6:	230a      	movs	r3, #10
 80009e8:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80009ea:	f7ff fe89 	bl	8000700 <SPI_RxByte>
 80009ee:	4603      	mov	r3, r0
 80009f0:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80009f2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	da05      	bge.n	8000a06 <SD_SendCmd+0x9a>
 80009fa:	7bbb      	ldrb	r3, [r7, #14]
 80009fc:	3b01      	subs	r3, #1
 80009fe:	73bb      	strb	r3, [r7, #14]
 8000a00:	7bbb      	ldrb	r3, [r7, #14]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d1f1      	bne.n	80009ea <SD_SendCmd+0x7e>

  return res;
 8000a06:	7b7b      	ldrb	r3, [r7, #13]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000a20:	2301      	movs	r3, #1
 8000a22:	e0d5      	b.n	8000bd0 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000a24:	4b6c      	ldr	r3, [pc, #432]	; (8000bd8 <SD_disk_initialize+0x1c8>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d003      	beq.n	8000a3a <SD_disk_initialize+0x2a>
    return Stat;
 8000a32:	4b69      	ldr	r3, [pc, #420]	; (8000bd8 <SD_disk_initialize+0x1c8>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	e0ca      	b.n	8000bd0 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000a3a:	f7ff fea9 	bl	8000790 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000a3e:	f7ff fe2d 	bl	800069c <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000a46:	2100      	movs	r1, #0
 8000a48:	2040      	movs	r0, #64	; 0x40
 8000a4a:	f7ff ff8f 	bl	800096c <SD_SendCmd>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	f040 80a5 	bne.w	8000ba0 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000a56:	4b61      	ldr	r3, [pc, #388]	; (8000bdc <SD_disk_initialize+0x1cc>)
 8000a58:	2264      	movs	r2, #100	; 0x64
 8000a5a:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000a5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000a60:	2048      	movs	r0, #72	; 0x48
 8000a62:	f7ff ff83 	bl	800096c <SD_SendCmd>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d158      	bne.n	8000b1e <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	73fb      	strb	r3, [r7, #15]
 8000a70:	e00c      	b.n	8000a8c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000a72:	7bfc      	ldrb	r4, [r7, #15]
 8000a74:	f7ff fe44 	bl	8000700 <SPI_RxByte>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	f107 0310 	add.w	r3, r7, #16
 8000a80:	4423      	add	r3, r4
 8000a82:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	73fb      	strb	r3, [r7, #15]
 8000a8c:	7bfb      	ldrb	r3, [r7, #15]
 8000a8e:	2b03      	cmp	r3, #3
 8000a90:	d9ef      	bls.n	8000a72 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000a92:	7abb      	ldrb	r3, [r7, #10]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	f040 8083 	bne.w	8000ba0 <SD_disk_initialize+0x190>
 8000a9a:	7afb      	ldrb	r3, [r7, #11]
 8000a9c:	2baa      	cmp	r3, #170	; 0xaa
 8000a9e:	d17f      	bne.n	8000ba0 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2077      	movs	r0, #119	; 0x77
 8000aa4:	f7ff ff62 	bl	800096c <SD_SendCmd>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d807      	bhi.n	8000abe <SD_disk_initialize+0xae>
 8000aae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000ab2:	2069      	movs	r0, #105	; 0x69
 8000ab4:	f7ff ff5a 	bl	800096c <SD_SendCmd>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d005      	beq.n	8000aca <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000abe:	4b47      	ldr	r3, [pc, #284]	; (8000bdc <SD_disk_initialize+0x1cc>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d1eb      	bne.n	8000aa0 <SD_disk_initialize+0x90>
 8000ac8:	e000      	b.n	8000acc <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000aca:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000acc:	4b43      	ldr	r3, [pc, #268]	; (8000bdc <SD_disk_initialize+0x1cc>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d064      	beq.n	8000ba0 <SD_disk_initialize+0x190>
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	207a      	movs	r0, #122	; 0x7a
 8000ada:	f7ff ff47 	bl	800096c <SD_SendCmd>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d15d      	bne.n	8000ba0 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	73fb      	strb	r3, [r7, #15]
 8000ae8:	e00c      	b.n	8000b04 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000aea:	7bfc      	ldrb	r4, [r7, #15]
 8000aec:	f7ff fe08 	bl	8000700 <SPI_RxByte>
 8000af0:	4603      	mov	r3, r0
 8000af2:	461a      	mov	r2, r3
 8000af4:	f107 0310 	add.w	r3, r7, #16
 8000af8:	4423      	add	r3, r4
 8000afa:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	3301      	adds	r3, #1
 8000b02:	73fb      	strb	r3, [r7, #15]
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	2b03      	cmp	r3, #3
 8000b08:	d9ef      	bls.n	8000aea <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8000b0a:	7a3b      	ldrb	r3, [r7, #8]
 8000b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SD_disk_initialize+0x108>
 8000b14:	2306      	movs	r3, #6
 8000b16:	e000      	b.n	8000b1a <SD_disk_initialize+0x10a>
 8000b18:	2302      	movs	r3, #2
 8000b1a:	73bb      	strb	r3, [r7, #14]
 8000b1c:	e040      	b.n	8000ba0 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000b1e:	2100      	movs	r1, #0
 8000b20:	2077      	movs	r0, #119	; 0x77
 8000b22:	f7ff ff23 	bl	800096c <SD_SendCmd>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d808      	bhi.n	8000b3e <SD_disk_initialize+0x12e>
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2069      	movs	r0, #105	; 0x69
 8000b30:	f7ff ff1c 	bl	800096c <SD_SendCmd>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d801      	bhi.n	8000b3e <SD_disk_initialize+0x12e>
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	e000      	b.n	8000b40 <SD_disk_initialize+0x130>
 8000b3e:	2301      	movs	r3, #1
 8000b40:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8000b42:	7bbb      	ldrb	r3, [r7, #14]
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d10e      	bne.n	8000b66 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2077      	movs	r0, #119	; 0x77
 8000b4c:	f7ff ff0e 	bl	800096c <SD_SendCmd>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d80e      	bhi.n	8000b74 <SD_disk_initialize+0x164>
 8000b56:	2100      	movs	r1, #0
 8000b58:	2069      	movs	r0, #105	; 0x69
 8000b5a:	f7ff ff07 	bl	800096c <SD_SendCmd>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d107      	bne.n	8000b74 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000b64:	e00d      	b.n	8000b82 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000b66:	2100      	movs	r1, #0
 8000b68:	2041      	movs	r0, #65	; 0x41
 8000b6a:	f7ff feff 	bl	800096c <SD_SendCmd>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d005      	beq.n	8000b80 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000b74:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <SD_disk_initialize+0x1cc>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d1e1      	bne.n	8000b42 <SD_disk_initialize+0x132>
 8000b7e:	e000      	b.n	8000b82 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000b80:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000b82:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <SD_disk_initialize+0x1cc>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d007      	beq.n	8000b9c <SD_disk_initialize+0x18c>
 8000b8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b90:	2050      	movs	r0, #80	; 0x50
 8000b92:	f7ff feeb 	bl	800096c <SD_SendCmd>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8000ba0:	4a0f      	ldr	r2, [pc, #60]	; (8000be0 <SD_disk_initialize+0x1d0>)
 8000ba2:	7bbb      	ldrb	r3, [r7, #14]
 8000ba4:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000ba6:	f7ff fd85 	bl	80006b4 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000baa:	f7ff fda9 	bl	8000700 <SPI_RxByte>

  if (type)
 8000bae:	7bbb      	ldrb	r3, [r7, #14]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d008      	beq.n	8000bc6 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <SD_disk_initialize+0x1c8>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	f023 0301 	bic.w	r3, r3, #1
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <SD_disk_initialize+0x1c8>)
 8000bc2:	701a      	strb	r2, [r3, #0]
 8000bc4:	e001      	b.n	8000bca <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000bc6:	f7ff fe2f 	bl	8000828 <SD_PowerOff>
  }

  return Stat;
 8000bca:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <SD_disk_initialize+0x1c8>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b2db      	uxtb	r3, r3
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd90      	pop	{r4, r7, pc}
 8000bd8:	20000000 	.word	0x20000000
 8000bdc:	2000ce5f 	.word	0x2000ce5f
 8000be0:	200002f4 	.word	0x200002f4

08000be4 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <SD_disk_status+0x14>
    return STA_NOINIT;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e002      	b.n	8000bfe <SD_disk_status+0x1a>

  return Stat;
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <SD_disk_status+0x28>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000000 	.word	0x20000000

08000c10 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	607a      	str	r2, [r7, #4]
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d102      	bne.n	8000c2c <SD_disk_read+0x1c>
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d101      	bne.n	8000c30 <SD_disk_read+0x20>
    return RES_PARERR;
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	e051      	b.n	8000cd4 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8000c30:	4b2a      	ldr	r3, [pc, #168]	; (8000cdc <SD_disk_read+0xcc>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	e048      	b.n	8000cd4 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8000c42:	4b27      	ldr	r3, [pc, #156]	; (8000ce0 <SD_disk_read+0xd0>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d102      	bne.n	8000c54 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	025b      	lsls	r3, r3, #9
 8000c52:	607b      	str	r3, [r7, #4]

  SELECT();
 8000c54:	f7ff fd22 	bl	800069c <SELECT>

  if (count == 1)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d111      	bne.n	8000c82 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	2051      	movs	r0, #81	; 0x51
 8000c62:	f7ff fe83 	bl	800096c <SD_SendCmd>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d129      	bne.n	8000cc0 <SD_disk_read+0xb0>
 8000c6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c70:	68b8      	ldr	r0, [r7, #8]
 8000c72:	f7ff fdf1 	bl	8000858 <SD_RxDataBlock>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d021      	beq.n	8000cc0 <SD_disk_read+0xb0>
      count = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	e01e      	b.n	8000cc0 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	2052      	movs	r0, #82	; 0x52
 8000c86:	f7ff fe71 	bl	800096c <SD_SendCmd>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d117      	bne.n	8000cc0 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000c90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c94:	68b8      	ldr	r0, [r7, #8]
 8000c96:	f7ff fddf 	bl	8000858 <SD_RxDataBlock>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d00a      	beq.n	8000cb6 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ca6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d1ed      	bne.n	8000c90 <SD_disk_read+0x80>
 8000cb4:	e000      	b.n	8000cb8 <SD_disk_read+0xa8>
          break;
 8000cb6:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8000cb8:	2100      	movs	r1, #0
 8000cba:	204c      	movs	r0, #76	; 0x4c
 8000cbc:	f7ff fe56 	bl	800096c <SD_SendCmd>
    }
  }

  DESELECT();
 8000cc0:	f7ff fcf8 	bl	80006b4 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000cc4:	f7ff fd1c 	bl	8000700 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	bf14      	ite	ne
 8000cce:	2301      	movne	r3, #1
 8000cd0:	2300      	moveq	r3, #0
 8000cd2:	b2db      	uxtb	r3, r3
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	200002f4 	.word	0x200002f4

08000ce4 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d102      	bne.n	8000d00 <SD_disk_write+0x1c>
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d101      	bne.n	8000d04 <SD_disk_write+0x20>
    return RES_PARERR;
 8000d00:	2304      	movs	r3, #4
 8000d02:	e06b      	b.n	8000ddc <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8000d04:	4b37      	ldr	r3, [pc, #220]	; (8000de4 <SD_disk_write+0x100>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000d12:	2303      	movs	r3, #3
 8000d14:	e062      	b.n	8000ddc <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8000d16:	4b33      	ldr	r3, [pc, #204]	; (8000de4 <SD_disk_write+0x100>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	f003 0304 	and.w	r3, r3, #4
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <SD_disk_write+0x44>
    return RES_WRPRT;
 8000d24:	2302      	movs	r3, #2
 8000d26:	e059      	b.n	8000ddc <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8000d28:	4b2f      	ldr	r3, [pc, #188]	; (8000de8 <SD_disk_write+0x104>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d102      	bne.n	8000d3a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	025b      	lsls	r3, r3, #9
 8000d38:	607b      	str	r3, [r7, #4]

  SELECT();
 8000d3a:	f7ff fcaf 	bl	800069c <SELECT>

  if (count == 1)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d110      	bne.n	8000d66 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000d44:	6879      	ldr	r1, [r7, #4]
 8000d46:	2058      	movs	r0, #88	; 0x58
 8000d48:	f7ff fe10 	bl	800096c <SD_SendCmd>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d13a      	bne.n	8000dc8 <SD_disk_write+0xe4>
 8000d52:	21fe      	movs	r1, #254	; 0xfe
 8000d54:	68b8      	ldr	r0, [r7, #8]
 8000d56:	f7ff fdb5 	bl	80008c4 <SD_TxDataBlock>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d033      	beq.n	8000dc8 <SD_disk_write+0xe4>
      count = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	e030      	b.n	8000dc8 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8000d66:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <SD_disk_write+0x104>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d007      	beq.n	8000d82 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000d72:	2100      	movs	r1, #0
 8000d74:	2077      	movs	r0, #119	; 0x77
 8000d76:	f7ff fdf9 	bl	800096c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000d7a:	6839      	ldr	r1, [r7, #0]
 8000d7c:	2057      	movs	r0, #87	; 0x57
 8000d7e:	f7ff fdf5 	bl	800096c <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	2059      	movs	r0, #89	; 0x59
 8000d86:	f7ff fdf1 	bl	800096c <SD_SendCmd>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d11b      	bne.n	8000dc8 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000d90:	21fc      	movs	r1, #252	; 0xfc
 8000d92:	68b8      	ldr	r0, [r7, #8]
 8000d94:	f7ff fd96 	bl	80008c4 <SD_TxDataBlock>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d00a      	beq.n	8000db4 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000da4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	3b01      	subs	r3, #1
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d1ee      	bne.n	8000d90 <SD_disk_write+0xac>
 8000db2:	e000      	b.n	8000db6 <SD_disk_write+0xd2>
          break;
 8000db4:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8000db6:	21fd      	movs	r1, #253	; 0xfd
 8000db8:	2000      	movs	r0, #0
 8000dba:	f7ff fd83 	bl	80008c4 <SD_TxDataBlock>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d101      	bne.n	8000dc8 <SD_disk_write+0xe4>
      {
        count = 1;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8000dc8:	f7ff fc74 	bl	80006b4 <DESELECT>
  SPI_RxByte();
 8000dcc:	f7ff fc98 	bl	8000700 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	bf14      	ite	ne
 8000dd6:	2301      	movne	r3, #1
 8000dd8:	2300      	moveq	r3, #0
 8000dda:	b2db      	uxtb	r3, r3
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000000 	.word	0x20000000
 8000de8:	200002f4 	.word	0x200002f4

08000dec <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b08b      	sub	sp, #44	; 0x2c
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	603a      	str	r2, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8000e06:	2304      	movs	r3, #4
 8000e08:	e11b      	b.n	8001042 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8000e10:	79bb      	ldrb	r3, [r7, #6]
 8000e12:	2b05      	cmp	r3, #5
 8000e14:	d129      	bne.n	8000e6a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8000e16:	6a3b      	ldr	r3, [r7, #32]
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d017      	beq.n	8000e4e <SD_disk_ioctl+0x62>
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	dc1f      	bgt.n	8000e62 <SD_disk_ioctl+0x76>
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d002      	beq.n	8000e2c <SD_disk_ioctl+0x40>
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d00b      	beq.n	8000e42 <SD_disk_ioctl+0x56>
 8000e2a:	e01a      	b.n	8000e62 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8000e2c:	f7ff fd08 	bl	8000840 <SD_CheckPower>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8000e36:	f7ff fcf7 	bl	8000828 <SD_PowerOff>
      res = RES_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e40:	e0fd      	b.n	800103e <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8000e42:	f7ff fca5 	bl	8000790 <SD_PowerOn>
      res = RES_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e4c:	e0f7      	b.n	800103e <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000e4e:	6a3b      	ldr	r3, [r7, #32]
 8000e50:	1c5c      	adds	r4, r3, #1
 8000e52:	f7ff fcf5 	bl	8000840 <SD_CheckPower>
 8000e56:	4603      	mov	r3, r0
 8000e58:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e60:	e0ed      	b.n	800103e <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8000e62:	2304      	movs	r3, #4
 8000e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e68:	e0e9      	b.n	800103e <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8000e6a:	4b78      	ldr	r3, [pc, #480]	; (800104c <SD_disk_ioctl+0x260>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e0e2      	b.n	8001042 <SD_disk_ioctl+0x256>

    SELECT();
 8000e7c:	f7ff fc0e 	bl	800069c <SELECT>

    switch (ctrl)
 8000e80:	79bb      	ldrb	r3, [r7, #6]
 8000e82:	2b0d      	cmp	r3, #13
 8000e84:	f200 80cc 	bhi.w	8001020 <SD_disk_ioctl+0x234>
 8000e88:	a201      	add	r2, pc, #4	; (adr r2, 8000e90 <SD_disk_ioctl+0xa4>)
 8000e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8e:	bf00      	nop
 8000e90:	08000f8b 	.word	0x08000f8b
 8000e94:	08000ec9 	.word	0x08000ec9
 8000e98:	08000f7b 	.word	0x08000f7b
 8000e9c:	08001021 	.word	0x08001021
 8000ea0:	08001021 	.word	0x08001021
 8000ea4:	08001021 	.word	0x08001021
 8000ea8:	08001021 	.word	0x08001021
 8000eac:	08001021 	.word	0x08001021
 8000eb0:	08001021 	.word	0x08001021
 8000eb4:	08001021 	.word	0x08001021
 8000eb8:	08001021 	.word	0x08001021
 8000ebc:	08000f9d 	.word	0x08000f9d
 8000ec0:	08000fc1 	.word	0x08000fc1
 8000ec4:	08000fe5 	.word	0x08000fe5
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2049      	movs	r0, #73	; 0x49
 8000ecc:	f7ff fd4e 	bl	800096c <SD_SendCmd>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f040 80a8 	bne.w	8001028 <SD_disk_ioctl+0x23c>
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	2110      	movs	r1, #16
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fcba 	bl	8000858 <SD_RxDataBlock>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f000 809e 	beq.w	8001028 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8000eec:	7b3b      	ldrb	r3, [r7, #12]
 8000eee:	099b      	lsrs	r3, r3, #6
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d10e      	bne.n	8000f14 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000ef6:	7d7b      	ldrb	r3, [r7, #21]
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	7d3b      	ldrb	r3, [r7, #20]
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	021b      	lsls	r3, r3, #8
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	4413      	add	r3, r2
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	3301      	adds	r3, #1
 8000f08:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000f0a:	8bfb      	ldrh	r3, [r7, #30]
 8000f0c:	029a      	lsls	r2, r3, #10
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	e02e      	b.n	8000f72 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000f14:	7c7b      	ldrb	r3, [r7, #17]
 8000f16:	f003 030f 	and.w	r3, r3, #15
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	7dbb      	ldrb	r3, [r7, #22]
 8000f1e:	09db      	lsrs	r3, r3, #7
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	4413      	add	r3, r2
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	7d7b      	ldrb	r3, [r7, #21]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	f003 0306 	and.w	r3, r3, #6
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	4413      	add	r3, r2
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	3302      	adds	r3, #2
 8000f38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000f3c:	7d3b      	ldrb	r3, [r7, #20]
 8000f3e:	099b      	lsrs	r3, r3, #6
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	7cfb      	ldrb	r3, [r7, #19]
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	4413      	add	r3, r2
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	7cbb      	ldrb	r3, [r7, #18]
 8000f52:	029b      	lsls	r3, r3, #10
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	4413      	add	r3, r2
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	3301      	adds	r3, #1
 8000f62:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000f64:	8bfa      	ldrh	r2, [r7, #30]
 8000f66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f6a:	3b09      	subs	r3, #9
 8000f6c:	409a      	lsls	r2, r3
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000f78:	e056      	b.n	8001028 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f80:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000f88:	e055      	b.n	8001036 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000f8a:	f7ff fbe5 	bl	8000758 <SD_ReadyWait>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2bff      	cmp	r3, #255	; 0xff
 8000f92:	d14b      	bne.n	800102c <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000f94:	2300      	movs	r3, #0
 8000f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000f9a:	e047      	b.n	800102c <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2049      	movs	r0, #73	; 0x49
 8000fa0:	f7ff fce4 	bl	800096c <SD_SendCmd>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d142      	bne.n	8001030 <SD_disk_ioctl+0x244>
 8000faa:	2110      	movs	r1, #16
 8000fac:	6a38      	ldr	r0, [r7, #32]
 8000fae:	f7ff fc53 	bl	8000858 <SD_RxDataBlock>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d03b      	beq.n	8001030 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000fbe:	e037      	b.n	8001030 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	204a      	movs	r0, #74	; 0x4a
 8000fc4:	f7ff fcd2 	bl	800096c <SD_SendCmd>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d132      	bne.n	8001034 <SD_disk_ioctl+0x248>
 8000fce:	2110      	movs	r1, #16
 8000fd0:	6a38      	ldr	r0, [r7, #32]
 8000fd2:	f7ff fc41 	bl	8000858 <SD_RxDataBlock>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d02b      	beq.n	8001034 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000fe2:	e027      	b.n	8001034 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	207a      	movs	r0, #122	; 0x7a
 8000fe8:	f7ff fcc0 	bl	800096c <SD_SendCmd>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d116      	bne.n	8001020 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ff8:	e00b      	b.n	8001012 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8000ffa:	6a3c      	ldr	r4, [r7, #32]
 8000ffc:	1c63      	adds	r3, r4, #1
 8000ffe:	623b      	str	r3, [r7, #32]
 8001000:	f7ff fb7e 	bl	8000700 <SPI_RxByte>
 8001004:	4603      	mov	r3, r0
 8001006:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001008:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800100c:	3301      	adds	r3, #1
 800100e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001012:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001016:	2b03      	cmp	r3, #3
 8001018:	d9ef      	bls.n	8000ffa <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001020:	2304      	movs	r3, #4
 8001022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001026:	e006      	b.n	8001036 <SD_disk_ioctl+0x24a>
      break;
 8001028:	bf00      	nop
 800102a:	e004      	b.n	8001036 <SD_disk_ioctl+0x24a>
      break;
 800102c:	bf00      	nop
 800102e:	e002      	b.n	8001036 <SD_disk_ioctl+0x24a>
      break;
 8001030:	bf00      	nop
 8001032:	e000      	b.n	8001036 <SD_disk_ioctl+0x24a>
      break;
 8001034:	bf00      	nop
    }

    DESELECT();
 8001036:	f7ff fb3d 	bl	80006b4 <DESELECT>
    SPI_RxByte();
 800103a:	f7ff fb61 	bl	8000700 <SPI_RxByte>
  }

  return res;
 800103e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001042:	4618      	mov	r0, r3
 8001044:	372c      	adds	r7, #44	; 0x2c
 8001046:	46bd      	mov	sp, r7
 8001048:	bd90      	pop	{r4, r7, pc}
 800104a:	bf00      	nop
 800104c:	20000000 	.word	0x20000000

08001050 <_ZN20T_DataLinkLayer_baseC1EPFvhEPFvPhtE>:
    void (*SendByte_p)(uint8_t val);

    //Указатель на функцию обработки принятых данных
    void (*RxDataHandler_p)(uint8_t* Buf, uint16_t Len);

    T_DataLinkLayer_base(void(*SendByteFunc_p)(uint8_t), void(*RxDataHandlerFunc_p)(uint8_t*, uint16_t))
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
    : FrameLen(0), crc(0), ReceivingData(false), ByteDeStaffing(false), SendByte_p(SendByteFunc_p), RxDataHandler_p(RxDataHandlerFunc_p)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2200      	movs	r2, #0
 8001060:	801a      	strh	r2, [r3, #0]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2200      	movs	r2, #0
 8001066:	805a      	strh	r2, [r3, #2]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2200      	movs	r2, #0
 800106c:	711a      	strb	r2, [r3, #4]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2200      	movs	r2, #0
 8001072:	715a      	strb	r2, [r3, #5]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	60da      	str	r2, [r3, #12]
    {}
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4618      	mov	r0, r3
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <createPhoto>:
#define RGB565_TO_R(pixel)   (((pixel & 0x1F) << 3) | ((((pixel & 0x1F) << 3) & 0xE0) >> 5));
#define RGB565_TO_G(pixel)   (((pixel & 0x7E0) >> 3) | ((((pixel & 0x7E0) >> 3) & 0xC0) >> 6));
#define RGB565_TO_B(pixel)   (((pixel & 0xF800) >> 8) | ((((pixel & 0xF800) >> 8) & 0xE0) >> 5));

void createPhoto()
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
	uint8_t finish = 0x03;
 8001096:	2303      	movs	r3, #3
 8001098:	71fb      	strb	r3, [r7, #7]
	write_flag = false;
 800109a:	4b42      	ldr	r3, [pc, #264]	; (80011a4 <createPhoto+0x114>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
	//отправка шапки
	ttDataLinkLayerPoint.Send(bmp_tou,54);
 80010a0:	2236      	movs	r2, #54	; 0x36
 80010a2:	4941      	ldr	r1, [pc, #260]	; (80011a8 <createPhoto+0x118>)
 80010a4:	4841      	ldr	r0, [pc, #260]	; (80011ac <createPhoto+0x11c>)
 80010a6:	f000 fbb7 	bl	8001818 <_ZN21TT_DataLinkLayerPointILt2048ELt1000EE4SendEPKhm>
	while(write_flag == false);
 80010aa:	4b3e      	ldr	r3, [pc, #248]	; (80011a4 <createPhoto+0x114>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d100      	bne.n	80010b4 <createPhoto+0x24>
 80010b2:	e7fa      	b.n	80010aa <createPhoto+0x1a>
	write_flag = false;
 80010b4:	4b3b      	ldr	r3, [pc, #236]	; (80011a4 <createPhoto+0x114>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
//	ttDataLinkLayerPoint.Send(bmpData,74442);
	//ttDataLinkLayerPoint.send(adres,IMAGE_SIZE);
	//*
	uint16_t rgb_datr;
	uint32_t adress;
	for (int i = 0; i < IMAGE_SIZE; i++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f246 02da 	movw	r2, #24794	; 0x60da
 80010c4:	4293      	cmp	r3, r2
 80010c6:	dc51      	bgt.n	800116c <createPhoto+0xdc>
//		while(write_flag == false);
//		write_flag = false;
//		HAL_Delay(1);

//		rgb_datr = (adress>>16) & 0xFFFF;
		buffer[2] = RGB565_TO_B(adres[i]);
 80010c8:	4a39      	ldr	r2, [pc, #228]	; (80011b0 <createPhoto+0x120>)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010d0:	121b      	asrs	r3, r3, #8
 80010d2:	b25b      	sxtb	r3, r3
 80010d4:	f023 0307 	bic.w	r3, r3, #7
 80010d8:	b25a      	sxtb	r2, r3
 80010da:	4935      	ldr	r1, [pc, #212]	; (80011b0 <createPhoto+0x120>)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010e2:	0b5b      	lsrs	r3, r3, #13
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	b25b      	sxtb	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b25b      	sxtb	r3, r3
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4b31      	ldr	r3, [pc, #196]	; (80011b4 <createPhoto+0x124>)
 80010f0:	709a      	strb	r2, [r3, #2]
		buffer[1] = RGB565_TO_G(adres[i]);
 80010f2:	4a2f      	ldr	r2, [pc, #188]	; (80011b0 <createPhoto+0x120>)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010fa:	10db      	asrs	r3, r3, #3
 80010fc:	b25b      	sxtb	r3, r3
 80010fe:	f023 0303 	bic.w	r3, r3, #3
 8001102:	b25a      	sxtb	r2, r3
 8001104:	492a      	ldr	r1, [pc, #168]	; (80011b0 <createPhoto+0x120>)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800110c:	125b      	asrs	r3, r3, #9
 800110e:	b25b      	sxtb	r3, r3
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	b25b      	sxtb	r3, r3
 8001116:	4313      	orrs	r3, r2
 8001118:	b25b      	sxtb	r3, r3
 800111a:	b2da      	uxtb	r2, r3
 800111c:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <createPhoto+0x124>)
 800111e:	705a      	strb	r2, [r3, #1]
		buffer[0] = RGB565_TO_R(adres[i]);
 8001120:	4a23      	ldr	r2, [pc, #140]	; (80011b0 <createPhoto+0x120>)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	b25a      	sxtb	r2, r3
 800112c:	4920      	ldr	r1, [pc, #128]	; (80011b0 <createPhoto+0x120>)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	115b      	asrs	r3, r3, #5
 8001138:	b25b      	sxtb	r3, r3
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	b25b      	sxtb	r3, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	b25b      	sxtb	r3, r3
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <createPhoto+0x124>)
 8001148:	701a      	strb	r2, [r3, #0]


		ttDataLinkLayerPoint.Send(buffer,3);
 800114a:	2203      	movs	r2, #3
 800114c:	4919      	ldr	r1, [pc, #100]	; (80011b4 <createPhoto+0x124>)
 800114e:	4817      	ldr	r0, [pc, #92]	; (80011ac <createPhoto+0x11c>)
 8001150:	f000 fb62 	bl	8001818 <_ZN21TT_DataLinkLayerPointILt2048ELt1000EE4SendEPKhm>
		while(write_flag == false);
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <createPhoto+0x114>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d100      	bne.n	800115e <createPhoto+0xce>
 800115c:	e7fa      	b.n	8001154 <createPhoto+0xc4>
		write_flag = false;
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <createPhoto+0x114>)
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < IMAGE_SIZE; i++)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	3301      	adds	r3, #1
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	e7a8      	b.n	80010be <createPhoto+0x2e>
		buffer[2] = buf[i];
		ttDataLinkLayerPoint.Send(buffer,3);
	}
	*/

	ttDataLinkLayerPoint.Send(white,690);
 800116c:	f240 22b2 	movw	r2, #690	; 0x2b2
 8001170:	4911      	ldr	r1, [pc, #68]	; (80011b8 <createPhoto+0x128>)
 8001172:	480e      	ldr	r0, [pc, #56]	; (80011ac <createPhoto+0x11c>)
 8001174:	f000 fb50 	bl	8001818 <_ZN21TT_DataLinkLayerPointILt2048ELt1000EE4SendEPKhm>

	for(int i = 0; i < 0xFFFF; i++);
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001182:	4293      	cmp	r3, r2
 8001184:	dc03      	bgt.n	800118e <createPhoto+0xfe>
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	3301      	adds	r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	e7f6      	b.n	800117c <createPhoto+0xec>
	ttDataLinkLayerPoint.Send(&finish,1);
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	2201      	movs	r2, #1
 8001192:	4619      	mov	r1, r3
 8001194:	4805      	ldr	r0, [pc, #20]	; (80011ac <createPhoto+0x11c>)
 8001196:	f000 fb3f 	bl	8001818 <_ZN21TT_DataLinkLayerPointILt2048ELt1000EE4SendEPKhm>
//
//
//	}
//*/
//	f_close(&fil);
}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000444 	.word	0x20000444
 80011a8:	08009188 	.word	0x08009188
 80011ac:	2000048c 	.word	0x2000048c
 80011b0:	20000ca8 	.word	0x20000ca8
 80011b4:	20000ca0 	.word	0x20000ca0
 80011b8:	20000004 	.word	0x20000004

080011bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c2:	f000 feaf 	bl	8001f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c6:	f000 f879 	bl	80012bc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ca:	f000 f9ad 	bl	8001528 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80011ce:	f000 f98b 	bl	80014e8 <_ZL11MX_DMA_Initv>
  MX_DCMI_Init();
 80011d2:	f000 f8eb 	bl	80013ac <_ZL12MX_DCMI_Initv>
  MX_I2C1_Init();
 80011d6:	f000 f917 	bl	8001408 <_ZL12MX_I2C1_Initv>
  MX_SPI1_Init();
 80011da:	f000 f949 	bl	8001470 <_ZL12MX_SPI1_Initv>
  MX_FATFS_Init();
 80011de:	f007 fdb5 	bl	8008d4c <MX_FATFS_Init>
  MX_UART4_Init();
 80011e2:	f000 fa4b 	bl	800167c <_ZL13MX_UART4_Initv>
  uint8_t abc;
  HAL_UART_Receive_IT(&huart4, (uint8_t*)&abc, 1);
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	2201      	movs	r2, #1
 80011ea:	4619      	mov	r1, r3
 80011ec:	482d      	ldr	r0, [pc, #180]	; (80012a4 <main+0xe8>)
 80011ee:	f006 feba 	bl	8007f66 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN 2 */

  //HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)adres, 176*144/2);

  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
 80011f2:	2201      	movs	r2, #1
 80011f4:	2120      	movs	r1, #32
 80011f6:	482c      	ldr	r0, [pc, #176]	; (80012a8 <main+0xec>)
 80011f8:	f003 f9d0 	bl	800459c <HAL_GPIO_WritePin>
  HAL_StatusTypeDef ret =  Camera_init(&hi2c1);
 80011fc:	482b      	ldr	r0, [pc, #172]	; (80012ac <main+0xf0>)
 80011fe:	f7ff f9ed 	bl	80005dc <Camera_init>
 8001202:	4603      	mov	r3, r0
 8001204:	73fb      	strb	r3, [r7, #15]


  while(ret != HAL_OK)
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d005      	beq.n	8001218 <main+0x5c>
  {
	  ret = Camera_init(&hi2c1);
 800120c:	4827      	ldr	r0, [pc, #156]	; (80012ac <main+0xf0>)
 800120e:	f7ff f9e5 	bl	80005dc <Camera_init>
 8001212:	4603      	mov	r3, r0
 8001214:	73fb      	strb	r3, [r7, #15]
  while(ret != HAL_OK)
 8001216:	e7f6      	b.n	8001206 <main+0x4a>
  }
  Camera_config();
 8001218:	f7ff fa16 	bl	8000648 <Camera_config>
  //1011 0000 1000 0110 _ 1011 0101 1000 0000
  //1000 0000 0000 1000 _ 0000 0000 0000 00

  //adres[2]=0xA1A1B1B1;
  //adres[3]=(uint32_t)&adres;
  HAL_Delay(1000);
 800121c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001220:	f000 fef2 	bl	8002008 <HAL_Delay>
  while(hdcmi.State != HAL_DCMI_STATE_READY)
 8001224:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <main+0xf4>)
 8001226:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b01      	cmp	r3, #1
 800122e:	bf14      	ite	ne
 8001230:	2301      	movne	r3, #1
 8001232:	2300      	moveq	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d000      	beq.n	800123c <main+0x80>
 800123a:	e7f3      	b.n	8001224 <main+0x68>
  {

  }
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
  ret = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)adres, IMAGE_SIZE);
 800123c:	4a1d      	ldr	r2, [pc, #116]	; (80012b4 <main+0xf8>)
 800123e:	f246 03db 	movw	r3, #24795	; 0x60db
 8001242:	2102      	movs	r1, #2
 8001244:	481a      	ldr	r0, [pc, #104]	; (80012b0 <main+0xf4>)
 8001246:	f001 f815 	bl	8002274 <HAL_DCMI_Start_DMA>
 800124a:	4603      	mov	r3, r0
 800124c:	73fb      	strb	r3, [r7, #15]
//  while(1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int bul=1;
 800124e:	2301      	movs	r3, #1
 8001250:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	2101      	movs	r1, #1
 8001256:	4818      	ldr	r0, [pc, #96]	; (80012b8 <main+0xfc>)
 8001258:	f003 f9a0 	bl	800459c <HAL_GPIO_WritePin>
  while (1)
  {
	  if(adres[0]!=0 && adres[IMAGE_SIZE-1]==0)
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <main+0xf8>)
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d00b      	beq.n	800127c <main+0xc0>
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <main+0xf8>)
 8001266:	f503 4341 	add.w	r3, r3, #49408	; 0xc100
 800126a:	33b4      	adds	r3, #180	; 0xb4
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d104      	bne.n	800127c <main+0xc0>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001272:	2201      	movs	r2, #1
 8001274:	2101      	movs	r1, #1
 8001276:	4810      	ldr	r0, [pc, #64]	; (80012b8 <main+0xfc>)
 8001278:	f003 f990 	bl	800459c <HAL_GPIO_WritePin>

	  }
	  if(adres[IMAGE_SIZE-1]!=0 && bul==1)
 800127c:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <main+0xf8>)
 800127e:	f503 4341 	add.w	r3, r3, #49408	; 0xc100
 8001282:	33b4      	adds	r3, #180	; 0xb4
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0e8      	beq.n	800125c <main+0xa0>
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d1e5      	bne.n	800125c <main+0xa0>
	  {
		  bul=0;
 8001290:	2300      	movs	r3, #0
 8001292:	60bb      	str	r3, [r7, #8]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	2101      	movs	r1, #1
 8001298:	4807      	ldr	r0, [pc, #28]	; (80012b8 <main+0xfc>)
 800129a:	f003 f97f 	bl	800459c <HAL_GPIO_WritePin>
//		  createPhotoFlesh();
		  createPhoto();
 800129e:	f7ff fef7 	bl	8001090 <createPhoto>
	  if(adres[0]!=0 && adres[IMAGE_SIZE-1]==0)
 80012a2:	e7db      	b.n	800125c <main+0xa0>
 80012a4:	20000448 	.word	0x20000448
 80012a8:	40020800 	.word	0x40020800
 80012ac:	20000398 	.word	0x20000398
 80012b0:	200002f8 	.word	0x200002f8
 80012b4:	20000ca8 	.word	0x20000ca8
 80012b8:	40020400 	.word	0x40020400

080012bc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b094      	sub	sp, #80	; 0x50
 80012c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c2:	f107 0320 	add.w	r3, r7, #32
 80012c6:	2230      	movs	r2, #48	; 0x30
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f007 fe2e 	bl	8008f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	4b2f      	ldr	r3, [pc, #188]	; (80013a4 <_Z18SystemClock_Configv+0xe8>)
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	4a2e      	ldr	r2, [pc, #184]	; (80013a4 <_Z18SystemClock_Configv+0xe8>)
 80012ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ee:	6413      	str	r3, [r2, #64]	; 0x40
 80012f0:	4b2c      	ldr	r3, [pc, #176]	; (80013a4 <_Z18SystemClock_Configv+0xe8>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012fc:	2300      	movs	r3, #0
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	4b29      	ldr	r3, [pc, #164]	; (80013a8 <_Z18SystemClock_Configv+0xec>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a28      	ldr	r2, [pc, #160]	; (80013a8 <_Z18SystemClock_Configv+0xec>)
 8001306:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <_Z18SystemClock_Configv+0xec>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001318:	2302      	movs	r3, #2
 800131a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800131c:	2301      	movs	r3, #1
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001320:	2310      	movs	r3, #16
 8001322:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001324:	2302      	movs	r3, #2
 8001326:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001328:	2300      	movs	r3, #0
 800132a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800132c:	2308      	movs	r3, #8
 800132e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001330:	23a8      	movs	r3, #168	; 0xa8
 8001332:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001334:	2302      	movs	r3, #2
 8001336:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001338:	2304      	movs	r3, #4
 800133a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800133c:	f107 0320 	add.w	r3, r7, #32
 8001340:	4618      	mov	r0, r3
 8001342:	f005 fc15 	bl	8006b70 <HAL_RCC_OscConfig>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	bf14      	ite	ne
 800134c:	2301      	movne	r3, #1
 800134e:	2300      	moveq	r3, #0
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001356:	f000 fa49 	bl	80017ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800135a:	230f      	movs	r3, #15
 800135c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800135e:	2302      	movs	r3, #2
 8001360:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001366:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800136a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800136c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001370:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001372:	f107 030c 	add.w	r3, r7, #12
 8001376:	2105      	movs	r1, #5
 8001378:	4618      	mov	r0, r3
 800137a:	f005 fe71 	bl	8007060 <HAL_RCC_ClockConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	bf14      	ite	ne
 8001384:	2301      	movne	r3, #1
 8001386:	2300      	moveq	r3, #0
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 800138e:	f000 fa2d 	bl	80017ec <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001392:	2200      	movs	r2, #0
 8001394:	2100      	movs	r1, #0
 8001396:	2000      	movs	r0, #0
 8001398:	f005 ff48 	bl	800722c <HAL_RCC_MCOConfig>
}
 800139c:	bf00      	nop
 800139e:	3750      	adds	r7, #80	; 0x50
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40007000 	.word	0x40007000

080013ac <_ZL12MX_DCMI_Initv>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80013b0:	4b13      	ldr	r3, [pc, #76]	; (8001400 <_ZL12MX_DCMI_Initv+0x54>)
 80013b2:	4a14      	ldr	r2, [pc, #80]	; (8001404 <_ZL12MX_DCMI_Initv+0x58>)
 80013b4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <_ZL12MX_DCMI_Initv+0x54>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80013bc:	4b10      	ldr	r3, [pc, #64]	; (8001400 <_ZL12MX_DCMI_Initv+0x54>)
 80013be:	2220      	movs	r2, #32
 80013c0:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80013c2:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <_ZL12MX_DCMI_Initv+0x54>)
 80013c4:	2280      	movs	r2, #128	; 0x80
 80013c6:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80013c8:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <_ZL12MX_DCMI_Initv+0x54>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <_ZL12MX_DCMI_Initv+0x54>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80013d4:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <_ZL12MX_DCMI_Initv+0x54>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <_ZL12MX_DCMI_Initv+0x54>)
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80013e0:	4807      	ldr	r0, [pc, #28]	; (8001400 <_ZL12MX_DCMI_Initv+0x54>)
 80013e2:	f001 f939 	bl	8002658 <HAL_DCMI_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	bf14      	ite	ne
 80013ec:	2301      	movne	r3, #1
 80013ee:	2300      	moveq	r3, #0
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <_ZL12MX_DCMI_Initv+0x4e>
  {
    Error_Handler();
 80013f6:	f000 f9f9 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200002f8 	.word	0x200002f8
 8001404:	50050000 	.word	0x50050000

08001408 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <_ZL12MX_I2C1_Initv+0x5c>)
 800140e:	4a16      	ldr	r2, [pc, #88]	; (8001468 <_ZL12MX_I2C1_Initv+0x60>)
 8001410:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <_ZL12MX_I2C1_Initv+0x5c>)
 8001414:	4a15      	ldr	r2, [pc, #84]	; (800146c <_ZL12MX_I2C1_Initv+0x64>)
 8001416:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <_ZL12MX_I2C1_Initv+0x5c>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <_ZL12MX_I2C1_Initv+0x5c>)
 8001420:	2200      	movs	r2, #0
 8001422:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001424:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <_ZL12MX_I2C1_Initv+0x5c>)
 8001426:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800142a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800142c:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <_ZL12MX_I2C1_Initv+0x5c>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001432:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <_ZL12MX_I2C1_Initv+0x5c>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001438:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <_ZL12MX_I2C1_Initv+0x5c>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <_ZL12MX_I2C1_Initv+0x5c>)
 8001440:	2200      	movs	r2, #0
 8001442:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001444:	4807      	ldr	r0, [pc, #28]	; (8001464 <_ZL12MX_I2C1_Initv+0x5c>)
 8001446:	f003 f8e7 	bl	8004618 <HAL_I2C_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	bf14      	ite	ne
 8001450:	2301      	movne	r3, #1
 8001452:	2300      	moveq	r3, #0
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800145a:	f000 f9c7 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000398 	.word	0x20000398
 8001468:	40005400 	.word	0x40005400
 800146c:	000186a0 	.word	0x000186a0

08001470 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001474:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <_ZL12MX_SPI1_Initv+0x70>)
 8001476:	4a1b      	ldr	r2, [pc, #108]	; (80014e4 <_ZL12MX_SPI1_Initv+0x74>)
 8001478:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800147a:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <_ZL12MX_SPI1_Initv+0x70>)
 800147c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001480:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001482:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <_ZL12MX_SPI1_Initv+0x70>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001488:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <_ZL12MX_SPI1_Initv+0x70>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800148e:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <_ZL12MX_SPI1_Initv+0x70>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001494:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <_ZL12MX_SPI1_Initv+0x70>)
 8001496:	2200      	movs	r2, #0
 8001498:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <_ZL12MX_SPI1_Initv+0x70>)
 800149c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <_ZL12MX_SPI1_Initv+0x70>)
 80014a4:	2208      	movs	r2, #8
 80014a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014a8:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <_ZL12MX_SPI1_Initv+0x70>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <_ZL12MX_SPI1_Initv+0x70>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <_ZL12MX_SPI1_Initv+0x70>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <_ZL12MX_SPI1_Initv+0x70>)
 80014bc:	220a      	movs	r2, #10
 80014be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014c0:	4807      	ldr	r0, [pc, #28]	; (80014e0 <_ZL12MX_SPI1_Initv+0x70>)
 80014c2:	f006 f831 	bl	8007528 <HAL_SPI_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	bf14      	ite	ne
 80014cc:	2301      	movne	r3, #1
 80014ce:	2300      	moveq	r3, #0
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 80014d6:	f000 f989 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200003ec 	.word	0x200003ec
 80014e4:	40013000 	.word	0x40013000

080014e8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <_ZL11MX_DMA_Initv+0x3c>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <_ZL11MX_DMA_Initv+0x3c>)
 80014f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <_ZL11MX_DMA_Initv+0x3c>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	2039      	movs	r0, #57	; 0x39
 8001510:	f000 fe79 	bl	8002206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001514:	2039      	movs	r0, #57	; 0x39
 8001516:	f000 fe92 	bl	800223e <HAL_NVIC_EnableIRQ>

}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800

08001528 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
 800153c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	4b4a      	ldr	r3, [pc, #296]	; (800166c <_ZL12MX_GPIO_Initv+0x144>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a49      	ldr	r2, [pc, #292]	; (800166c <_ZL12MX_GPIO_Initv+0x144>)
 8001548:	f043 0310 	orr.w	r3, r3, #16
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b47      	ldr	r3, [pc, #284]	; (800166c <_ZL12MX_GPIO_Initv+0x144>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0310 	and.w	r3, r3, #16
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b43      	ldr	r3, [pc, #268]	; (800166c <_ZL12MX_GPIO_Initv+0x144>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a42      	ldr	r2, [pc, #264]	; (800166c <_ZL12MX_GPIO_Initv+0x144>)
 8001564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b40      	ldr	r3, [pc, #256]	; (800166c <_ZL12MX_GPIO_Initv+0x144>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	4b3c      	ldr	r3, [pc, #240]	; (800166c <_ZL12MX_GPIO_Initv+0x144>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a3b      	ldr	r2, [pc, #236]	; (800166c <_ZL12MX_GPIO_Initv+0x144>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b39      	ldr	r3, [pc, #228]	; (800166c <_ZL12MX_GPIO_Initv+0x144>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	4b35      	ldr	r3, [pc, #212]	; (800166c <_ZL12MX_GPIO_Initv+0x144>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a34      	ldr	r2, [pc, #208]	; (800166c <_ZL12MX_GPIO_Initv+0x144>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b32      	ldr	r3, [pc, #200]	; (800166c <_ZL12MX_GPIO_Initv+0x144>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	603b      	str	r3, [r7, #0]
 80015b2:	4b2e      	ldr	r3, [pc, #184]	; (800166c <_ZL12MX_GPIO_Initv+0x144>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a2d      	ldr	r2, [pc, #180]	; (800166c <_ZL12MX_GPIO_Initv+0x144>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b2b      	ldr	r3, [pc, #172]	; (800166c <_ZL12MX_GPIO_Initv+0x144>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI_CS_Pin|CAMERA_RESET_Pin, GPIO_PIN_RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2130      	movs	r1, #48	; 0x30
 80015ce:	4828      	ldr	r0, [pc, #160]	; (8001670 <_ZL12MX_GPIO_Initv+0x148>)
 80015d0:	f002 ffe4 	bl	800459c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2101      	movs	r1, #1
 80015d8:	4826      	ldr	r0, [pc, #152]	; (8001674 <_ZL12MX_GPIO_Initv+0x14c>)
 80015da:	f002 ffdf 	bl	800459c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Cam_Btn_Pin */
  GPIO_InitStruct.Pin = Cam_Btn_Pin;
 80015de:	2301      	movs	r3, #1
 80015e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Cam_Btn_GPIO_Port, &GPIO_InitStruct);
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4619      	mov	r1, r3
 80015f2:	4821      	ldr	r0, [pc, #132]	; (8001678 <_ZL12MX_GPIO_Initv+0x150>)
 80015f4:	f002 fe36 	bl	8004264 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin CAMERA_RESET_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|CAMERA_RESET_Pin;
 80015f8:	2330      	movs	r3, #48	; 0x30
 80015fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fc:	2301      	movs	r3, #1
 80015fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	2300      	movs	r3, #0
 8001606:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4619      	mov	r1, r3
 800160e:	4818      	ldr	r0, [pc, #96]	; (8001670 <_ZL12MX_GPIO_Initv+0x148>)
 8001610:	f002 fe28 	bl	8004264 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001614:	2301      	movs	r3, #1
 8001616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001618:	2301      	movs	r3, #1
 800161a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4619      	mov	r1, r3
 800162a:	4812      	ldr	r0, [pc, #72]	; (8001674 <_ZL12MX_GPIO_Initv+0x14c>)
 800162c:	f002 fe1a 	bl	8004264 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001630:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800163a:	2301      	movs	r3, #1
 800163c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800163e:	2302      	movs	r3, #2
 8001640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001642:	2300      	movs	r3, #0
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	480a      	ldr	r0, [pc, #40]	; (8001678 <_ZL12MX_GPIO_Initv+0x150>)
 800164e:	f002 fe09 	bl	8004264 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	2006      	movs	r0, #6
 8001658:	f000 fdd5 	bl	8002206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800165c:	2006      	movs	r0, #6
 800165e:	f000 fdee 	bl	800223e <HAL_NVIC_EnableIRQ>

}
 8001662:	bf00      	nop
 8001664:	3728      	adds	r7, #40	; 0x28
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800
 8001670:	40020800 	.word	0x40020800
 8001674:	40020400 	.word	0x40020400
 8001678:	40020000 	.word	0x40020000

0800167c <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <_ZL13MX_UART4_Initv+0x54>)
 8001682:	4a14      	ldr	r2, [pc, #80]	; (80016d4 <_ZL13MX_UART4_Initv+0x58>)
 8001684:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001686:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <_ZL13MX_UART4_Initv+0x54>)
 8001688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800168c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <_ZL13MX_UART4_Initv+0x54>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001694:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <_ZL13MX_UART4_Initv+0x54>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800169a:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <_ZL13MX_UART4_Initv+0x54>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <_ZL13MX_UART4_Initv+0x54>)
 80016a2:	220c      	movs	r2, #12
 80016a4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <_ZL13MX_UART4_Initv+0x54>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <_ZL13MX_UART4_Initv+0x54>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
//  HAL_UART_MspInit(&huart4);
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80016b2:	4807      	ldr	r0, [pc, #28]	; (80016d0 <_ZL13MX_UART4_Initv+0x54>)
 80016b4:	f006 fb78 	bl	8007da8 <HAL_UART_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	bf14      	ite	ne
 80016be:	2301      	movne	r3, #1
 80016c0:	2300      	moveq	r3, #0
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 80016c8:	f000 f890 	bl	80017ec <Error_Handler>

  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000448 	.word	0x20000448
 80016d4:	40004c00 	.word	0x40004c00

080016d8 <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

extern "C" void SDTimer_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <SDTimer_Handler+0x54>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	bf14      	ite	ne
 80016e6:	2301      	movne	r3, #1
 80016e8:	2300      	moveq	r3, #0
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d006      	beq.n	80016fe <SDTimer_Handler+0x26>
    Timer1--;
 80016f0:	4b0e      	ldr	r3, [pc, #56]	; (800172c <SDTimer_Handler+0x54>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	3b01      	subs	r3, #1
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4b0c      	ldr	r3, [pc, #48]	; (800172c <SDTimer_Handler+0x54>)
 80016fc:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80016fe:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <SDTimer_Handler+0x58>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	bf14      	ite	ne
 8001708:	2301      	movne	r3, #1
 800170a:	2300      	moveq	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d006      	beq.n	8001720 <SDTimer_Handler+0x48>
    Timer2--;
 8001712:	4b07      	ldr	r3, [pc, #28]	; (8001730 <SDTimer_Handler+0x58>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	3b01      	subs	r3, #1
 800171a:	b2da      	uxtb	r2, r3
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <SDTimer_Handler+0x58>)
 800171e:	701a      	strb	r2, [r3, #0]
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	2000ce5f 	.word	0x2000ce5f
 8001730:	2000ce60 	.word	0x2000ce60

08001734 <SysTick_Handler>:


extern "C" void SysTick_Handler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  FatFsCnt++;
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <SysTick_Handler+0x38>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	3301      	adds	r3, #1
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <SysTick_Handler+0x38>)
 8001744:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10)
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <SysTick_Handler+0x38>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b09      	cmp	r3, #9
 800174e:	bf8c      	ite	hi
 8001750:	2301      	movhi	r3, #1
 8001752:	2300      	movls	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d004      	beq.n	8001764 <SysTick_Handler+0x30>
  {
	FatFsCnt = 0;
 800175a:	4b04      	ldr	r3, [pc, #16]	; (800176c <SysTick_Handler+0x38>)
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
	SDTimer_Handler();
 8001760:	f7ff ffba 	bl	80016d8 <SDTimer_Handler>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001764:	f000 fc30 	bl	8001fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	2000ce5e 	.word	0x2000ce5e

08001770 <UART4_IRQHandler>:



extern "C" void UART4_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	ttDataLinkLayerPoint.RxByteHandler((uint8_t)UART4->DR);
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <UART4_IRQHandler+0x1c>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	4619      	mov	r1, r3
 800177c:	4804      	ldr	r0, [pc, #16]	; (8001790 <UART4_IRQHandler+0x20>)
 800177e:	f000 f85c 	bl	800183a <_ZN21TT_DataLinkLayerPointILt2048ELt1000EE13RxByteHandlerEh>
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001782:	4804      	ldr	r0, [pc, #16]	; (8001794 <UART4_IRQHandler+0x24>)
 8001784:	f006 fc20 	bl	8007fc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40004c00 	.word	0x40004c00
 8001790:	2000048c 	.word	0x2000048c
 8001794:	20000448 	.word	0x20000448

08001798 <_Z5writeh>:

/* USER CODE BEGIN 4 */
void write(uint8_t val)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
  HAL_UART_Transmit(&huart4, &val, 1, 0xFFFF);
 80017a2:	1df9      	adds	r1, r7, #7
 80017a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017a8:	2201      	movs	r2, #1
 80017aa:	4803      	ldr	r0, [pc, #12]	; (80017b8 <_Z5writeh+0x20>)
 80017ac:	f006 fb49 	bl	8007e42 <HAL_UART_Transmit>
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000448 	.word	0x20000448

080017bc <_Z4readPht>:


void read(uint8_t *UardRecivedData, uint16_t len)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	807b      	strh	r3, [r7, #2]
    if (len == 1)
 80017c8:	887b      	ldrh	r3, [r7, #2]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d106      	bne.n	80017dc <_Z4readPht+0x20>
    {
      if (UardRecivedData[0] == 0x02)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d102      	bne.n	80017dc <_Z4readPht+0x20>
      {
    	  	 write_flag = true;
 80017d6:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <_Z4readPht+0x2c>)
 80017d8:	2201      	movs	r2, #1
 80017da:	701a      	strb	r2, [r3, #0]
    }
    else
    {

    }
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	20000444 	.word	0x20000444

080017ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
extern "C" void Error_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f0:	b672      	cpsid	i
}
 80017f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <Error_Handler+0x8>

080017f6 <_ZN21TT_DataLinkLayerPointILt2048ELt1000EEC1EPFvhEPFvPhtE>:
    //Рабочий буфер приемника
    uint8_t RxBuf[RxDataLenLimit+2];

public:

    TT_DataLinkLayerPoint(void(*SendByteFunc_p)(uint8_t), void(*RxDataHandlerFunc_p)(uint8_t*, uint16_t))
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b084      	sub	sp, #16
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	60f8      	str	r0, [r7, #12]
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
        : T_DataLinkLayer_base(SendByteFunc_p, RxDataHandlerFunc_p)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	68b9      	ldr	r1, [r7, #8]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fc21 	bl	8001050 <_ZN20T_DataLinkLayer_baseC1EPFvhEPFvPhtE>
    {}
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	4618      	mov	r0, r3
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <_ZN21TT_DataLinkLayerPointILt2048ELt1000EE4SendEPKhm>:

    //Отправляет отрезок данных в виде одного или нескольких фреймов, согласно протоколу
    inline void Send(const uint8_t* Data_p, uint32_t Len)
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
    {
        SendData_base(Data_p, Len, TxDataLenLimit);
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	68b9      	ldr	r1, [r7, #8]
 800182e:	f7fe fe81 	bl	8000534 <_ZN20T_DataLinkLayer_base13SendData_baseEPKhmt>
    }
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <_ZN21TT_DataLinkLayerPointILt2048ELt1000EE13RxByteHandlerEh>:
    inline void Send(const uint8_t data)
    {
        SendData_base(&data, 1, TxDataLenLimit);
    }
    //Обрабатывает очередной байт, принятый через физический интерфейс
    void RxByteHandler(uint8_t NewByte)
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	460b      	mov	r3, r1
 8001844:	70fb      	strb	r3, [r7, #3]
    {
        if(NewByte==DLL_START_OR_END_FRAME)
 8001846:	78fb      	ldrb	r3, [r7, #3]
 8001848:	2b7e      	cmp	r3, #126	; 0x7e
 800184a:	d11f      	bne.n	800188c <_ZN21TT_DataLinkLayerPointILt2048ELt1000EE13RxByteHandlerEh+0x52>
        {
            if(FrameLen>2)	//если фрейм содержал данные помимо контрольной суммы
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	2b02      	cmp	r3, #2
 8001852:	d910      	bls.n	8001876 <_ZN21TT_DataLinkLayerPointILt2048ELt1000EE13RxByteHandlerEh+0x3c>
            {
                if(GOOD_CRC16_Q921 == crc)	//проверка контрольной суммы
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	885b      	ldrh	r3, [r3, #2]
 8001858:	f24f 02b8 	movw	r2, #61624	; 0xf0b8
 800185c:	4293      	cmp	r3, r2
 800185e:	d10a      	bne.n	8001876 <_ZN21TT_DataLinkLayerPointILt2048ELt1000EE13RxByteHandlerEh+0x3c>
                {
                    RxDataHandler_p(RxBuf, FrameLen-2);	//обработка принятых данных
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	f102 0010 	add.w	r0, r2, #16
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	8812      	ldrh	r2, [r2, #0]
 800186e:	3a02      	subs	r2, #2
 8001870:	b292      	uxth	r2, r2
 8001872:	4611      	mov	r1, r2
 8001874:	4798      	blx	r3
                }
            }
            FrameLen=0;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	801a      	strh	r2, [r3, #0]
            ReceivingData=true;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	711a      	strb	r2, [r3, #4]
            crc=INIT_CRC16_Q921;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001888:	805a      	strh	r2, [r3, #2]
 800188a:	e042      	b.n	8001912 <_ZN21TT_DataLinkLayerPointILt2048ELt1000EE13RxByteHandlerEh+0xd8>
        }
        else
        {
            if(ReceivingData)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	791b      	ldrb	r3, [r3, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d03e      	beq.n	8001912 <_ZN21TT_DataLinkLayerPointILt2048ELt1000EE13RxByteHandlerEh+0xd8>
            {
                //обработка байтстаффинга
                if(ByteDeStaffing)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	795b      	ldrb	r3, [r3, #5]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d010      	beq.n	80018be <_ZN21TT_DataLinkLayerPointILt2048ELt1000EE13RxByteHandlerEh+0x84>
                {
                    ByteDeStaffing = false;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	715a      	strb	r2, [r3, #5]
                    if(NewByte!=0x5D && NewByte!=0x5E)
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	2b5d      	cmp	r3, #93	; 0x5d
 80018a6:	d006      	beq.n	80018b6 <_ZN21TT_DataLinkLayerPointILt2048ELt1000EE13RxByteHandlerEh+0x7c>
 80018a8:	78fb      	ldrb	r3, [r7, #3]
 80018aa:	2b5e      	cmp	r3, #94	; 0x5e
 80018ac:	d003      	beq.n	80018b6 <_ZN21TT_DataLinkLayerPointILt2048ELt1000EE13RxByteHandlerEh+0x7c>
                    {
                        ReceivingData=false;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	711a      	strb	r2, [r3, #4]
                        //terminal_printf("\033[1;31mОШИБКА: RxByteHandler_base: Ошибка байтстаффинга в принятом фрейме!\033[0m\n");
                        return;
 80018b4:	e02d      	b.n	8001912 <_ZN21TT_DataLinkLayerPointILt2048ELt1000EE13RxByteHandlerEh+0xd8>
                    }
                    NewByte += 0x20;
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	3320      	adds	r3, #32
 80018ba:	70fb      	strb	r3, [r7, #3]
 80018bc:	e006      	b.n	80018cc <_ZN21TT_DataLinkLayerPointILt2048ELt1000EE13RxByteHandlerEh+0x92>
                }
                else if(NewByte == DLL_STAF_TOKEN)
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	2b7d      	cmp	r3, #125	; 0x7d
 80018c2:	d103      	bne.n	80018cc <_ZN21TT_DataLinkLayerPointILt2048ELt1000EE13RxByteHandlerEh+0x92>
                {
                    ByteDeStaffing = true;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	715a      	strb	r2, [r3, #5]
                    return;
 80018ca:	e022      	b.n	8001912 <_ZN21TT_DataLinkLayerPointILt2048ELt1000EE13RxByteHandlerEh+0xd8>
                }
                //обработка данных
                if(FrameLen >= RxDataLenLimit+2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	f640 0201 	movw	r2, #2049	; 0x801
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d906      	bls.n	80018e6 <_ZN21TT_DataLinkLayerPointILt2048ELt1000EE13RxByteHandlerEh+0xac>
                {
                    ReceivingData=false;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	711a      	strb	r2, [r3, #4]
                    ByteDeStaffing=false;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	715a      	strb	r2, [r3, #5]
                    //terminal_printf("\033[1;31mОШИБКА: RxByteHandler_base: Превышен лимит количества данных в принимаемом фрейме! Лимит:%u\033[0m\n", RxDataLenLimit);
                    return;
 80018e4:	e015      	b.n	8001912 <_ZN21TT_DataLinkLayerPointILt2048ELt1000EE13RxByteHandlerEh+0xd8>
                }
                RxBuf[FrameLen++] = NewByte;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	b291      	uxth	r1, r2
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	8011      	strh	r1, [r2, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4413      	add	r3, r2
 80018f8:	78fa      	ldrb	r2, [r7, #3]
 80018fa:	741a      	strb	r2, [r3, #16]
                crc = CRC16_Q921_update(crc, NewByte);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	885b      	ldrh	r3, [r3, #2]
 8001900:	78fa      	ldrb	r2, [r7, #3]
 8001902:	4611      	mov	r1, r2
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fddb 	bl	80004c0 <_Z17CRC16_Q921_updateth>
 800190a:	4603      	mov	r3, r0
 800190c:	461a      	mov	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	805a      	strh	r2, [r3, #2]
            }
        }
    }
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d109      	bne.n	800193c <_Z41__static_initialization_and_destruction_0ii+0x24>
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800192e:	4293      	cmp	r3, r2
 8001930:	d104      	bne.n	800193c <_Z41__static_initialization_and_destruction_0ii+0x24>
TT_DataLinkLayerPoint<2048, 1000> ttDataLinkLayerPoint(write, read);
 8001932:	4a04      	ldr	r2, [pc, #16]	; (8001944 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001934:	4904      	ldr	r1, [pc, #16]	; (8001948 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001936:	4805      	ldr	r0, [pc, #20]	; (800194c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001938:	f7ff ff5d 	bl	80017f6 <_ZN21TT_DataLinkLayerPointILt2048ELt1000EEC1EPFvhEPFvPhtE>
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	080017bd 	.word	0x080017bd
 8001948:	08001799 	.word	0x08001799
 800194c:	2000048c 	.word	0x2000048c

08001950 <_GLOBAL__sub_I_hdcmi>:
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
 8001954:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001958:	2001      	movs	r0, #1
 800195a:	f7ff ffdd 	bl	8001918 <_Z41__static_initialization_and_destruction_0ii>
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <HAL_MspInit+0x4c>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	4a0f      	ldr	r2, [pc, #60]	; (80019ac <HAL_MspInit+0x4c>)
 8001970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001974:	6453      	str	r3, [r2, #68]	; 0x44
 8001976:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <HAL_MspInit+0x4c>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	603b      	str	r3, [r7, #0]
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <HAL_MspInit+0x4c>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	4a08      	ldr	r2, [pc, #32]	; (80019ac <HAL_MspInit+0x4c>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001990:	6413      	str	r3, [r2, #64]	; 0x40
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_MspInit+0x4c>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800

080019b0 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08c      	sub	sp, #48	; 0x30
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 031c 	add.w	r3, r7, #28
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a68      	ldr	r2, [pc, #416]	; (8001b70 <HAL_DCMI_MspInit+0x1c0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	f040 80c9 	bne.w	8001b66 <HAL_DCMI_MspInit+0x1b6>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80019d4:	2300      	movs	r3, #0
 80019d6:	61bb      	str	r3, [r7, #24]
 80019d8:	4b66      	ldr	r3, [pc, #408]	; (8001b74 <HAL_DCMI_MspInit+0x1c4>)
 80019da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019dc:	4a65      	ldr	r2, [pc, #404]	; (8001b74 <HAL_DCMI_MspInit+0x1c4>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6353      	str	r3, [r2, #52]	; 0x34
 80019e4:	4b63      	ldr	r3, [pc, #396]	; (8001b74 <HAL_DCMI_MspInit+0x1c4>)
 80019e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	61bb      	str	r3, [r7, #24]
 80019ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	4b5f      	ldr	r3, [pc, #380]	; (8001b74 <HAL_DCMI_MspInit+0x1c4>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f8:	4a5e      	ldr	r2, [pc, #376]	; (8001b74 <HAL_DCMI_MspInit+0x1c4>)
 80019fa:	f043 0310 	orr.w	r3, r3, #16
 80019fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001a00:	4b5c      	ldr	r3, [pc, #368]	; (8001b74 <HAL_DCMI_MspInit+0x1c4>)
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	f003 0310 	and.w	r3, r3, #16
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	4b58      	ldr	r3, [pc, #352]	; (8001b74 <HAL_DCMI_MspInit+0x1c4>)
 8001a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a14:	4a57      	ldr	r2, [pc, #348]	; (8001b74 <HAL_DCMI_MspInit+0x1c4>)
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1c:	4b55      	ldr	r3, [pc, #340]	; (8001b74 <HAL_DCMI_MspInit+0x1c4>)
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	4b51      	ldr	r3, [pc, #324]	; (8001b74 <HAL_DCMI_MspInit+0x1c4>)
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a30:	4a50      	ldr	r2, [pc, #320]	; (8001b74 <HAL_DCMI_MspInit+0x1c4>)
 8001a32:	f043 0304 	orr.w	r3, r3, #4
 8001a36:	6313      	str	r3, [r2, #48]	; 0x30
 8001a38:	4b4e      	ldr	r3, [pc, #312]	; (8001b74 <HAL_DCMI_MspInit+0x1c4>)
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a44:	2300      	movs	r3, #0
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	4b4a      	ldr	r3, [pc, #296]	; (8001b74 <HAL_DCMI_MspInit+0x1c4>)
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	4a49      	ldr	r2, [pc, #292]	; (8001b74 <HAL_DCMI_MspInit+0x1c4>)
 8001a4e:	f043 0302 	orr.w	r3, r3, #2
 8001a52:	6313      	str	r3, [r2, #48]	; 0x30
 8001a54:	4b47      	ldr	r3, [pc, #284]	; (8001b74 <HAL_DCMI_MspInit+0x1c4>)
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001a60:	2370      	movs	r3, #112	; 0x70
 8001a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a70:	230d      	movs	r3, #13
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a74:	f107 031c 	add.w	r3, r7, #28
 8001a78:	4619      	mov	r1, r3
 8001a7a:	483f      	ldr	r0, [pc, #252]	; (8001b78 <HAL_DCMI_MspInit+0x1c8>)
 8001a7c:	f002 fbf2 	bl	8004264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001a80:	2350      	movs	r3, #80	; 0x50
 8001a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a90:	230d      	movs	r3, #13
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a94:	f107 031c 	add.w	r3, r7, #28
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4838      	ldr	r0, [pc, #224]	; (8001b7c <HAL_DCMI_MspInit+0x1cc>)
 8001a9c:	f002 fbe2 	bl	8004264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001aa0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ab2:	230d      	movs	r3, #13
 8001ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab6:	f107 031c 	add.w	r3, r7, #28
 8001aba:	4619      	mov	r1, r3
 8001abc:	4830      	ldr	r0, [pc, #192]	; (8001b80 <HAL_DCMI_MspInit+0x1d0>)
 8001abe:	f002 fbd1 	bl	8004264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ac2:	23c0      	movs	r3, #192	; 0xc0
 8001ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ad2:	230d      	movs	r3, #13
 8001ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad6:	f107 031c 	add.w	r3, r7, #28
 8001ada:	4619      	mov	r1, r3
 8001adc:	4829      	ldr	r0, [pc, #164]	; (8001b84 <HAL_DCMI_MspInit+0x1d4>)
 8001ade:	f002 fbc1 	bl	8004264 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8001ae2:	4b29      	ldr	r3, [pc, #164]	; (8001b88 <HAL_DCMI_MspInit+0x1d8>)
 8001ae4:	4a29      	ldr	r2, [pc, #164]	; (8001b8c <HAL_DCMI_MspInit+0x1dc>)
 8001ae6:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8001ae8:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <HAL_DCMI_MspInit+0x1d8>)
 8001aea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aee:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001af0:	4b25      	ldr	r3, [pc, #148]	; (8001b88 <HAL_DCMI_MspInit+0x1d8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af6:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <HAL_DCMI_MspInit+0x1d8>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001afc:	4b22      	ldr	r3, [pc, #136]	; (8001b88 <HAL_DCMI_MspInit+0x1d8>)
 8001afe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b02:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b04:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <HAL_DCMI_MspInit+0x1d8>)
 8001b06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b0a:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b0c:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <HAL_DCMI_MspInit+0x1d8>)
 8001b0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b12:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8001b14:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <HAL_DCMI_MspInit+0x1d8>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8001b1a:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <HAL_DCMI_MspInit+0x1d8>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001b20:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <HAL_DCMI_MspInit+0x1d8>)
 8001b22:	2204      	movs	r2, #4
 8001b24:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001b26:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <HAL_DCMI_MspInit+0x1d8>)
 8001b28:	2203      	movs	r2, #3
 8001b2a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_INC4;
 8001b2c:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <HAL_DCMI_MspInit+0x1d8>)
 8001b2e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001b32:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001b34:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <HAL_DCMI_MspInit+0x1d8>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001b3a:	4813      	ldr	r0, [pc, #76]	; (8001b88 <HAL_DCMI_MspInit+0x1d8>)
 8001b3c:	f000 fdfa 	bl	8002734 <HAL_DMA_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_DCMI_MspInit+0x19a>
    {
      Error_Handler();
 8001b46:	f7ff fe51 	bl	80017ec <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a0e      	ldr	r2, [pc, #56]	; (8001b88 <HAL_DCMI_MspInit+0x1d8>)
 8001b4e:	639a      	str	r2, [r3, #56]	; 0x38
 8001b50:	4a0d      	ldr	r2, [pc, #52]	; (8001b88 <HAL_DCMI_MspInit+0x1d8>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2100      	movs	r1, #0
 8001b5a:	204e      	movs	r0, #78	; 0x4e
 8001b5c:	f000 fb53 	bl	8002206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8001b60:	204e      	movs	r0, #78	; 0x4e
 8001b62:	f000 fb6c 	bl	800223e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001b66:	bf00      	nop
 8001b68:	3730      	adds	r7, #48	; 0x30
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	50050000 	.word	0x50050000
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	40020800 	.word	0x40020800
 8001b84:	40020400 	.word	0x40020400
 8001b88:	20000338 	.word	0x20000338
 8001b8c:	40026428 	.word	0x40026428

08001b90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a21      	ldr	r2, [pc, #132]	; (8001c34 <HAL_I2C_MspInit+0xa4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d13c      	bne.n	8001c2c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	4b20      	ldr	r3, [pc, #128]	; (8001c38 <HAL_I2C_MspInit+0xa8>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a1f      	ldr	r2, [pc, #124]	; (8001c38 <HAL_I2C_MspInit+0xa8>)
 8001bbc:	f043 0302 	orr.w	r3, r3, #2
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <HAL_I2C_MspInit+0xa8>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd4:	2312      	movs	r3, #18
 8001bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001be0:	2304      	movs	r3, #4
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4619      	mov	r1, r3
 8001bea:	4814      	ldr	r0, [pc, #80]	; (8001c3c <HAL_I2C_MspInit+0xac>)
 8001bec:	f002 fb3a 	bl	8004264 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <HAL_I2C_MspInit+0xa8>)
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	4a0f      	ldr	r2, [pc, #60]	; (8001c38 <HAL_I2C_MspInit+0xa8>)
 8001bfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bfe:	6413      	str	r3, [r2, #64]	; 0x40
 8001c00:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <HAL_I2C_MspInit+0xa8>)
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2100      	movs	r1, #0
 8001c10:	201f      	movs	r0, #31
 8001c12:	f000 faf8 	bl	8002206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001c16:	201f      	movs	r0, #31
 8001c18:	f000 fb11 	bl	800223e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2100      	movs	r1, #0
 8001c20:	2020      	movs	r0, #32
 8001c22:	f000 faf0 	bl	8002206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001c26:	2020      	movs	r0, #32
 8001c28:	f000 fb09 	bl	800223e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c2c:	bf00      	nop
 8001c2e:	3728      	adds	r7, #40	; 0x28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40005400 	.word	0x40005400
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40020400 	.word	0x40020400

08001c40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	; 0x28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a28      	ldr	r2, [pc, #160]	; (8001d00 <HAL_SPI_MspInit+0xc0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d149      	bne.n	8001cf6 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <HAL_SPI_MspInit+0xc4>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	4a26      	ldr	r2, [pc, #152]	; (8001d04 <HAL_SPI_MspInit+0xc4>)
 8001c6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c70:	6453      	str	r3, [r2, #68]	; 0x44
 8001c72:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <HAL_SPI_MspInit+0xc4>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <HAL_SPI_MspInit+0xc4>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	4a1f      	ldr	r2, [pc, #124]	; (8001d04 <HAL_SPI_MspInit+0xc4>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8e:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <HAL_SPI_MspInit+0xc4>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <HAL_SPI_MspInit+0xc4>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a18      	ldr	r2, [pc, #96]	; (8001d04 <HAL_SPI_MspInit+0xc4>)
 8001ca4:	f043 0302 	orr.w	r3, r3, #2
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <HAL_SPI_MspInit+0xc4>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001cb6:	23a0      	movs	r3, #160	; 0xa0
 8001cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cc6:	2305      	movs	r3, #5
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	480d      	ldr	r0, [pc, #52]	; (8001d08 <HAL_SPI_MspInit+0xc8>)
 8001cd2:	f002 fac7 	bl	8004264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001cd6:	2310      	movs	r3, #16
 8001cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ce6:	2305      	movs	r3, #5
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cea:	f107 0314 	add.w	r3, r7, #20
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4806      	ldr	r0, [pc, #24]	; (8001d0c <HAL_SPI_MspInit+0xcc>)
 8001cf2:	f002 fab7 	bl	8004264 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001cf6:	bf00      	nop
 8001cf8:	3728      	adds	r7, #40	; 0x28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40013000 	.word	0x40013000
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40020000 	.word	0x40020000
 8001d0c:	40020400 	.word	0x40020400

08001d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	; 0x28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
//  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d28:	2300      	movs	r3, #0
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	4b2a      	ldr	r3, [pc, #168]	; (8001dd8 <HAL_UART_MspInit+0xc8>)
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	4a29      	ldr	r2, [pc, #164]	; (8001dd8 <HAL_UART_MspInit+0xc8>)
 8001d32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d36:	6413      	str	r3, [r2, #64]	; 0x40
 8001d38:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <HAL_UART_MspInit+0xc8>)
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	4b23      	ldr	r3, [pc, #140]	; (8001dd8 <HAL_UART_MspInit+0xc8>)
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4c:	4a22      	ldr	r2, [pc, #136]	; (8001dd8 <HAL_UART_MspInit+0xc8>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6313      	str	r3, [r2, #48]	; 0x30
 8001d54:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <HAL_UART_MspInit+0xc8>)
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d60:	2300      	movs	r3, #0
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	4b1c      	ldr	r3, [pc, #112]	; (8001dd8 <HAL_UART_MspInit+0xc8>)
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	4a1b      	ldr	r2, [pc, #108]	; (8001dd8 <HAL_UART_MspInit+0xc8>)
 8001d6a:	f043 0304 	orr.w	r3, r3, #4
 8001d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d70:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <HAL_UART_MspInit+0xc8>)
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d80:	2302      	movs	r3, #2
 8001d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d8c:	2308      	movs	r3, #8
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	4619      	mov	r1, r3
 8001d96:	4811      	ldr	r0, [pc, #68]	; (8001ddc <HAL_UART_MspInit+0xcc>)
 8001d98:	f002 fa64 	bl	8004264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da2:	2302      	movs	r3, #2
 8001da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001daa:	2303      	movs	r3, #3
 8001dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001dae:	2308      	movs	r3, #8
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db2:	f107 0314 	add.w	r3, r7, #20
 8001db6:	4619      	mov	r1, r3
 8001db8:	4809      	ldr	r0, [pc, #36]	; (8001de0 <HAL_UART_MspInit+0xd0>)
 8001dba:	f002 fa53 	bl	8004264 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	2034      	movs	r0, #52	; 0x34
 8001dc4:	f000 fa1f 	bl	8002206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001dc8:	2034      	movs	r0, #52	; 0x34
 8001dca:	f000 fa38 	bl	800223e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
//  }

}
 8001dce:	bf00      	nop
 8001dd0:	3728      	adds	r7, #40	; 0x28
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40020000 	.word	0x40020000
 8001de0:	40020800 	.word	0x40020800

08001de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001de8:	e7fe      	b.n	8001de8 <NMI_Handler+0x4>

08001dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dee:	e7fe      	b.n	8001dee <HardFault_Handler+0x4>

08001df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df4:	e7fe      	b.n	8001df4 <MemManage_Handler+0x4>

08001df6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dfa:	e7fe      	b.n	8001dfa <BusFault_Handler+0x4>

08001dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <UsageFault_Handler+0x4>

08001e02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	a = 100;
 8001e30:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <EXTI0_IRQHandler+0x24>)
 8001e32:	2264      	movs	r2, #100	; 0x64
 8001e34:	601a      	str	r2, [r3, #0]
	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, adres, 176*144/2);
 8001e36:	4a07      	ldr	r2, [pc, #28]	; (8001e54 <EXTI0_IRQHandler+0x28>)
 8001e38:	f44f 5346 	mov.w	r3, #12672	; 0x3180
 8001e3c:	2102      	movs	r1, #2
 8001e3e:	4806      	ldr	r0, [pc, #24]	; (8001e58 <EXTI0_IRQHandler+0x2c>)
 8001e40:	f000 fa18 	bl	8002274 <HAL_DCMI_Start_DMA>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001e44:	2001      	movs	r0, #1
 8001e46:	f002 fbc3 	bl	80045d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	2000ce64 	.word	0x2000ce64
 8001e54:	20000ca8 	.word	0x20000ca8
 8001e58:	200002f8 	.word	0x200002f8

08001e5c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e60:	4802      	ldr	r0, [pc, #8]	; (8001e6c <I2C1_EV_IRQHandler+0x10>)
 8001e62:	f002 ff15 	bl	8004c90 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000398 	.word	0x20000398

08001e70 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001e74:	4802      	ldr	r0, [pc, #8]	; (8001e80 <I2C1_ER_IRQHandler+0x10>)
 8001e76:	f003 f87c 	bl	8004f72 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000398 	.word	0x20000398

08001e84 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
//		createPhoto();
//   }


  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <DMA2_Stream1_IRQHandler+0x10>)
 8001e8a:	f000 fdeb 	bl	8002a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000338 	.word	0x20000338

08001e98 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
////		createPhoto();
//	}
	//createPhoto();

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001e9c:	4802      	ldr	r0, [pc, #8]	; (8001ea8 <DCMI_IRQHandler+0x10>)
 8001e9e:	f000 fa89 	bl	80023b4 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
  /* USER CODE END DCMI_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200002f8 	.word	0x200002f8

08001eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <SystemInit+0x20>)
 8001eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb6:	4a05      	ldr	r2, [pc, #20]	; (8001ecc <SystemInit+0x20>)
 8001eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ed4:	480d      	ldr	r0, [pc, #52]	; (8001f0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ed6:	490e      	ldr	r1, [pc, #56]	; (8001f10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ed8:	4a0e      	ldr	r2, [pc, #56]	; (8001f14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001edc:	e002      	b.n	8001ee4 <LoopCopyDataInit>

08001ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ee2:	3304      	adds	r3, #4

08001ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee8:	d3f9      	bcc.n	8001ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eea:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001eec:	4c0b      	ldr	r4, [pc, #44]	; (8001f1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef0:	e001      	b.n	8001ef6 <LoopFillZerobss>

08001ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef4:	3204      	adds	r2, #4

08001ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef8:	d3fb      	bcc.n	8001ef2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001efa:	f7ff ffd7 	bl	8001eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001efe:	f006 fff1 	bl	8008ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f02:	f7ff f95b 	bl	80011bc <main>
  bx  lr    
 8001f06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f10:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8001f14:	080091f4 	.word	0x080091f4
  ldr r2, =_sbss
 8001f18:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8001f1c:	2000eee8 	.word	0x2000eee8

08001f20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f20:	e7fe      	b.n	8001f20 <ADC_IRQHandler>
	...

08001f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f28:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <HAL_Init+0x40>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	; (8001f64 <HAL_Init+0x40>)
 8001f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_Init+0x40>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <HAL_Init+0x40>)
 8001f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <HAL_Init+0x40>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a07      	ldr	r2, [pc, #28]	; (8001f64 <HAL_Init+0x40>)
 8001f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f4c:	2003      	movs	r0, #3
 8001f4e:	f000 f94f 	bl	80021f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f52:	200f      	movs	r0, #15
 8001f54:	f000 f808 	bl	8001f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f58:	f7ff fd02 	bl	8001960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40023c00 	.word	0x40023c00

08001f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_InitTick+0x54>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <HAL_InitTick+0x58>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 f967 	bl	800225a <HAL_SYSTICK_Config>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00e      	b.n	8001fb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b0f      	cmp	r3, #15
 8001f9a:	d80a      	bhi.n	8001fb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa4:	f000 f92f 	bl	8002206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa8:	4a06      	ldr	r2, [pc, #24]	; (8001fc4 <HAL_InitTick+0x5c>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e000      	b.n	8001fb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	200002b8 	.word	0x200002b8
 8001fc0:	200002c0 	.word	0x200002c0
 8001fc4:	200002bc 	.word	0x200002bc

08001fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_IncTick+0x20>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b06      	ldr	r3, [pc, #24]	; (8001fec <HAL_IncTick+0x24>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	4a04      	ldr	r2, [pc, #16]	; (8001fec <HAL_IncTick+0x24>)
 8001fda:	6013      	str	r3, [r2, #0]
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	200002c0 	.word	0x200002c0
 8001fec:	2000ce78 	.word	0x2000ce78

08001ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff4:	4b03      	ldr	r3, [pc, #12]	; (8002004 <HAL_GetTick+0x14>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	2000ce78 	.word	0x2000ce78

08002008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002010:	f7ff ffee 	bl	8001ff0 <HAL_GetTick>
 8002014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002020:	d005      	beq.n	800202e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002022:	4b0a      	ldr	r3, [pc, #40]	; (800204c <HAL_Delay+0x44>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4413      	add	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800202e:	bf00      	nop
 8002030:	f7ff ffde 	bl	8001ff0 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	429a      	cmp	r2, r3
 800203e:	d8f7      	bhi.n	8002030 <HAL_Delay+0x28>
  {
  }
}
 8002040:	bf00      	nop
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200002c0 	.word	0x200002c0

08002050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <__NVIC_SetPriorityGrouping+0x44>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800206c:	4013      	ands	r3, r2
 800206e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800207c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002082:	4a04      	ldr	r2, [pc, #16]	; (8002094 <__NVIC_SetPriorityGrouping+0x44>)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	60d3      	str	r3, [r2, #12]
}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800209c:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <__NVIC_GetPriorityGrouping+0x18>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	0a1b      	lsrs	r3, r3, #8
 80020a2:	f003 0307 	and.w	r3, r3, #7
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	db0b      	blt.n	80020de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	f003 021f 	and.w	r2, r3, #31
 80020cc:	4907      	ldr	r1, [pc, #28]	; (80020ec <__NVIC_EnableIRQ+0x38>)
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	095b      	lsrs	r3, r3, #5
 80020d4:	2001      	movs	r0, #1
 80020d6:	fa00 f202 	lsl.w	r2, r0, r2
 80020da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	e000e100 	.word	0xe000e100

080020f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	6039      	str	r1, [r7, #0]
 80020fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002100:	2b00      	cmp	r3, #0
 8002102:	db0a      	blt.n	800211a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	b2da      	uxtb	r2, r3
 8002108:	490c      	ldr	r1, [pc, #48]	; (800213c <__NVIC_SetPriority+0x4c>)
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	0112      	lsls	r2, r2, #4
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	440b      	add	r3, r1
 8002114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002118:	e00a      	b.n	8002130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	b2da      	uxtb	r2, r3
 800211e:	4908      	ldr	r1, [pc, #32]	; (8002140 <__NVIC_SetPriority+0x50>)
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	3b04      	subs	r3, #4
 8002128:	0112      	lsls	r2, r2, #4
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	440b      	add	r3, r1
 800212e:	761a      	strb	r2, [r3, #24]
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	e000e100 	.word	0xe000e100
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002144:	b480      	push	{r7}
 8002146:	b089      	sub	sp, #36	; 0x24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f1c3 0307 	rsb	r3, r3, #7
 800215e:	2b04      	cmp	r3, #4
 8002160:	bf28      	it	cs
 8002162:	2304      	movcs	r3, #4
 8002164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3304      	adds	r3, #4
 800216a:	2b06      	cmp	r3, #6
 800216c:	d902      	bls.n	8002174 <NVIC_EncodePriority+0x30>
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3b03      	subs	r3, #3
 8002172:	e000      	b.n	8002176 <NVIC_EncodePriority+0x32>
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002178:	f04f 32ff 	mov.w	r2, #4294967295
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43da      	mvns	r2, r3
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	401a      	ands	r2, r3
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800218c:	f04f 31ff 	mov.w	r1, #4294967295
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	43d9      	mvns	r1, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800219c:	4313      	orrs	r3, r2
         );
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3724      	adds	r7, #36	; 0x24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021bc:	d301      	bcc.n	80021c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021be:	2301      	movs	r3, #1
 80021c0:	e00f      	b.n	80021e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <SysTick_Config+0x40>)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ca:	210f      	movs	r1, #15
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295
 80021d0:	f7ff ff8e 	bl	80020f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <SysTick_Config+0x40>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021da:	4b04      	ldr	r3, [pc, #16]	; (80021ec <SysTick_Config+0x40>)
 80021dc:	2207      	movs	r2, #7
 80021de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	e000e010 	.word	0xe000e010

080021f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff ff29 	bl	8002050 <__NVIC_SetPriorityGrouping>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002206:	b580      	push	{r7, lr}
 8002208:	b086      	sub	sp, #24
 800220a:	af00      	add	r7, sp, #0
 800220c:	4603      	mov	r3, r0
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002218:	f7ff ff3e 	bl	8002098 <__NVIC_GetPriorityGrouping>
 800221c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	6978      	ldr	r0, [r7, #20]
 8002224:	f7ff ff8e 	bl	8002144 <NVIC_EncodePriority>
 8002228:	4602      	mov	r2, r0
 800222a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ff5d 	bl	80020f0 <__NVIC_SetPriority>
}
 8002236:	bf00      	nop
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	4603      	mov	r3, r0
 8002246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff31 	bl	80020b4 <__NVIC_EnableIRQ>
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff ffa2 	bl	80021ac <SysTick_Config>
 8002268:	4603      	mov	r3, r0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af02      	add	r7, sp, #8
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
 8002280:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_DCMI_Start_DMA+0x20>
 8002290:	2302      	movs	r3, #2
 8002292:	e086      	b.n	80023a2 <HAL_DCMI_Start_DMA+0x12e>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2202      	movs	r2, #2
 80022a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022b2:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0202 	bic.w	r2, r2, #2
 80022c2:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6819      	ldr	r1, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d8:	4a34      	ldr	r2, [pc, #208]	; (80023ac <HAL_DCMI_Start_DMA+0x138>)
 80022da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e0:	4a33      	ldr	r2, [pc, #204]	; (80023b0 <HAL_DCMI_Start_DMA+0x13c>)
 80022e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e8:	2200      	movs	r2, #0
 80022ea:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fe:	d20a      	bcs.n	8002316 <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	3328      	adds	r3, #40	; 0x28
 800230a:	4619      	mov	r1, r3
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	f000 fabe 	bl	8002890 <HAL_DMA_Start_IT>
 8002314:	e038      	b.n	8002388 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231a:	4a24      	ldr	r2, [pc, #144]	; (80023ac <HAL_DCMI_Start_DMA+0x138>)
 800231c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2201      	movs	r2, #1
 8002322:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8002330:	e009      	b.n	8002346 <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002336:	085a      	lsrs	r2, r3, #1
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002340:	005a      	lsls	r2, r3, #1
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234e:	d2f0      	bcs.n	8002332 <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002354:	1e9a      	subs	r2, r3, #2
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	4413      	add	r3, r2
 800236c:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	3328      	adds	r3, #40	; 0x28
 8002378:	4619      	mov	r1, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	f000 fde6 	bl	8002f54 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0201 	orr.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	08002501 	.word	0x08002501
 80023b0:	0800262b 	.word	0x0800262b

080023b4 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d016      	beq.n	80023fc <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2204      	movs	r2, #4
 80023d4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023da:	f043 0202 	orr.w	r2, r3, #2
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2204      	movs	r2, #4
 80023e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ee:	4a2f      	ldr	r2, [pc, #188]	; (80024ac <HAL_DCMI_IRQHandler+0xf8>)
 80023f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 fb12 	bl	8002a20 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d016      	beq.n	8002434 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2202      	movs	r2, #2
 800240c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002412:	f043 0201 	orr.w	r2, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2204      	movs	r2, #4
 800241e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002426:	4a21      	ldr	r2, [pc, #132]	; (80024ac <HAL_DCMI_IRQHandler+0xf8>)
 8002428:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242e:	4618      	mov	r0, r3
 8002430:	f000 faf6 	bl	8002a20 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	2b00      	cmp	r3, #0
 800243c:	d006      	beq.n	800244c <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2210      	movs	r2, #16
 8002444:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f83c 	bl	80024c4 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d006      	beq.n	8002464 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2208      	movs	r2, #8
 800245c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f83a 	bl	80024d8 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d019      	beq.n	80024a2 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b02      	cmp	r3, #2
 800247a:	d107      	bne.n	800248c <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 021e 	bic.w	r2, r2, #30
 800248a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 f825 	bl	80024ec <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 80024a2:	bf00      	nop
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	0800262b 	.word	0x0800262b

080024b0 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002510:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002516:	2b00      	cmp	r3, #0
 8002518:	d043      	beq.n	80025a2 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002526:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b00      	cmp	r3, #0
 8002532:	d118      	bne.n	8002566 <DCMI_DMAXferCplt+0x66>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d015      	beq.n	8002566 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254c:	00da      	lsls	r2, r3, #3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4413      	add	r3, r2
 8002552:	2200      	movs	r2, #0
 8002554:	4619      	mov	r1, r3
 8002556:	f001 fe45 	bl	80041e4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255e:	1e5a      	subs	r2, r3, #1
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	629a      	str	r2, [r3, #40]	; 0x28
 8002564:	e044      	b.n	80025f0 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d13c      	bne.n	80025f0 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	00da      	lsls	r2, r3, #3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4413      	add	r3, r2
 800258e:	2201      	movs	r2, #1
 8002590:	4619      	mov	r1, r3
 8002592:	f001 fe27 	bl	80041e4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259a:	1e5a      	subs	r2, r3, #1
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	629a      	str	r2, [r3, #40]	; 0x28
 80025a0:	e026      	b.n	80025f0 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d006      	beq.n	80025c0 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	e017      	b.n	80025f0 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10f      	bne.n	80025f0 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d4:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025da:	0099      	lsls	r1, r3, #2
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	440a      	add	r2, r1
 80025e6:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d112      	bne.n	8002622 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0201 	orr.w	r2, r2, #1
 800260a:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b02      	cmp	r3, #2
 8002618:	d103      	bne.n	8002622 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 8002622:	bf00      	nop
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b084      	sub	sp, #16
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002636:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263e:	2b02      	cmp	r3, #2
 8002640:	d003      	beq.n	800264a <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f7ff ff30 	bl	80024b0 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e05f      	b.n	800272a <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d109      	bne.n	800268a <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff f996 	bl	80019b0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff f993 	bl	80019b0 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2202      	movs	r2, #2
 800268e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80026a0:	f023 0308 	bic.w	r3, r3, #8
 80026a4:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6819      	ldr	r1, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80026ba:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80026c6:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80026d2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b10      	cmp	r3, #16
 80026e2:	d112      	bne.n	800270a <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	7f1b      	ldrb	r3, [r3, #28]
 80026e8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	7f5b      	ldrb	r3, [r3, #29]
 80026ee:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80026f0:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	7f9b      	ldrb	r3, [r3, #30]
 80026f6:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80026f8:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	7fdb      	ldrb	r3, [r3, #31]
 8002700:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002706:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002708:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 021e 	orr.w	r2, r2, #30
 8002718:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002740:	f7ff fc56 	bl	8001ff0 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e099      	b.n	8002884 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0201 	bic.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002770:	e00f      	b.n	8002792 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002772:	f7ff fc3d 	bl	8001ff0 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b05      	cmp	r3, #5
 800277e:	d908      	bls.n	8002792 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2220      	movs	r2, #32
 8002784:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2203      	movs	r2, #3
 800278a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e078      	b.n	8002884 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1e8      	bne.n	8002772 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	4b38      	ldr	r3, [pc, #224]	; (800288c <HAL_DMA_Init+0x158>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d107      	bne.n	80027fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	4313      	orrs	r3, r2
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f023 0307 	bic.w	r3, r3, #7
 8002812:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	4313      	orrs	r3, r2
 800281c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	2b04      	cmp	r3, #4
 8002824:	d117      	bne.n	8002856 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	4313      	orrs	r3, r2
 800282e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00e      	beq.n	8002856 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 fb0f 	bl	8002e5c <DMA_CheckFifoParam>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2240      	movs	r2, #64	; 0x40
 8002848:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002852:	2301      	movs	r3, #1
 8002854:	e016      	b.n	8002884 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 fac6 	bl	8002df0 <DMA_CalcBaseAndBitshift>
 8002864:	4603      	mov	r3, r0
 8002866:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286c:	223f      	movs	r2, #63	; 0x3f
 800286e:	409a      	lsls	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	f010803f 	.word	0xf010803f

08002890 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
 800289c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <HAL_DMA_Start_IT+0x26>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e040      	b.n	8002938 <HAL_DMA_Start_IT+0xa8>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d12f      	bne.n	800292a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2202      	movs	r2, #2
 80028ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 fa58 	bl	8002d94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e8:	223f      	movs	r2, #63	; 0x3f
 80028ea:	409a      	lsls	r2, r3
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0216 	orr.w	r2, r2, #22
 80028fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	2b00      	cmp	r3, #0
 8002906:	d007      	beq.n	8002918 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0208 	orr.w	r2, r2, #8
 8002916:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0201 	orr.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	e005      	b.n	8002936 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002932:	2302      	movs	r3, #2
 8002934:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002936:	7dfb      	ldrb	r3, [r7, #23]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800294e:	f7ff fb4f 	bl	8001ff0 <HAL_GetTick>
 8002952:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d008      	beq.n	8002972 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2280      	movs	r2, #128	; 0x80
 8002964:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e052      	b.n	8002a18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0216 	bic.w	r2, r2, #22
 8002980:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695a      	ldr	r2, [r3, #20]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002990:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	2b00      	cmp	r3, #0
 8002998:	d103      	bne.n	80029a2 <HAL_DMA_Abort+0x62>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d007      	beq.n	80029b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0208 	bic.w	r2, r2, #8
 80029b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0201 	bic.w	r2, r2, #1
 80029c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029c2:	e013      	b.n	80029ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029c4:	f7ff fb14 	bl	8001ff0 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b05      	cmp	r3, #5
 80029d0:	d90c      	bls.n	80029ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2220      	movs	r2, #32
 80029d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2203      	movs	r2, #3
 80029dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e015      	b.n	8002a18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1e4      	bne.n	80029c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fe:	223f      	movs	r2, #63	; 0x3f
 8002a00:	409a      	lsls	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d004      	beq.n	8002a3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2280      	movs	r2, #128	; 0x80
 8002a38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e00c      	b.n	8002a58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2205      	movs	r2, #5
 8002a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0201 	bic.w	r2, r2, #1
 8002a54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a70:	4b92      	ldr	r3, [pc, #584]	; (8002cbc <HAL_DMA_IRQHandler+0x258>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a92      	ldr	r2, [pc, #584]	; (8002cc0 <HAL_DMA_IRQHandler+0x25c>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	0a9b      	lsrs	r3, r3, #10
 8002a7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8e:	2208      	movs	r2, #8
 8002a90:	409a      	lsls	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d01a      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d013      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0204 	bic.w	r2, r2, #4
 8002ab6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abc:	2208      	movs	r2, #8
 8002abe:	409a      	lsls	r2, r3
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac8:	f043 0201 	orr.w	r2, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4013      	ands	r3, r2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d012      	beq.n	8002b06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00b      	beq.n	8002b06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af2:	2201      	movs	r2, #1
 8002af4:	409a      	lsls	r2, r3
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afe:	f043 0202 	orr.w	r2, r3, #2
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0a:	2204      	movs	r2, #4
 8002b0c:	409a      	lsls	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d012      	beq.n	8002b3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00b      	beq.n	8002b3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b28:	2204      	movs	r2, #4
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b34:	f043 0204 	orr.w	r2, r3, #4
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b40:	2210      	movs	r2, #16
 8002b42:	409a      	lsls	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4013      	ands	r3, r2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d043      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d03c      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5e:	2210      	movs	r2, #16
 8002b60:	409a      	lsls	r2, r3
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d018      	beq.n	8002ba6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d108      	bne.n	8002b94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d024      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	4798      	blx	r3
 8002b92:	e01f      	b.n	8002bd4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d01b      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	4798      	blx	r3
 8002ba4:	e016      	b.n	8002bd4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d107      	bne.n	8002bc4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0208 	bic.w	r2, r2, #8
 8002bc2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd8:	2220      	movs	r2, #32
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 808e 	beq.w	8002d02 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0310 	and.w	r3, r3, #16
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 8086 	beq.w	8002d02 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	409a      	lsls	r2, r3
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b05      	cmp	r3, #5
 8002c0c:	d136      	bne.n	8002c7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0216 	bic.w	r2, r2, #22
 8002c1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695a      	ldr	r2, [r3, #20]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d103      	bne.n	8002c3e <HAL_DMA_IRQHandler+0x1da>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d007      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0208 	bic.w	r2, r2, #8
 8002c4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c52:	223f      	movs	r2, #63	; 0x3f
 8002c54:	409a      	lsls	r2, r3
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d07d      	beq.n	8002d6e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	4798      	blx	r3
        }
        return;
 8002c7a:	e078      	b.n	8002d6e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d01c      	beq.n	8002cc4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d108      	bne.n	8002caa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d030      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	4798      	blx	r3
 8002ca8:	e02b      	b.n	8002d02 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d027      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	4798      	blx	r3
 8002cba:	e022      	b.n	8002d02 <HAL_DMA_IRQHandler+0x29e>
 8002cbc:	200002b8 	.word	0x200002b8
 8002cc0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10f      	bne.n	8002cf2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0210 	bic.w	r2, r2, #16
 8002ce0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d032      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d022      	beq.n	8002d5c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2205      	movs	r2, #5
 8002d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0201 	bic.w	r2, r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	3301      	adds	r3, #1
 8002d32:	60bb      	str	r3, [r7, #8]
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d307      	bcc.n	8002d4a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1f2      	bne.n	8002d2e <HAL_DMA_IRQHandler+0x2ca>
 8002d48:	e000      	b.n	8002d4c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002d4a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	4798      	blx	r3
 8002d6c:	e000      	b.n	8002d70 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002d6e:	bf00      	nop
    }
  }
}
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop

08002d78 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d86:	b2db      	uxtb	r3, r3
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002db0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2b40      	cmp	r3, #64	; 0x40
 8002dc0:	d108      	bne.n	8002dd4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dd2:	e007      	b.n	8002de4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	60da      	str	r2, [r3, #12]
}
 8002de4:	bf00      	nop
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	3b10      	subs	r3, #16
 8002e00:	4a14      	ldr	r2, [pc, #80]	; (8002e54 <DMA_CalcBaseAndBitshift+0x64>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	091b      	lsrs	r3, r3, #4
 8002e08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e0a:	4a13      	ldr	r2, [pc, #76]	; (8002e58 <DMA_CalcBaseAndBitshift+0x68>)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4413      	add	r3, r2
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d909      	bls.n	8002e32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e26:	f023 0303 	bic.w	r3, r3, #3
 8002e2a:	1d1a      	adds	r2, r3, #4
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	659a      	str	r2, [r3, #88]	; 0x58
 8002e30:	e007      	b.n	8002e42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e3a:	f023 0303 	bic.w	r3, r3, #3
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	aaaaaaab 	.word	0xaaaaaaab
 8002e58:	080091d8 	.word	0x080091d8

08002e5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d11f      	bne.n	8002eb6 <DMA_CheckFifoParam+0x5a>
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d856      	bhi.n	8002f2a <DMA_CheckFifoParam+0xce>
 8002e7c:	a201      	add	r2, pc, #4	; (adr r2, 8002e84 <DMA_CheckFifoParam+0x28>)
 8002e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e82:	bf00      	nop
 8002e84:	08002e95 	.word	0x08002e95
 8002e88:	08002ea7 	.word	0x08002ea7
 8002e8c:	08002e95 	.word	0x08002e95
 8002e90:	08002f2b 	.word	0x08002f2b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d046      	beq.n	8002f2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea4:	e043      	b.n	8002f2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eaa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002eae:	d140      	bne.n	8002f32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb4:	e03d      	b.n	8002f32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ebe:	d121      	bne.n	8002f04 <DMA_CheckFifoParam+0xa8>
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	d837      	bhi.n	8002f36 <DMA_CheckFifoParam+0xda>
 8002ec6:	a201      	add	r2, pc, #4	; (adr r2, 8002ecc <DMA_CheckFifoParam+0x70>)
 8002ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ecc:	08002edd 	.word	0x08002edd
 8002ed0:	08002ee3 	.word	0x08002ee3
 8002ed4:	08002edd 	.word	0x08002edd
 8002ed8:	08002ef5 	.word	0x08002ef5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	73fb      	strb	r3, [r7, #15]
      break;
 8002ee0:	e030      	b.n	8002f44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d025      	beq.n	8002f3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef2:	e022      	b.n	8002f3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002efc:	d11f      	bne.n	8002f3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f02:	e01c      	b.n	8002f3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d903      	bls.n	8002f12 <DMA_CheckFifoParam+0xb6>
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d003      	beq.n	8002f18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f10:	e018      	b.n	8002f44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	73fb      	strb	r3, [r7, #15]
      break;
 8002f16:	e015      	b.n	8002f44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00e      	beq.n	8002f42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
      break;
 8002f28:	e00b      	b.n	8002f42 <DMA_CheckFifoParam+0xe6>
      break;
 8002f2a:	bf00      	nop
 8002f2c:	e00a      	b.n	8002f44 <DMA_CheckFifoParam+0xe8>
      break;
 8002f2e:	bf00      	nop
 8002f30:	e008      	b.n	8002f44 <DMA_CheckFifoParam+0xe8>
      break;
 8002f32:	bf00      	nop
 8002f34:	e006      	b.n	8002f44 <DMA_CheckFifoParam+0xe8>
      break;
 8002f36:	bf00      	nop
 8002f38:	e004      	b.n	8002f44 <DMA_CheckFifoParam+0xe8>
      break;
 8002f3a:	bf00      	nop
 8002f3c:	e002      	b.n	8002f44 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f3e:	bf00      	nop
 8002f40:	e000      	b.n	8002f44 <DMA_CheckFifoParam+0xe8>
      break;
 8002f42:	bf00      	nop
    }
  } 
  
  return status; 
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop

08002f54 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
 8002f60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2b80      	cmp	r3, #128	; 0x80
 8002f6c:	d106      	bne.n	8002f7c <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	f001 b913 	b.w	80041a2 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d007      	beq.n	8002f94 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d105      	bne.n	8002fa0 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2240      	movs	r2, #64	; 0x40
 8002f98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	f001 b901 	b.w	80041a2 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d102      	bne.n	8002fb0 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8002faa:	2302      	movs	r3, #2
 8002fac:	f001 b8f9 	b.w	80041a2 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	f041 80e7 	bne.w	8004194 <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002fe2:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	68b9      	ldr	r1, [r7, #8]
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f001 f910 	bl	8004218 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4b99      	ldr	r3, [pc, #612]	; (8003264 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8003000:	429a      	cmp	r2, r3
 8003002:	d960      	bls.n	80030c6 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a97      	ldr	r2, [pc, #604]	; (8003268 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d057      	beq.n	80030be <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a96      	ldr	r2, [pc, #600]	; (800326c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d050      	beq.n	80030ba <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a94      	ldr	r2, [pc, #592]	; (8003270 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d049      	beq.n	80030b6 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a93      	ldr	r2, [pc, #588]	; (8003274 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d042      	beq.n	80030b2 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a91      	ldr	r2, [pc, #580]	; (8003278 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d03a      	beq.n	80030ac <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a90      	ldr	r2, [pc, #576]	; (800327c <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d032      	beq.n	80030a6 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a8e      	ldr	r2, [pc, #568]	; (8003280 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d02a      	beq.n	80030a0 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a8d      	ldr	r2, [pc, #564]	; (8003284 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d022      	beq.n	800309a <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a8b      	ldr	r2, [pc, #556]	; (8003288 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d01a      	beq.n	8003094 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a8a      	ldr	r2, [pc, #552]	; (800328c <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d012      	beq.n	800308e <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a88      	ldr	r2, [pc, #544]	; (8003290 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00a      	beq.n	8003088 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a87      	ldr	r2, [pc, #540]	; (8003294 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d102      	bne.n	8003082 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 800307c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003080:	e01e      	b.n	80030c0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003082:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003086:	e01b      	b.n	80030c0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003088:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800308c:	e018      	b.n	80030c0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800308e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003092:	e015      	b.n	80030c0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003094:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003098:	e012      	b.n	80030c0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800309a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800309e:	e00f      	b.n	80030c0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80030a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030a4:	e00c      	b.n	80030c0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80030a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030aa:	e009      	b.n	80030c0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80030ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030b0:	e006      	b.n	80030c0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80030b2:	2320      	movs	r3, #32
 80030b4:	e004      	b.n	80030c0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80030b6:	2320      	movs	r3, #32
 80030b8:	e002      	b.n	80030c0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80030ba:	2320      	movs	r3, #32
 80030bc:	e000      	b.n	80030c0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80030be:	2320      	movs	r3, #32
 80030c0:	4a75      	ldr	r2, [pc, #468]	; (8003298 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 80030c2:	60d3      	str	r3, [r2, #12]
 80030c4:	e150      	b.n	8003368 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	461a      	mov	r2, r3
 80030cc:	4b73      	ldr	r3, [pc, #460]	; (800329c <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d960      	bls.n	8003194 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a64      	ldr	r2, [pc, #400]	; (8003268 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d057      	beq.n	800318c <HAL_DMAEx_MultiBufferStart_IT+0x238>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a62      	ldr	r2, [pc, #392]	; (800326c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d050      	beq.n	8003188 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a61      	ldr	r2, [pc, #388]	; (8003270 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d049      	beq.n	8003184 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a5f      	ldr	r2, [pc, #380]	; (8003274 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d042      	beq.n	8003180 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a5e      	ldr	r2, [pc, #376]	; (8003278 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d03a      	beq.n	800317a <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a5c      	ldr	r2, [pc, #368]	; (800327c <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d032      	beq.n	8003174 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a5b      	ldr	r2, [pc, #364]	; (8003280 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d02a      	beq.n	800316e <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a59      	ldr	r2, [pc, #356]	; (8003284 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d022      	beq.n	8003168 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a58      	ldr	r2, [pc, #352]	; (8003288 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d01a      	beq.n	8003162 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a56      	ldr	r2, [pc, #344]	; (800328c <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d012      	beq.n	800315c <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a55      	ldr	r2, [pc, #340]	; (8003290 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d00a      	beq.n	8003156 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a53      	ldr	r2, [pc, #332]	; (8003294 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d102      	bne.n	8003150 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 800314a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800314e:	e01e      	b.n	800318e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003150:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003154:	e01b      	b.n	800318e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003156:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800315a:	e018      	b.n	800318e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800315c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003160:	e015      	b.n	800318e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003162:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003166:	e012      	b.n	800318e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003168:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800316c:	e00f      	b.n	800318e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800316e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003172:	e00c      	b.n	800318e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003174:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003178:	e009      	b.n	800318e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800317a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800317e:	e006      	b.n	800318e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003180:	2320      	movs	r3, #32
 8003182:	e004      	b.n	800318e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003184:	2320      	movs	r3, #32
 8003186:	e002      	b.n	800318e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003188:	2320      	movs	r3, #32
 800318a:	e000      	b.n	800318e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800318c:	2320      	movs	r3, #32
 800318e:	4a42      	ldr	r2, [pc, #264]	; (8003298 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8003190:	6093      	str	r3, [r2, #8]
 8003192:	e0e9      	b.n	8003368 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	461a      	mov	r2, r3
 800319a:	4b41      	ldr	r3, [pc, #260]	; (80032a0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 800319c:	429a      	cmp	r2, r3
 800319e:	f240 8083 	bls.w	80032a8 <HAL_DMAEx_MultiBufferStart_IT+0x354>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a30      	ldr	r2, [pc, #192]	; (8003268 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d057      	beq.n	800325c <HAL_DMAEx_MultiBufferStart_IT+0x308>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a2e      	ldr	r2, [pc, #184]	; (800326c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d050      	beq.n	8003258 <HAL_DMAEx_MultiBufferStart_IT+0x304>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a2d      	ldr	r2, [pc, #180]	; (8003270 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d049      	beq.n	8003254 <HAL_DMAEx_MultiBufferStart_IT+0x300>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a2b      	ldr	r2, [pc, #172]	; (8003274 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d042      	beq.n	8003250 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a2a      	ldr	r2, [pc, #168]	; (8003278 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d03a      	beq.n	800324a <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a28      	ldr	r2, [pc, #160]	; (800327c <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d032      	beq.n	8003244 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a27      	ldr	r2, [pc, #156]	; (8003280 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d02a      	beq.n	800323e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a25      	ldr	r2, [pc, #148]	; (8003284 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d022      	beq.n	8003238 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a24      	ldr	r2, [pc, #144]	; (8003288 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d01a      	beq.n	8003232 <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a22      	ldr	r2, [pc, #136]	; (800328c <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d012      	beq.n	800322c <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a21      	ldr	r2, [pc, #132]	; (8003290 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d00a      	beq.n	8003226 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a1f      	ldr	r2, [pc, #124]	; (8003294 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d102      	bne.n	8003220 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 800321a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800321e:	e01e      	b.n	800325e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003220:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003224:	e01b      	b.n	800325e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003226:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800322a:	e018      	b.n	800325e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800322c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003230:	e015      	b.n	800325e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003232:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003236:	e012      	b.n	800325e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003238:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800323c:	e00f      	b.n	800325e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800323e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003242:	e00c      	b.n	800325e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003244:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003248:	e009      	b.n	800325e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800324a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800324e:	e006      	b.n	800325e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003250:	2320      	movs	r3, #32
 8003252:	e004      	b.n	800325e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003254:	2320      	movs	r3, #32
 8003256:	e002      	b.n	800325e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003258:	2320      	movs	r3, #32
 800325a:	e000      	b.n	800325e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800325c:	2320      	movs	r3, #32
 800325e:	4a11      	ldr	r2, [pc, #68]	; (80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 8003260:	60d3      	str	r3, [r2, #12]
 8003262:	e081      	b.n	8003368 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8003264:	40026458 	.word	0x40026458
 8003268:	40026010 	.word	0x40026010
 800326c:	40026410 	.word	0x40026410
 8003270:	40026070 	.word	0x40026070
 8003274:	40026470 	.word	0x40026470
 8003278:	40026028 	.word	0x40026028
 800327c:	40026428 	.word	0x40026428
 8003280:	40026088 	.word	0x40026088
 8003284:	40026488 	.word	0x40026488
 8003288:	40026040 	.word	0x40026040
 800328c:	40026440 	.word	0x40026440
 8003290:	400260a0 	.word	0x400260a0
 8003294:	400264a0 	.word	0x400264a0
 8003298:	40026400 	.word	0x40026400
 800329c:	400260b8 	.word	0x400260b8
 80032a0:	40026058 	.word	0x40026058
 80032a4:	40026000 	.word	0x40026000
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a96      	ldr	r2, [pc, #600]	; (8003508 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d057      	beq.n	8003362 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a95      	ldr	r2, [pc, #596]	; (800350c <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d050      	beq.n	800335e <HAL_DMAEx_MultiBufferStart_IT+0x40a>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a93      	ldr	r2, [pc, #588]	; (8003510 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d049      	beq.n	800335a <HAL_DMAEx_MultiBufferStart_IT+0x406>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a92      	ldr	r2, [pc, #584]	; (8003514 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d042      	beq.n	8003356 <HAL_DMAEx_MultiBufferStart_IT+0x402>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a90      	ldr	r2, [pc, #576]	; (8003518 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d03a      	beq.n	8003350 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a8f      	ldr	r2, [pc, #572]	; (800351c <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d032      	beq.n	800334a <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a8d      	ldr	r2, [pc, #564]	; (8003520 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d02a      	beq.n	8003344 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a8c      	ldr	r2, [pc, #560]	; (8003524 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d022      	beq.n	800333e <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a8a      	ldr	r2, [pc, #552]	; (8003528 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d01a      	beq.n	8003338 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a89      	ldr	r2, [pc, #548]	; (800352c <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d012      	beq.n	8003332 <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a87      	ldr	r2, [pc, #540]	; (8003530 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00a      	beq.n	800332c <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a86      	ldr	r2, [pc, #536]	; (8003534 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d102      	bne.n	8003326 <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 8003320:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003324:	e01e      	b.n	8003364 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003326:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800332a:	e01b      	b.n	8003364 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800332c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003330:	e018      	b.n	8003364 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003332:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003336:	e015      	b.n	8003364 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003338:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800333c:	e012      	b.n	8003364 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800333e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003342:	e00f      	b.n	8003364 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003344:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003348:	e00c      	b.n	8003364 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800334a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800334e:	e009      	b.n	8003364 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003350:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003354:	e006      	b.n	8003364 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003356:	2320      	movs	r3, #32
 8003358:	e004      	b.n	8003364 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800335a:	2320      	movs	r3, #32
 800335c:	e002      	b.n	8003364 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800335e:	2320      	movs	r3, #32
 8003360:	e000      	b.n	8003364 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003362:	2320      	movs	r3, #32
 8003364:	4a74      	ldr	r2, [pc, #464]	; (8003538 <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 8003366:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	461a      	mov	r2, r3
 800336e:	4b73      	ldr	r3, [pc, #460]	; (800353c <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 8003370:	429a      	cmp	r2, r3
 8003372:	d960      	bls.n	8003436 <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a63      	ldr	r2, [pc, #396]	; (8003508 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d057      	beq.n	800342e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a62      	ldr	r2, [pc, #392]	; (800350c <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d050      	beq.n	800342a <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a60      	ldr	r2, [pc, #384]	; (8003510 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d049      	beq.n	8003426 <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a5f      	ldr	r2, [pc, #380]	; (8003514 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d042      	beq.n	8003422 <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a5d      	ldr	r2, [pc, #372]	; (8003518 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d03a      	beq.n	800341c <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a5c      	ldr	r2, [pc, #368]	; (800351c <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d032      	beq.n	8003416 <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a5a      	ldr	r2, [pc, #360]	; (8003520 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d02a      	beq.n	8003410 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a59      	ldr	r2, [pc, #356]	; (8003524 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d022      	beq.n	800340a <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a57      	ldr	r2, [pc, #348]	; (8003528 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d01a      	beq.n	8003404 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a56      	ldr	r2, [pc, #344]	; (800352c <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d012      	beq.n	80033fe <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a54      	ldr	r2, [pc, #336]	; (8003530 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00a      	beq.n	80033f8 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a53      	ldr	r2, [pc, #332]	; (8003534 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d102      	bne.n	80033f2 <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 80033ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033f0:	e01e      	b.n	8003430 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80033f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80033f6:	e01b      	b.n	8003430 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80033f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033fc:	e018      	b.n	8003430 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80033fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003402:	e015      	b.n	8003430 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003404:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003408:	e012      	b.n	8003430 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800340a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800340e:	e00f      	b.n	8003430 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003414:	e00c      	b.n	8003430 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800341a:	e009      	b.n	8003430 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800341c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003420:	e006      	b.n	8003430 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003422:	2310      	movs	r3, #16
 8003424:	e004      	b.n	8003430 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003426:	2310      	movs	r3, #16
 8003428:	e002      	b.n	8003430 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800342a:	2310      	movs	r3, #16
 800342c:	e000      	b.n	8003430 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800342e:	2310      	movs	r3, #16
 8003430:	4a43      	ldr	r2, [pc, #268]	; (8003540 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8003432:	60d3      	str	r3, [r2, #12]
 8003434:	e14f      	b.n	80036d6 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	461a      	mov	r2, r3
 800343c:	4b41      	ldr	r3, [pc, #260]	; (8003544 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
 800343e:	429a      	cmp	r2, r3
 8003440:	f240 8082 	bls.w	8003548 <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a2f      	ldr	r2, [pc, #188]	; (8003508 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d057      	beq.n	80034fe <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a2e      	ldr	r2, [pc, #184]	; (800350c <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d050      	beq.n	80034fa <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a2c      	ldr	r2, [pc, #176]	; (8003510 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d049      	beq.n	80034f6 <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a2b      	ldr	r2, [pc, #172]	; (8003514 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d042      	beq.n	80034f2 <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a29      	ldr	r2, [pc, #164]	; (8003518 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d03a      	beq.n	80034ec <HAL_DMAEx_MultiBufferStart_IT+0x598>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a28      	ldr	r2, [pc, #160]	; (800351c <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d032      	beq.n	80034e6 <HAL_DMAEx_MultiBufferStart_IT+0x592>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a26      	ldr	r2, [pc, #152]	; (8003520 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d02a      	beq.n	80034e0 <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a25      	ldr	r2, [pc, #148]	; (8003524 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d022      	beq.n	80034da <HAL_DMAEx_MultiBufferStart_IT+0x586>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a23      	ldr	r2, [pc, #140]	; (8003528 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d01a      	beq.n	80034d4 <HAL_DMAEx_MultiBufferStart_IT+0x580>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a22      	ldr	r2, [pc, #136]	; (800352c <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d012      	beq.n	80034ce <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a20      	ldr	r2, [pc, #128]	; (8003530 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00a      	beq.n	80034c8 <HAL_DMAEx_MultiBufferStart_IT+0x574>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a1f      	ldr	r2, [pc, #124]	; (8003534 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d102      	bne.n	80034c2 <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 80034bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034c0:	e01e      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80034c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80034c6:	e01b      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80034c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034cc:	e018      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80034ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034d2:	e015      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80034d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034d8:	e012      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80034da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034de:	e00f      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80034e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034e4:	e00c      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80034e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034ea:	e009      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80034ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034f0:	e006      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80034f2:	2310      	movs	r3, #16
 80034f4:	e004      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80034f6:	2310      	movs	r3, #16
 80034f8:	e002      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80034fa:	2310      	movs	r3, #16
 80034fc:	e000      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80034fe:	2310      	movs	r3, #16
 8003500:	4a0f      	ldr	r2, [pc, #60]	; (8003540 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8003502:	6093      	str	r3, [r2, #8]
 8003504:	e0e7      	b.n	80036d6 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8003506:	bf00      	nop
 8003508:	40026010 	.word	0x40026010
 800350c:	40026410 	.word	0x40026410
 8003510:	40026070 	.word	0x40026070
 8003514:	40026470 	.word	0x40026470
 8003518:	40026028 	.word	0x40026028
 800351c:	40026428 	.word	0x40026428
 8003520:	40026088 	.word	0x40026088
 8003524:	40026488 	.word	0x40026488
 8003528:	40026040 	.word	0x40026040
 800352c:	40026440 	.word	0x40026440
 8003530:	400260a0 	.word	0x400260a0
 8003534:	400264a0 	.word	0x400264a0
 8003538:	40026000 	.word	0x40026000
 800353c:	40026458 	.word	0x40026458
 8003540:	40026400 	.word	0x40026400
 8003544:	400260b8 	.word	0x400260b8
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	461a      	mov	r2, r3
 800354e:	4b96      	ldr	r3, [pc, #600]	; (80037a8 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003550:	429a      	cmp	r2, r3
 8003552:	d960      	bls.n	8003616 <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a94      	ldr	r2, [pc, #592]	; (80037ac <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d057      	beq.n	800360e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a93      	ldr	r2, [pc, #588]	; (80037b0 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d050      	beq.n	800360a <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a91      	ldr	r2, [pc, #580]	; (80037b4 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d049      	beq.n	8003606 <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a90      	ldr	r2, [pc, #576]	; (80037b8 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d042      	beq.n	8003602 <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a8e      	ldr	r2, [pc, #568]	; (80037bc <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d03a      	beq.n	80035fc <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a8d      	ldr	r2, [pc, #564]	; (80037c0 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d032      	beq.n	80035f6 <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a8b      	ldr	r2, [pc, #556]	; (80037c4 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d02a      	beq.n	80035f0 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a8a      	ldr	r2, [pc, #552]	; (80037c8 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d022      	beq.n	80035ea <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a88      	ldr	r2, [pc, #544]	; (80037cc <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d01a      	beq.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0x690>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a87      	ldr	r2, [pc, #540]	; (80037d0 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d012      	beq.n	80035de <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a85      	ldr	r2, [pc, #532]	; (80037d4 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d00a      	beq.n	80035d8 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a84      	ldr	r2, [pc, #528]	; (80037d8 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d102      	bne.n	80035d2 <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 80035cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035d0:	e01e      	b.n	8003610 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80035d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80035d6:	e01b      	b.n	8003610 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80035d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035dc:	e018      	b.n	8003610 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80035de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035e2:	e015      	b.n	8003610 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80035e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035e8:	e012      	b.n	8003610 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80035ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035ee:	e00f      	b.n	8003610 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80035f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035f4:	e00c      	b.n	8003610 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80035f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035fa:	e009      	b.n	8003610 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80035fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003600:	e006      	b.n	8003610 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003602:	2310      	movs	r3, #16
 8003604:	e004      	b.n	8003610 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003606:	2310      	movs	r3, #16
 8003608:	e002      	b.n	8003610 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800360a:	2310      	movs	r3, #16
 800360c:	e000      	b.n	8003610 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800360e:	2310      	movs	r3, #16
 8003610:	4a72      	ldr	r2, [pc, #456]	; (80037dc <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8003612:	60d3      	str	r3, [r2, #12]
 8003614:	e05f      	b.n	80036d6 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a64      	ldr	r2, [pc, #400]	; (80037ac <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d057      	beq.n	80036d0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a62      	ldr	r2, [pc, #392]	; (80037b0 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d050      	beq.n	80036cc <HAL_DMAEx_MultiBufferStart_IT+0x778>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a61      	ldr	r2, [pc, #388]	; (80037b4 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d049      	beq.n	80036c8 <HAL_DMAEx_MultiBufferStart_IT+0x774>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a5f      	ldr	r2, [pc, #380]	; (80037b8 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d042      	beq.n	80036c4 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a5e      	ldr	r2, [pc, #376]	; (80037bc <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d03a      	beq.n	80036be <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a5c      	ldr	r2, [pc, #368]	; (80037c0 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d032      	beq.n	80036b8 <HAL_DMAEx_MultiBufferStart_IT+0x764>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a5b      	ldr	r2, [pc, #364]	; (80037c4 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d02a      	beq.n	80036b2 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a59      	ldr	r2, [pc, #356]	; (80037c8 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d022      	beq.n	80036ac <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a58      	ldr	r2, [pc, #352]	; (80037cc <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d01a      	beq.n	80036a6 <HAL_DMAEx_MultiBufferStart_IT+0x752>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a56      	ldr	r2, [pc, #344]	; (80037d0 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d012      	beq.n	80036a0 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a55      	ldr	r2, [pc, #340]	; (80037d4 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00a      	beq.n	800369a <HAL_DMAEx_MultiBufferStart_IT+0x746>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a53      	ldr	r2, [pc, #332]	; (80037d8 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d102      	bne.n	8003694 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 800368e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003692:	e01e      	b.n	80036d2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003694:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003698:	e01b      	b.n	80036d2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800369a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800369e:	e018      	b.n	80036d2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80036a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80036a4:	e015      	b.n	80036d2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80036a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80036aa:	e012      	b.n	80036d2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80036ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036b0:	e00f      	b.n	80036d2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80036b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036b6:	e00c      	b.n	80036d2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80036b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036bc:	e009      	b.n	80036d2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80036be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036c2:	e006      	b.n	80036d2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80036c4:	2310      	movs	r3, #16
 80036c6:	e004      	b.n	80036d2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80036c8:	2310      	movs	r3, #16
 80036ca:	e002      	b.n	80036d2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80036cc:	2310      	movs	r3, #16
 80036ce:	e000      	b.n	80036d2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80036d0:	2310      	movs	r3, #16
 80036d2:	4a42      	ldr	r2, [pc, #264]	; (80037dc <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 80036d4:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	461a      	mov	r2, r3
 80036dc:	4b40      	ldr	r3, [pc, #256]	; (80037e0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 80036de:	429a      	cmp	r2, r3
 80036e0:	f240 8082 	bls.w	80037e8 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a30      	ldr	r2, [pc, #192]	; (80037ac <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d057      	beq.n	800379e <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a2f      	ldr	r2, [pc, #188]	; (80037b0 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d050      	beq.n	800379a <HAL_DMAEx_MultiBufferStart_IT+0x846>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a2d      	ldr	r2, [pc, #180]	; (80037b4 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d049      	beq.n	8003796 <HAL_DMAEx_MultiBufferStart_IT+0x842>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a2c      	ldr	r2, [pc, #176]	; (80037b8 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d042      	beq.n	8003792 <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a2a      	ldr	r2, [pc, #168]	; (80037bc <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d03a      	beq.n	800378c <HAL_DMAEx_MultiBufferStart_IT+0x838>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a29      	ldr	r2, [pc, #164]	; (80037c0 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d032      	beq.n	8003786 <HAL_DMAEx_MultiBufferStart_IT+0x832>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a27      	ldr	r2, [pc, #156]	; (80037c4 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d02a      	beq.n	8003780 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a26      	ldr	r2, [pc, #152]	; (80037c8 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d022      	beq.n	800377a <HAL_DMAEx_MultiBufferStart_IT+0x826>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a24      	ldr	r2, [pc, #144]	; (80037cc <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d01a      	beq.n	8003774 <HAL_DMAEx_MultiBufferStart_IT+0x820>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a23      	ldr	r2, [pc, #140]	; (80037d0 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d012      	beq.n	800376e <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a21      	ldr	r2, [pc, #132]	; (80037d4 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d00a      	beq.n	8003768 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a20      	ldr	r2, [pc, #128]	; (80037d8 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d102      	bne.n	8003762 <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 800375c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003760:	e01e      	b.n	80037a0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003762:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003766:	e01b      	b.n	80037a0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003768:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800376c:	e018      	b.n	80037a0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800376e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003772:	e015      	b.n	80037a0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003774:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003778:	e012      	b.n	80037a0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800377a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800377e:	e00f      	b.n	80037a0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003780:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003784:	e00c      	b.n	80037a0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003786:	f44f 7300 	mov.w	r3, #512	; 0x200
 800378a:	e009      	b.n	80037a0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800378c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003790:	e006      	b.n	80037a0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003792:	2308      	movs	r3, #8
 8003794:	e004      	b.n	80037a0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003796:	2308      	movs	r3, #8
 8003798:	e002      	b.n	80037a0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800379a:	2308      	movs	r3, #8
 800379c:	e000      	b.n	80037a0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800379e:	2308      	movs	r3, #8
 80037a0:	4a10      	ldr	r2, [pc, #64]	; (80037e4 <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 80037a2:	60d3      	str	r3, [r2, #12]
 80037a4:	e16f      	b.n	8003a86 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 80037a6:	bf00      	nop
 80037a8:	40026058 	.word	0x40026058
 80037ac:	40026010 	.word	0x40026010
 80037b0:	40026410 	.word	0x40026410
 80037b4:	40026070 	.word	0x40026070
 80037b8:	40026470 	.word	0x40026470
 80037bc:	40026028 	.word	0x40026028
 80037c0:	40026428 	.word	0x40026428
 80037c4:	40026088 	.word	0x40026088
 80037c8:	40026488 	.word	0x40026488
 80037cc:	40026040 	.word	0x40026040
 80037d0:	40026440 	.word	0x40026440
 80037d4:	400260a0 	.word	0x400260a0
 80037d8:	400264a0 	.word	0x400264a0
 80037dc:	40026000 	.word	0x40026000
 80037e0:	40026458 	.word	0x40026458
 80037e4:	40026400 	.word	0x40026400
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	461a      	mov	r2, r3
 80037ee:	4b94      	ldr	r3, [pc, #592]	; (8003a40 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d960      	bls.n	80038b6 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a92      	ldr	r2, [pc, #584]	; (8003a44 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d057      	beq.n	80038ae <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a91      	ldr	r2, [pc, #580]	; (8003a48 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d050      	beq.n	80038aa <HAL_DMAEx_MultiBufferStart_IT+0x956>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a8f      	ldr	r2, [pc, #572]	; (8003a4c <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d049      	beq.n	80038a6 <HAL_DMAEx_MultiBufferStart_IT+0x952>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a8e      	ldr	r2, [pc, #568]	; (8003a50 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d042      	beq.n	80038a2 <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a8c      	ldr	r2, [pc, #560]	; (8003a54 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d03a      	beq.n	800389c <HAL_DMAEx_MultiBufferStart_IT+0x948>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a8b      	ldr	r2, [pc, #556]	; (8003a58 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d032      	beq.n	8003896 <HAL_DMAEx_MultiBufferStart_IT+0x942>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a89      	ldr	r2, [pc, #548]	; (8003a5c <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d02a      	beq.n	8003890 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a88      	ldr	r2, [pc, #544]	; (8003a60 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d022      	beq.n	800388a <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a86      	ldr	r2, [pc, #536]	; (8003a64 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d01a      	beq.n	8003884 <HAL_DMAEx_MultiBufferStart_IT+0x930>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a85      	ldr	r2, [pc, #532]	; (8003a68 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d012      	beq.n	800387e <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a83      	ldr	r2, [pc, #524]	; (8003a6c <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00a      	beq.n	8003878 <HAL_DMAEx_MultiBufferStart_IT+0x924>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a82      	ldr	r2, [pc, #520]	; (8003a70 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d102      	bne.n	8003872 <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 800386c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003870:	e01e      	b.n	80038b0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003872:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003876:	e01b      	b.n	80038b0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003878:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800387c:	e018      	b.n	80038b0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800387e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003882:	e015      	b.n	80038b0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003884:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003888:	e012      	b.n	80038b0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800388a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800388e:	e00f      	b.n	80038b0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003890:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003894:	e00c      	b.n	80038b0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800389a:	e009      	b.n	80038b0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800389c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038a0:	e006      	b.n	80038b0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80038a2:	2308      	movs	r3, #8
 80038a4:	e004      	b.n	80038b0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80038a6:	2308      	movs	r3, #8
 80038a8:	e002      	b.n	80038b0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80038aa:	2308      	movs	r3, #8
 80038ac:	e000      	b.n	80038b0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80038ae:	2308      	movs	r3, #8
 80038b0:	4a70      	ldr	r2, [pc, #448]	; (8003a74 <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 80038b2:	6093      	str	r3, [r2, #8]
 80038b4:	e0e7      	b.n	8003a86 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	4b6e      	ldr	r3, [pc, #440]	; (8003a78 <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 80038be:	429a      	cmp	r2, r3
 80038c0:	d960      	bls.n	8003984 <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a5f      	ldr	r2, [pc, #380]	; (8003a44 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d057      	beq.n	800397c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a5d      	ldr	r2, [pc, #372]	; (8003a48 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d050      	beq.n	8003978 <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a5c      	ldr	r2, [pc, #368]	; (8003a4c <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d049      	beq.n	8003974 <HAL_DMAEx_MultiBufferStart_IT+0xa20>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a5a      	ldr	r2, [pc, #360]	; (8003a50 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d042      	beq.n	8003970 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a59      	ldr	r2, [pc, #356]	; (8003a54 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d03a      	beq.n	800396a <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a57      	ldr	r2, [pc, #348]	; (8003a58 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d032      	beq.n	8003964 <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a56      	ldr	r2, [pc, #344]	; (8003a5c <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d02a      	beq.n	800395e <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a54      	ldr	r2, [pc, #336]	; (8003a60 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d022      	beq.n	8003958 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a53      	ldr	r2, [pc, #332]	; (8003a64 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d01a      	beq.n	8003952 <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a51      	ldr	r2, [pc, #324]	; (8003a68 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d012      	beq.n	800394c <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a50      	ldr	r2, [pc, #320]	; (8003a6c <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d00a      	beq.n	8003946 <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a4e      	ldr	r2, [pc, #312]	; (8003a70 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d102      	bne.n	8003940 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 800393a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800393e:	e01e      	b.n	800397e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003940:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003944:	e01b      	b.n	800397e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003946:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800394a:	e018      	b.n	800397e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800394c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003950:	e015      	b.n	800397e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003952:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003956:	e012      	b.n	800397e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003958:	f44f 7300 	mov.w	r3, #512	; 0x200
 800395c:	e00f      	b.n	800397e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800395e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003962:	e00c      	b.n	800397e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003968:	e009      	b.n	800397e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800396a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800396e:	e006      	b.n	800397e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003970:	2308      	movs	r3, #8
 8003972:	e004      	b.n	800397e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003974:	2308      	movs	r3, #8
 8003976:	e002      	b.n	800397e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003978:	2308      	movs	r3, #8
 800397a:	e000      	b.n	800397e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800397c:	2308      	movs	r3, #8
 800397e:	4a3f      	ldr	r2, [pc, #252]	; (8003a7c <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 8003980:	60d3      	str	r3, [r2, #12]
 8003982:	e080      	b.n	8003a86 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a2e      	ldr	r2, [pc, #184]	; (8003a44 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d078      	beq.n	8003a80 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a2d      	ldr	r2, [pc, #180]	; (8003a48 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d050      	beq.n	8003a3a <HAL_DMAEx_MultiBufferStart_IT+0xae6>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a2b      	ldr	r2, [pc, #172]	; (8003a4c <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d049      	beq.n	8003a36 <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a2a      	ldr	r2, [pc, #168]	; (8003a50 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d042      	beq.n	8003a32 <HAL_DMAEx_MultiBufferStart_IT+0xade>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a28      	ldr	r2, [pc, #160]	; (8003a54 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d03a      	beq.n	8003a2c <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a27      	ldr	r2, [pc, #156]	; (8003a58 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d032      	beq.n	8003a26 <HAL_DMAEx_MultiBufferStart_IT+0xad2>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a25      	ldr	r2, [pc, #148]	; (8003a5c <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d02a      	beq.n	8003a20 <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a24      	ldr	r2, [pc, #144]	; (8003a60 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d022      	beq.n	8003a1a <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a22      	ldr	r2, [pc, #136]	; (8003a64 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d01a      	beq.n	8003a14 <HAL_DMAEx_MultiBufferStart_IT+0xac0>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a21      	ldr	r2, [pc, #132]	; (8003a68 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d012      	beq.n	8003a0e <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a1f      	ldr	r2, [pc, #124]	; (8003a6c <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00a      	beq.n	8003a08 <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a1e      	ldr	r2, [pc, #120]	; (8003a70 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d102      	bne.n	8003a02 <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 80039fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003a00:	e03f      	b.n	8003a82 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003a02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a06:	e03c      	b.n	8003a82 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003a08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003a0c:	e039      	b.n	8003a82 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003a0e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003a12:	e036      	b.n	8003a82 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003a14:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003a18:	e033      	b.n	8003a82 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003a1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a1e:	e030      	b.n	8003a82 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003a20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a24:	e02d      	b.n	8003a82 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003a26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a2a:	e02a      	b.n	8003a82 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003a2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a30:	e027      	b.n	8003a82 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003a32:	2308      	movs	r3, #8
 8003a34:	e025      	b.n	8003a82 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003a36:	2308      	movs	r3, #8
 8003a38:	e023      	b.n	8003a82 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003a3a:	2308      	movs	r3, #8
 8003a3c:	e021      	b.n	8003a82 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003a3e:	bf00      	nop
 8003a40:	400260b8 	.word	0x400260b8
 8003a44:	40026010 	.word	0x40026010
 8003a48:	40026410 	.word	0x40026410
 8003a4c:	40026070 	.word	0x40026070
 8003a50:	40026470 	.word	0x40026470
 8003a54:	40026028 	.word	0x40026028
 8003a58:	40026428 	.word	0x40026428
 8003a5c:	40026088 	.word	0x40026088
 8003a60:	40026488 	.word	0x40026488
 8003a64:	40026040 	.word	0x40026040
 8003a68:	40026440 	.word	0x40026440
 8003a6c:	400260a0 	.word	0x400260a0
 8003a70:	400264a0 	.word	0x400264a0
 8003a74:	40026400 	.word	0x40026400
 8003a78:	40026058 	.word	0x40026058
 8003a7c:	40026000 	.word	0x40026000
 8003a80:	2308      	movs	r3, #8
 8003a82:	4a9a      	ldr	r2, [pc, #616]	; (8003cec <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8003a84:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	4b98      	ldr	r3, [pc, #608]	; (8003cf0 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d960      	bls.n	8003b54 <HAL_DMAEx_MultiBufferStart_IT+0xc00>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a97      	ldr	r2, [pc, #604]	; (8003cf4 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d057      	beq.n	8003b4c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a95      	ldr	r2, [pc, #596]	; (8003cf8 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d050      	beq.n	8003b48 <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a94      	ldr	r2, [pc, #592]	; (8003cfc <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d049      	beq.n	8003b44 <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a92      	ldr	r2, [pc, #584]	; (8003d00 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d042      	beq.n	8003b40 <HAL_DMAEx_MultiBufferStart_IT+0xbec>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a91      	ldr	r2, [pc, #580]	; (8003d04 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d03a      	beq.n	8003b3a <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a8f      	ldr	r2, [pc, #572]	; (8003d08 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d032      	beq.n	8003b34 <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a8e      	ldr	r2, [pc, #568]	; (8003d0c <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d02a      	beq.n	8003b2e <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a8c      	ldr	r2, [pc, #560]	; (8003d10 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d022      	beq.n	8003b28 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a8b      	ldr	r2, [pc, #556]	; (8003d14 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d01a      	beq.n	8003b22 <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a89      	ldr	r2, [pc, #548]	; (8003d18 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d012      	beq.n	8003b1c <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a88      	ldr	r2, [pc, #544]	; (8003d1c <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00a      	beq.n	8003b16 <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a86      	ldr	r2, [pc, #536]	; (8003d20 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d102      	bne.n	8003b10 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 8003b0a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b0e:	e01e      	b.n	8003b4e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b14:	e01b      	b.n	8003b4e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003b16:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b1a:	e018      	b.n	8003b4e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003b1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b20:	e015      	b.n	8003b4e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003b22:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b26:	e012      	b.n	8003b4e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003b28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b2c:	e00f      	b.n	8003b4e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b32:	e00c      	b.n	8003b4e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003b34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b38:	e009      	b.n	8003b4e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003b3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b3e:	e006      	b.n	8003b4e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003b40:	2304      	movs	r3, #4
 8003b42:	e004      	b.n	8003b4e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003b44:	2304      	movs	r3, #4
 8003b46:	e002      	b.n	8003b4e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003b48:	2304      	movs	r3, #4
 8003b4a:	e000      	b.n	8003b4e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003b4c:	2304      	movs	r3, #4
 8003b4e:	4a75      	ldr	r2, [pc, #468]	; (8003d24 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8003b50:	60d3      	str	r3, [r2, #12]
 8003b52:	e151      	b.n	8003df8 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4b73      	ldr	r3, [pc, #460]	; (8003d28 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d960      	bls.n	8003c22 <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a63      	ldr	r2, [pc, #396]	; (8003cf4 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d057      	beq.n	8003c1a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a62      	ldr	r2, [pc, #392]	; (8003cf8 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d050      	beq.n	8003c16 <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a60      	ldr	r2, [pc, #384]	; (8003cfc <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d049      	beq.n	8003c12 <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a5f      	ldr	r2, [pc, #380]	; (8003d00 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d042      	beq.n	8003c0e <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a5d      	ldr	r2, [pc, #372]	; (8003d04 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d03a      	beq.n	8003c08 <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a5c      	ldr	r2, [pc, #368]	; (8003d08 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d032      	beq.n	8003c02 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a5a      	ldr	r2, [pc, #360]	; (8003d0c <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d02a      	beq.n	8003bfc <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a59      	ldr	r2, [pc, #356]	; (8003d10 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d022      	beq.n	8003bf6 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a57      	ldr	r2, [pc, #348]	; (8003d14 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d01a      	beq.n	8003bf0 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a56      	ldr	r2, [pc, #344]	; (8003d18 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d012      	beq.n	8003bea <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a54      	ldr	r2, [pc, #336]	; (8003d1c <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d00a      	beq.n	8003be4 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a53      	ldr	r2, [pc, #332]	; (8003d20 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d102      	bne.n	8003bde <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 8003bd8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003bdc:	e01e      	b.n	8003c1c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003bde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003be2:	e01b      	b.n	8003c1c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003be4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003be8:	e018      	b.n	8003c1c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003bea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003bee:	e015      	b.n	8003c1c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003bf0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003bf4:	e012      	b.n	8003c1c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003bf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bfa:	e00f      	b.n	8003c1c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003bfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c00:	e00c      	b.n	8003c1c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003c02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c06:	e009      	b.n	8003c1c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c0c:	e006      	b.n	8003c1c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003c0e:	2304      	movs	r3, #4
 8003c10:	e004      	b.n	8003c1c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003c12:	2304      	movs	r3, #4
 8003c14:	e002      	b.n	8003c1c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003c16:	2304      	movs	r3, #4
 8003c18:	e000      	b.n	8003c1c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003c1a:	2304      	movs	r3, #4
 8003c1c:	4a41      	ldr	r2, [pc, #260]	; (8003d24 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8003c1e:	6093      	str	r3, [r2, #8]
 8003c20:	e0ea      	b.n	8003df8 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	4b40      	ldr	r3, [pc, #256]	; (8003d2c <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	f240 8084 	bls.w	8003d38 <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a2f      	ldr	r2, [pc, #188]	; (8003cf4 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d07a      	beq.n	8003d30 <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a2e      	ldr	r2, [pc, #184]	; (8003cf8 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d050      	beq.n	8003ce6 <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a2c      	ldr	r2, [pc, #176]	; (8003cfc <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d049      	beq.n	8003ce2 <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a2b      	ldr	r2, [pc, #172]	; (8003d00 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d042      	beq.n	8003cde <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a29      	ldr	r2, [pc, #164]	; (8003d04 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d03a      	beq.n	8003cd8 <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a28      	ldr	r2, [pc, #160]	; (8003d08 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d032      	beq.n	8003cd2 <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a26      	ldr	r2, [pc, #152]	; (8003d0c <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d02a      	beq.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a25      	ldr	r2, [pc, #148]	; (8003d10 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d022      	beq.n	8003cc6 <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a23      	ldr	r2, [pc, #140]	; (8003d14 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d01a      	beq.n	8003cc0 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a22      	ldr	r2, [pc, #136]	; (8003d18 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d012      	beq.n	8003cba <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a20      	ldr	r2, [pc, #128]	; (8003d1c <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00a      	beq.n	8003cb4 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a1f      	ldr	r2, [pc, #124]	; (8003d20 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d102      	bne.n	8003cae <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 8003ca8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003cac:	e041      	b.n	8003d32 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003cae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cb2:	e03e      	b.n	8003d32 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003cb4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003cb8:	e03b      	b.n	8003d32 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003cba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003cbe:	e038      	b.n	8003d32 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003cc0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003cc4:	e035      	b.n	8003d32 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cca:	e032      	b.n	8003d32 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003ccc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cd0:	e02f      	b.n	8003d32 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003cd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cd6:	e02c      	b.n	8003d32 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003cd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cdc:	e029      	b.n	8003d32 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003cde:	2304      	movs	r3, #4
 8003ce0:	e027      	b.n	8003d32 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003ce2:	2304      	movs	r3, #4
 8003ce4:	e025      	b.n	8003d32 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003ce6:	2304      	movs	r3, #4
 8003ce8:	e023      	b.n	8003d32 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003cea:	bf00      	nop
 8003cec:	40026000 	.word	0x40026000
 8003cf0:	40026458 	.word	0x40026458
 8003cf4:	40026010 	.word	0x40026010
 8003cf8:	40026410 	.word	0x40026410
 8003cfc:	40026070 	.word	0x40026070
 8003d00:	40026470 	.word	0x40026470
 8003d04:	40026028 	.word	0x40026028
 8003d08:	40026428 	.word	0x40026428
 8003d0c:	40026088 	.word	0x40026088
 8003d10:	40026488 	.word	0x40026488
 8003d14:	40026040 	.word	0x40026040
 8003d18:	40026440 	.word	0x40026440
 8003d1c:	400260a0 	.word	0x400260a0
 8003d20:	400264a0 	.word	0x400264a0
 8003d24:	40026400 	.word	0x40026400
 8003d28:	400260b8 	.word	0x400260b8
 8003d2c:	40026058 	.word	0x40026058
 8003d30:	2304      	movs	r3, #4
 8003d32:	4a94      	ldr	r2, [pc, #592]	; (8003f84 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003d34:	60d3      	str	r3, [r2, #12]
 8003d36:	e05f      	b.n	8003df8 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a92      	ldr	r2, [pc, #584]	; (8003f88 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d057      	beq.n	8003df2 <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a91      	ldr	r2, [pc, #580]	; (8003f8c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d050      	beq.n	8003dee <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a8f      	ldr	r2, [pc, #572]	; (8003f90 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d049      	beq.n	8003dea <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a8e      	ldr	r2, [pc, #568]	; (8003f94 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d042      	beq.n	8003de6 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a8c      	ldr	r2, [pc, #560]	; (8003f98 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d03a      	beq.n	8003de0 <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a8b      	ldr	r2, [pc, #556]	; (8003f9c <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d032      	beq.n	8003dda <HAL_DMAEx_MultiBufferStart_IT+0xe86>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a89      	ldr	r2, [pc, #548]	; (8003fa0 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d02a      	beq.n	8003dd4 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a88      	ldr	r2, [pc, #544]	; (8003fa4 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d022      	beq.n	8003dce <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a86      	ldr	r2, [pc, #536]	; (8003fa8 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d01a      	beq.n	8003dc8 <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a85      	ldr	r2, [pc, #532]	; (8003fac <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d012      	beq.n	8003dc2 <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a83      	ldr	r2, [pc, #524]	; (8003fb0 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00a      	beq.n	8003dbc <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a82      	ldr	r2, [pc, #520]	; (8003fb4 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d102      	bne.n	8003db6 <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 8003db0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003db4:	e01e      	b.n	8003df4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003db6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dba:	e01b      	b.n	8003df4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003dbc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003dc0:	e018      	b.n	8003df4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003dc2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003dc6:	e015      	b.n	8003df4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003dc8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003dcc:	e012      	b.n	8003df4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003dce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dd2:	e00f      	b.n	8003df4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003dd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dd8:	e00c      	b.n	8003df4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003dda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dde:	e009      	b.n	8003df4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003de0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003de4:	e006      	b.n	8003df4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003de6:	2304      	movs	r3, #4
 8003de8:	e004      	b.n	8003df4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003dea:	2304      	movs	r3, #4
 8003dec:	e002      	b.n	8003df4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003dee:	2304      	movs	r3, #4
 8003df0:	e000      	b.n	8003df4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003df2:	2304      	movs	r3, #4
 8003df4:	4a63      	ldr	r2, [pc, #396]	; (8003f84 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003df6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4b6e      	ldr	r3, [pc, #440]	; (8003fb8 <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d95c      	bls.n	8003ebe <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a5f      	ldr	r2, [pc, #380]	; (8003f88 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d053      	beq.n	8003eb6 <HAL_DMAEx_MultiBufferStart_IT+0xf62>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a5e      	ldr	r2, [pc, #376]	; (8003f8c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d04c      	beq.n	8003eb2 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a5c      	ldr	r2, [pc, #368]	; (8003f90 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d045      	beq.n	8003eae <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a5b      	ldr	r2, [pc, #364]	; (8003f94 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d03e      	beq.n	8003eaa <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a59      	ldr	r2, [pc, #356]	; (8003f98 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d037      	beq.n	8003ea6 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a58      	ldr	r2, [pc, #352]	; (8003f9c <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d030      	beq.n	8003ea2 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a56      	ldr	r2, [pc, #344]	; (8003fa0 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d029      	beq.n	8003e9e <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a55      	ldr	r2, [pc, #340]	; (8003fa4 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d022      	beq.n	8003e9a <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a53      	ldr	r2, [pc, #332]	; (8003fa8 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d01a      	beq.n	8003e94 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a52      	ldr	r2, [pc, #328]	; (8003fac <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d012      	beq.n	8003e8e <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a50      	ldr	r2, [pc, #320]	; (8003fb0 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00a      	beq.n	8003e88 <HAL_DMAEx_MultiBufferStart_IT+0xf34>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a4f      	ldr	r2, [pc, #316]	; (8003fb4 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d102      	bne.n	8003e82 <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8003e7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e80:	e01a      	b.n	8003eb8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003e82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e86:	e017      	b.n	8003eb8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003e88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e8c:	e014      	b.n	8003eb8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003e8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e92:	e011      	b.n	8003eb8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003e94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e98:	e00e      	b.n	8003eb8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003e9a:	2340      	movs	r3, #64	; 0x40
 8003e9c:	e00c      	b.n	8003eb8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003e9e:	2340      	movs	r3, #64	; 0x40
 8003ea0:	e00a      	b.n	8003eb8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003ea2:	2340      	movs	r3, #64	; 0x40
 8003ea4:	e008      	b.n	8003eb8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003ea6:	2340      	movs	r3, #64	; 0x40
 8003ea8:	e006      	b.n	8003eb8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e004      	b.n	8003eb8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e002      	b.n	8003eb8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	4a40      	ldr	r2, [pc, #256]	; (8003fbc <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8003eba:	60d3      	str	r3, [r2, #12]
 8003ebc:	e141      	b.n	8004142 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	4b3e      	ldr	r3, [pc, #248]	; (8003fc0 <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d97c      	bls.n	8003fc4 <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a2e      	ldr	r2, [pc, #184]	; (8003f88 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d053      	beq.n	8003f7c <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a2c      	ldr	r2, [pc, #176]	; (8003f8c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d04c      	beq.n	8003f78 <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a2b      	ldr	r2, [pc, #172]	; (8003f90 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d045      	beq.n	8003f74 <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a29      	ldr	r2, [pc, #164]	; (8003f94 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d03e      	beq.n	8003f70 <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a28      	ldr	r2, [pc, #160]	; (8003f98 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d037      	beq.n	8003f6c <HAL_DMAEx_MultiBufferStart_IT+0x1018>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a26      	ldr	r2, [pc, #152]	; (8003f9c <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d030      	beq.n	8003f68 <HAL_DMAEx_MultiBufferStart_IT+0x1014>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a25      	ldr	r2, [pc, #148]	; (8003fa0 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d029      	beq.n	8003f64 <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a23      	ldr	r2, [pc, #140]	; (8003fa4 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d022      	beq.n	8003f60 <HAL_DMAEx_MultiBufferStart_IT+0x100c>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a22      	ldr	r2, [pc, #136]	; (8003fa8 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d01a      	beq.n	8003f5a <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a20      	ldr	r2, [pc, #128]	; (8003fac <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d012      	beq.n	8003f54 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a1f      	ldr	r2, [pc, #124]	; (8003fb0 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d00a      	beq.n	8003f4e <HAL_DMAEx_MultiBufferStart_IT+0xffa>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a1d      	ldr	r2, [pc, #116]	; (8003fb4 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d102      	bne.n	8003f48 <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 8003f42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f46:	e01a      	b.n	8003f7e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003f48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f4c:	e017      	b.n	8003f7e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003f4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f52:	e014      	b.n	8003f7e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003f54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f58:	e011      	b.n	8003f7e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003f5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f5e:	e00e      	b.n	8003f7e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003f60:	2340      	movs	r3, #64	; 0x40
 8003f62:	e00c      	b.n	8003f7e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003f64:	2340      	movs	r3, #64	; 0x40
 8003f66:	e00a      	b.n	8003f7e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003f68:	2340      	movs	r3, #64	; 0x40
 8003f6a:	e008      	b.n	8003f7e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003f6c:	2340      	movs	r3, #64	; 0x40
 8003f6e:	e006      	b.n	8003f7e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003f70:	2301      	movs	r3, #1
 8003f72:	e004      	b.n	8003f7e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003f74:	2301      	movs	r3, #1
 8003f76:	e002      	b.n	8003f7e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	4a0f      	ldr	r2, [pc, #60]	; (8003fbc <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8003f80:	6093      	str	r3, [r2, #8]
 8003f82:	e0de      	b.n	8004142 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003f84:	40026000 	.word	0x40026000
 8003f88:	40026010 	.word	0x40026010
 8003f8c:	40026410 	.word	0x40026410
 8003f90:	40026070 	.word	0x40026070
 8003f94:	40026470 	.word	0x40026470
 8003f98:	40026028 	.word	0x40026028
 8003f9c:	40026428 	.word	0x40026428
 8003fa0:	40026088 	.word	0x40026088
 8003fa4:	40026488 	.word	0x40026488
 8003fa8:	40026040 	.word	0x40026040
 8003fac:	40026440 	.word	0x40026440
 8003fb0:	400260a0 	.word	0x400260a0
 8003fb4:	400264a0 	.word	0x400264a0
 8003fb8:	40026458 	.word	0x40026458
 8003fbc:	40026400 	.word	0x40026400
 8003fc0:	400260b8 	.word	0x400260b8
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4b78      	ldr	r3, [pc, #480]	; (80041ac <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d95c      	bls.n	800408a <HAL_DMAEx_MultiBufferStart_IT+0x1136>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a76      	ldr	r2, [pc, #472]	; (80041b0 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d053      	beq.n	8004082 <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a75      	ldr	r2, [pc, #468]	; (80041b4 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d04c      	beq.n	800407e <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a73      	ldr	r2, [pc, #460]	; (80041b8 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d045      	beq.n	800407a <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a72      	ldr	r2, [pc, #456]	; (80041bc <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d03e      	beq.n	8004076 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a70      	ldr	r2, [pc, #448]	; (80041c0 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d037      	beq.n	8004072 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a6f      	ldr	r2, [pc, #444]	; (80041c4 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d030      	beq.n	800406e <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a6d      	ldr	r2, [pc, #436]	; (80041c8 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d029      	beq.n	800406a <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a6c      	ldr	r2, [pc, #432]	; (80041cc <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d022      	beq.n	8004066 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a6a      	ldr	r2, [pc, #424]	; (80041d0 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d01a      	beq.n	8004060 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a69      	ldr	r2, [pc, #420]	; (80041d4 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d012      	beq.n	800405a <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a67      	ldr	r2, [pc, #412]	; (80041d8 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d00a      	beq.n	8004054 <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a66      	ldr	r2, [pc, #408]	; (80041dc <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d102      	bne.n	800404e <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8004048:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800404c:	e01a      	b.n	8004084 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800404e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004052:	e017      	b.n	8004084 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004054:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004058:	e014      	b.n	8004084 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800405a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800405e:	e011      	b.n	8004084 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004060:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004064:	e00e      	b.n	8004084 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004066:	2340      	movs	r3, #64	; 0x40
 8004068:	e00c      	b.n	8004084 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800406a:	2340      	movs	r3, #64	; 0x40
 800406c:	e00a      	b.n	8004084 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800406e:	2340      	movs	r3, #64	; 0x40
 8004070:	e008      	b.n	8004084 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004072:	2340      	movs	r3, #64	; 0x40
 8004074:	e006      	b.n	8004084 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004076:	2301      	movs	r3, #1
 8004078:	e004      	b.n	8004084 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800407a:	2301      	movs	r3, #1
 800407c:	e002      	b.n	8004084 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800407e:	2301      	movs	r3, #1
 8004080:	e000      	b.n	8004084 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004082:	2301      	movs	r3, #1
 8004084:	4a56      	ldr	r2, [pc, #344]	; (80041e0 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8004086:	60d3      	str	r3, [r2, #12]
 8004088:	e05b      	b.n	8004142 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a48      	ldr	r2, [pc, #288]	; (80041b0 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d053      	beq.n	800413c <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a46      	ldr	r2, [pc, #280]	; (80041b4 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d04c      	beq.n	8004138 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a45      	ldr	r2, [pc, #276]	; (80041b8 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d045      	beq.n	8004134 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a43      	ldr	r2, [pc, #268]	; (80041bc <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d03e      	beq.n	8004130 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a42      	ldr	r2, [pc, #264]	; (80041c0 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d037      	beq.n	800412c <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a40      	ldr	r2, [pc, #256]	; (80041c4 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d030      	beq.n	8004128 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a3f      	ldr	r2, [pc, #252]	; (80041c8 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d029      	beq.n	8004124 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a3d      	ldr	r2, [pc, #244]	; (80041cc <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d022      	beq.n	8004120 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a3c      	ldr	r2, [pc, #240]	; (80041d0 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d01a      	beq.n	800411a <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a3a      	ldr	r2, [pc, #232]	; (80041d4 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d012      	beq.n	8004114 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a39      	ldr	r2, [pc, #228]	; (80041d8 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d00a      	beq.n	800410e <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a37      	ldr	r2, [pc, #220]	; (80041dc <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d102      	bne.n	8004108 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 8004102:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004106:	e01a      	b.n	800413e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004108:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800410c:	e017      	b.n	800413e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800410e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004112:	e014      	b.n	800413e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004114:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004118:	e011      	b.n	800413e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800411a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800411e:	e00e      	b.n	800413e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004120:	2340      	movs	r3, #64	; 0x40
 8004122:	e00c      	b.n	800413e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004124:	2340      	movs	r3, #64	; 0x40
 8004126:	e00a      	b.n	800413e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004128:	2340      	movs	r3, #64	; 0x40
 800412a:	e008      	b.n	800413e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800412c:	2340      	movs	r3, #64	; 0x40
 800412e:	e006      	b.n	800413e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004130:	2301      	movs	r3, #1
 8004132:	e004      	b.n	800413e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004134:	2301      	movs	r3, #1
 8004136:	e002      	b.n	800413e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004138:	2301      	movs	r3, #1
 800413a:	e000      	b.n	800413e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800413c:	2301      	movs	r3, #1
 800413e:	4a28      	ldr	r2, [pc, #160]	; (80041e0 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8004140:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0216 	orr.w	r2, r2, #22
 8004150:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	695a      	ldr	r2, [r3, #20]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004160:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	2b00      	cmp	r3, #0
 8004168:	d103      	bne.n	8004172 <HAL_DMAEx_MultiBufferStart_IT+0x121e>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800416e:	2b00      	cmp	r3, #0
 8004170:	d007      	beq.n	8004182 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f042 0208 	orr.w	r2, r2, #8
 8004180:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f042 0201 	orr.w	r2, r2, #1
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	e005      	b.n	80041a0 <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800419c:	2302      	movs	r3, #2
 800419e:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 80041a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40026058 	.word	0x40026058
 80041b0:	40026010 	.word	0x40026010
 80041b4:	40026410 	.word	0x40026410
 80041b8:	40026070 	.word	0x40026070
 80041bc:	40026470 	.word	0x40026470
 80041c0:	40026028 	.word	0x40026028
 80041c4:	40026428 	.word	0x40026428
 80041c8:	40026088 	.word	0x40026088
 80041cc:	40026488 	.word	0x40026488
 80041d0:	40026040 	.word	0x40026040
 80041d4:	40026440 	.word	0x40026440
 80041d8:	400260a0 	.word	0x400260a0
 80041dc:	400264a0 	.word	0x400264a0
 80041e0:	40026000 	.word	0x40026000

080041e4 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	4613      	mov	r3, r2
 80041f0:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 80041f2:	79fb      	ldrb	r3, [r7, #7]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d104      	bne.n	8004202 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	60da      	str	r2, [r3, #12]
 8004200:	e003      	b.n	800420a <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3714      	adds	r7, #20
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	2b40      	cmp	r3, #64	; 0x40
 8004234:	d108      	bne.n	8004248 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004246:	e007      	b.n	8004258 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	60da      	str	r2, [r3, #12]
}
 8004258:	bf00      	nop
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004264:	b480      	push	{r7}
 8004266:	b089      	sub	sp, #36	; 0x24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800426e:	2300      	movs	r3, #0
 8004270:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004272:	2300      	movs	r3, #0
 8004274:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004276:	2300      	movs	r3, #0
 8004278:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800427a:	2300      	movs	r3, #0
 800427c:	61fb      	str	r3, [r7, #28]
 800427e:	e16b      	b.n	8004558 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004280:	2201      	movs	r2, #1
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	4013      	ands	r3, r2
 8004292:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	429a      	cmp	r2, r3
 800429a:	f040 815a 	bne.w	8004552 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d005      	beq.n	80042b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d130      	bne.n	8004318 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	2203      	movs	r2, #3
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	43db      	mvns	r3, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4013      	ands	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	4313      	orrs	r3, r2
 80042de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042ec:	2201      	movs	r2, #1
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	43db      	mvns	r3, r3
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	4013      	ands	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	091b      	lsrs	r3, r3, #4
 8004302:	f003 0201 	and.w	r2, r3, #1
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	4313      	orrs	r3, r2
 8004310:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f003 0303 	and.w	r3, r3, #3
 8004320:	2b03      	cmp	r3, #3
 8004322:	d017      	beq.n	8004354 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	2203      	movs	r2, #3
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	43db      	mvns	r3, r3
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	4013      	ands	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	4313      	orrs	r3, r2
 800434c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f003 0303 	and.w	r3, r3, #3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d123      	bne.n	80043a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	08da      	lsrs	r2, r3, #3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3208      	adds	r2, #8
 8004368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800436c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	220f      	movs	r2, #15
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	43db      	mvns	r3, r3
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	4013      	ands	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	4313      	orrs	r3, r2
 8004398:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	08da      	lsrs	r2, r3, #3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	3208      	adds	r2, #8
 80043a2:	69b9      	ldr	r1, [r7, #24]
 80043a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	2203      	movs	r2, #3
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	43db      	mvns	r3, r3
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	4013      	ands	r3, r2
 80043be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f003 0203 	and.w	r2, r3, #3
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	fa02 f303 	lsl.w	r3, r2, r3
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 80b4 	beq.w	8004552 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ea:	2300      	movs	r3, #0
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	4b60      	ldr	r3, [pc, #384]	; (8004570 <HAL_GPIO_Init+0x30c>)
 80043f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f2:	4a5f      	ldr	r2, [pc, #380]	; (8004570 <HAL_GPIO_Init+0x30c>)
 80043f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043f8:	6453      	str	r3, [r2, #68]	; 0x44
 80043fa:	4b5d      	ldr	r3, [pc, #372]	; (8004570 <HAL_GPIO_Init+0x30c>)
 80043fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004406:	4a5b      	ldr	r2, [pc, #364]	; (8004574 <HAL_GPIO_Init+0x310>)
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	089b      	lsrs	r3, r3, #2
 800440c:	3302      	adds	r3, #2
 800440e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004412:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	f003 0303 	and.w	r3, r3, #3
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	220f      	movs	r2, #15
 800441e:	fa02 f303 	lsl.w	r3, r2, r3
 8004422:	43db      	mvns	r3, r3
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	4013      	ands	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a52      	ldr	r2, [pc, #328]	; (8004578 <HAL_GPIO_Init+0x314>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d02b      	beq.n	800448a <HAL_GPIO_Init+0x226>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a51      	ldr	r2, [pc, #324]	; (800457c <HAL_GPIO_Init+0x318>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d025      	beq.n	8004486 <HAL_GPIO_Init+0x222>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a50      	ldr	r2, [pc, #320]	; (8004580 <HAL_GPIO_Init+0x31c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d01f      	beq.n	8004482 <HAL_GPIO_Init+0x21e>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a4f      	ldr	r2, [pc, #316]	; (8004584 <HAL_GPIO_Init+0x320>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d019      	beq.n	800447e <HAL_GPIO_Init+0x21a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a4e      	ldr	r2, [pc, #312]	; (8004588 <HAL_GPIO_Init+0x324>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d013      	beq.n	800447a <HAL_GPIO_Init+0x216>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a4d      	ldr	r2, [pc, #308]	; (800458c <HAL_GPIO_Init+0x328>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d00d      	beq.n	8004476 <HAL_GPIO_Init+0x212>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a4c      	ldr	r2, [pc, #304]	; (8004590 <HAL_GPIO_Init+0x32c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d007      	beq.n	8004472 <HAL_GPIO_Init+0x20e>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a4b      	ldr	r2, [pc, #300]	; (8004594 <HAL_GPIO_Init+0x330>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d101      	bne.n	800446e <HAL_GPIO_Init+0x20a>
 800446a:	2307      	movs	r3, #7
 800446c:	e00e      	b.n	800448c <HAL_GPIO_Init+0x228>
 800446e:	2308      	movs	r3, #8
 8004470:	e00c      	b.n	800448c <HAL_GPIO_Init+0x228>
 8004472:	2306      	movs	r3, #6
 8004474:	e00a      	b.n	800448c <HAL_GPIO_Init+0x228>
 8004476:	2305      	movs	r3, #5
 8004478:	e008      	b.n	800448c <HAL_GPIO_Init+0x228>
 800447a:	2304      	movs	r3, #4
 800447c:	e006      	b.n	800448c <HAL_GPIO_Init+0x228>
 800447e:	2303      	movs	r3, #3
 8004480:	e004      	b.n	800448c <HAL_GPIO_Init+0x228>
 8004482:	2302      	movs	r3, #2
 8004484:	e002      	b.n	800448c <HAL_GPIO_Init+0x228>
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <HAL_GPIO_Init+0x228>
 800448a:	2300      	movs	r3, #0
 800448c:	69fa      	ldr	r2, [r7, #28]
 800448e:	f002 0203 	and.w	r2, r2, #3
 8004492:	0092      	lsls	r2, r2, #2
 8004494:	4093      	lsls	r3, r2
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	4313      	orrs	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800449c:	4935      	ldr	r1, [pc, #212]	; (8004574 <HAL_GPIO_Init+0x310>)
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	089b      	lsrs	r3, r3, #2
 80044a2:	3302      	adds	r3, #2
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044aa:	4b3b      	ldr	r3, [pc, #236]	; (8004598 <HAL_GPIO_Init+0x334>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	43db      	mvns	r3, r3
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	4013      	ands	r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044ce:	4a32      	ldr	r2, [pc, #200]	; (8004598 <HAL_GPIO_Init+0x334>)
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80044d4:	4b30      	ldr	r3, [pc, #192]	; (8004598 <HAL_GPIO_Init+0x334>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	43db      	mvns	r3, r3
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	4013      	ands	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044f8:	4a27      	ldr	r2, [pc, #156]	; (8004598 <HAL_GPIO_Init+0x334>)
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044fe:	4b26      	ldr	r3, [pc, #152]	; (8004598 <HAL_GPIO_Init+0x334>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	43db      	mvns	r3, r3
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	4013      	ands	r3, r2
 800450c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	4313      	orrs	r3, r2
 8004520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004522:	4a1d      	ldr	r2, [pc, #116]	; (8004598 <HAL_GPIO_Init+0x334>)
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004528:	4b1b      	ldr	r3, [pc, #108]	; (8004598 <HAL_GPIO_Init+0x334>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	43db      	mvns	r3, r3
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	4013      	ands	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	4313      	orrs	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800454c:	4a12      	ldr	r2, [pc, #72]	; (8004598 <HAL_GPIO_Init+0x334>)
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	3301      	adds	r3, #1
 8004556:	61fb      	str	r3, [r7, #28]
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	2b0f      	cmp	r3, #15
 800455c:	f67f ae90 	bls.w	8004280 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004560:	bf00      	nop
 8004562:	bf00      	nop
 8004564:	3724      	adds	r7, #36	; 0x24
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	40023800 	.word	0x40023800
 8004574:	40013800 	.word	0x40013800
 8004578:	40020000 	.word	0x40020000
 800457c:	40020400 	.word	0x40020400
 8004580:	40020800 	.word	0x40020800
 8004584:	40020c00 	.word	0x40020c00
 8004588:	40021000 	.word	0x40021000
 800458c:	40021400 	.word	0x40021400
 8004590:	40021800 	.word	0x40021800
 8004594:	40021c00 	.word	0x40021c00
 8004598:	40013c00 	.word	0x40013c00

0800459c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	460b      	mov	r3, r1
 80045a6:	807b      	strh	r3, [r7, #2]
 80045a8:	4613      	mov	r3, r2
 80045aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045ac:	787b      	ldrb	r3, [r7, #1]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045b2:	887a      	ldrh	r2, [r7, #2]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045b8:	e003      	b.n	80045c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045ba:	887b      	ldrh	r3, [r7, #2]
 80045bc:	041a      	lsls	r2, r3, #16
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	619a      	str	r2, [r3, #24]
}
 80045c2:	bf00      	nop
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
	...

080045d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	4603      	mov	r3, r0
 80045d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80045da:	4b08      	ldr	r3, [pc, #32]	; (80045fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045dc:	695a      	ldr	r2, [r3, #20]
 80045de:	88fb      	ldrh	r3, [r7, #6]
 80045e0:	4013      	ands	r3, r2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d006      	beq.n	80045f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045e6:	4a05      	ldr	r2, [pc, #20]	; (80045fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045e8:	88fb      	ldrh	r3, [r7, #6]
 80045ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045ec:	88fb      	ldrh	r3, [r7, #6]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 f806 	bl	8004600 <HAL_GPIO_EXTI_Callback>
  }
}
 80045f4:	bf00      	nop
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40013c00 	.word	0x40013c00

08004600 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	4603      	mov	r3, r0
 8004608:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
	...

08004618 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e12b      	b.n	8004882 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d106      	bne.n	8004644 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7fd faa6 	bl	8001b90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2224      	movs	r2, #36	; 0x24
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 0201 	bic.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800466a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800467a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800467c:	f002 ff2c 	bl	80074d8 <HAL_RCC_GetPCLK1Freq>
 8004680:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	4a81      	ldr	r2, [pc, #516]	; (800488c <HAL_I2C_Init+0x274>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d807      	bhi.n	800469c <HAL_I2C_Init+0x84>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4a80      	ldr	r2, [pc, #512]	; (8004890 <HAL_I2C_Init+0x278>)
 8004690:	4293      	cmp	r3, r2
 8004692:	bf94      	ite	ls
 8004694:	2301      	movls	r3, #1
 8004696:	2300      	movhi	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	e006      	b.n	80046aa <HAL_I2C_Init+0x92>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4a7d      	ldr	r2, [pc, #500]	; (8004894 <HAL_I2C_Init+0x27c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	bf94      	ite	ls
 80046a4:	2301      	movls	r3, #1
 80046a6:	2300      	movhi	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e0e7      	b.n	8004882 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	4a78      	ldr	r2, [pc, #480]	; (8004898 <HAL_I2C_Init+0x280>)
 80046b6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ba:	0c9b      	lsrs	r3, r3, #18
 80046bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	4a6a      	ldr	r2, [pc, #424]	; (800488c <HAL_I2C_Init+0x274>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d802      	bhi.n	80046ec <HAL_I2C_Init+0xd4>
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	3301      	adds	r3, #1
 80046ea:	e009      	b.n	8004700 <HAL_I2C_Init+0xe8>
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80046f2:	fb02 f303 	mul.w	r3, r2, r3
 80046f6:	4a69      	ldr	r2, [pc, #420]	; (800489c <HAL_I2C_Init+0x284>)
 80046f8:	fba2 2303 	umull	r2, r3, r2, r3
 80046fc:	099b      	lsrs	r3, r3, #6
 80046fe:	3301      	adds	r3, #1
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	430b      	orrs	r3, r1
 8004706:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004712:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	495c      	ldr	r1, [pc, #368]	; (800488c <HAL_I2C_Init+0x274>)
 800471c:	428b      	cmp	r3, r1
 800471e:	d819      	bhi.n	8004754 <HAL_I2C_Init+0x13c>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	1e59      	subs	r1, r3, #1
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	fbb1 f3f3 	udiv	r3, r1, r3
 800472e:	1c59      	adds	r1, r3, #1
 8004730:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004734:	400b      	ands	r3, r1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00a      	beq.n	8004750 <HAL_I2C_Init+0x138>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	1e59      	subs	r1, r3, #1
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	fbb1 f3f3 	udiv	r3, r1, r3
 8004748:	3301      	adds	r3, #1
 800474a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800474e:	e051      	b.n	80047f4 <HAL_I2C_Init+0x1dc>
 8004750:	2304      	movs	r3, #4
 8004752:	e04f      	b.n	80047f4 <HAL_I2C_Init+0x1dc>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d111      	bne.n	8004780 <HAL_I2C_Init+0x168>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	1e58      	subs	r0, r3, #1
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6859      	ldr	r1, [r3, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	440b      	add	r3, r1
 800476a:	fbb0 f3f3 	udiv	r3, r0, r3
 800476e:	3301      	adds	r3, #1
 8004770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004774:	2b00      	cmp	r3, #0
 8004776:	bf0c      	ite	eq
 8004778:	2301      	moveq	r3, #1
 800477a:	2300      	movne	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	e012      	b.n	80047a6 <HAL_I2C_Init+0x18e>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	1e58      	subs	r0, r3, #1
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6859      	ldr	r1, [r3, #4]
 8004788:	460b      	mov	r3, r1
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	440b      	add	r3, r1
 800478e:	0099      	lsls	r1, r3, #2
 8004790:	440b      	add	r3, r1
 8004792:	fbb0 f3f3 	udiv	r3, r0, r3
 8004796:	3301      	adds	r3, #1
 8004798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800479c:	2b00      	cmp	r3, #0
 800479e:	bf0c      	ite	eq
 80047a0:	2301      	moveq	r3, #1
 80047a2:	2300      	movne	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <HAL_I2C_Init+0x196>
 80047aa:	2301      	movs	r3, #1
 80047ac:	e022      	b.n	80047f4 <HAL_I2C_Init+0x1dc>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10e      	bne.n	80047d4 <HAL_I2C_Init+0x1bc>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	1e58      	subs	r0, r3, #1
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6859      	ldr	r1, [r3, #4]
 80047be:	460b      	mov	r3, r1
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	440b      	add	r3, r1
 80047c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80047c8:	3301      	adds	r3, #1
 80047ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047d2:	e00f      	b.n	80047f4 <HAL_I2C_Init+0x1dc>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	1e58      	subs	r0, r3, #1
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6859      	ldr	r1, [r3, #4]
 80047dc:	460b      	mov	r3, r1
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	0099      	lsls	r1, r3, #2
 80047e4:	440b      	add	r3, r1
 80047e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047ea:	3301      	adds	r3, #1
 80047ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047f4:	6879      	ldr	r1, [r7, #4]
 80047f6:	6809      	ldr	r1, [r1, #0]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	69da      	ldr	r2, [r3, #28]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004822:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	6911      	ldr	r1, [r2, #16]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	68d2      	ldr	r2, [r2, #12]
 800482e:	4311      	orrs	r1, r2
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6812      	ldr	r2, [r2, #0]
 8004834:	430b      	orrs	r3, r1
 8004836:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	695a      	ldr	r2, [r3, #20]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0201 	orr.w	r2, r2, #1
 8004862:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2220      	movs	r2, #32
 800486e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	000186a0 	.word	0x000186a0
 8004890:	001e847f 	.word	0x001e847f
 8004894:	003d08ff 	.word	0x003d08ff
 8004898:	431bde83 	.word	0x431bde83
 800489c:	10624dd3 	.word	0x10624dd3

080048a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b088      	sub	sp, #32
 80048a4:	af02      	add	r7, sp, #8
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	607a      	str	r2, [r7, #4]
 80048aa:	461a      	mov	r2, r3
 80048ac:	460b      	mov	r3, r1
 80048ae:	817b      	strh	r3, [r7, #10]
 80048b0:	4613      	mov	r3, r2
 80048b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048b4:	f7fd fb9c 	bl	8001ff0 <HAL_GetTick>
 80048b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	f040 80e0 	bne.w	8004a88 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	2319      	movs	r3, #25
 80048ce:	2201      	movs	r2, #1
 80048d0:	4970      	ldr	r1, [pc, #448]	; (8004a94 <HAL_I2C_Master_Transmit+0x1f4>)
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f001 ff78 	bl	80067c8 <I2C_WaitOnFlagUntilTimeout>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80048de:	2302      	movs	r3, #2
 80048e0:	e0d3      	b.n	8004a8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <HAL_I2C_Master_Transmit+0x50>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e0cc      	b.n	8004a8a <HAL_I2C_Master_Transmit+0x1ea>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b01      	cmp	r3, #1
 8004904:	d007      	beq.n	8004916 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f042 0201 	orr.w	r2, r2, #1
 8004914:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004924:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2221      	movs	r2, #33	; 0x21
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2210      	movs	r2, #16
 8004932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	893a      	ldrh	r2, [r7, #8]
 8004946:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494c:	b29a      	uxth	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4a50      	ldr	r2, [pc, #320]	; (8004a98 <HAL_I2C_Master_Transmit+0x1f8>)
 8004956:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004958:	8979      	ldrh	r1, [r7, #10]
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	6a3a      	ldr	r2, [r7, #32]
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f001 fd72 	bl	8006448 <I2C_MasterRequestWrite>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e08d      	b.n	8004a8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800496e:	2300      	movs	r3, #0
 8004970:	613b      	str	r3, [r7, #16]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	613b      	str	r3, [r7, #16]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	613b      	str	r3, [r7, #16]
 8004982:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004984:	e066      	b.n	8004a54 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	6a39      	ldr	r1, [r7, #32]
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f001 fff2 	bl	8006974 <I2C_WaitOnTXEFlagUntilTimeout>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00d      	beq.n	80049b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	2b04      	cmp	r3, #4
 800499c:	d107      	bne.n	80049ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e06b      	b.n	8004a8a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	781a      	ldrb	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	1c5a      	adds	r2, r3, #1
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049da:	3b01      	subs	r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	f003 0304 	and.w	r3, r3, #4
 80049ec:	2b04      	cmp	r3, #4
 80049ee:	d11b      	bne.n	8004a28 <HAL_I2C_Master_Transmit+0x188>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d017      	beq.n	8004a28 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	781a      	ldrb	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	6a39      	ldr	r1, [r7, #32]
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f001 ffe2 	bl	80069f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00d      	beq.n	8004a54 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d107      	bne.n	8004a50 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a4e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e01a      	b.n	8004a8a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d194      	bne.n	8004986 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	e000      	b.n	8004a8a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004a88:	2302      	movs	r3, #2
  }
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3718      	adds	r7, #24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	00100002 	.word	0x00100002
 8004a98:	ffff0000 	.word	0xffff0000

08004a9c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b088      	sub	sp, #32
 8004aa0:	af02      	add	r7, sp, #8
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	4608      	mov	r0, r1
 8004aa6:	4611      	mov	r1, r2
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	4603      	mov	r3, r0
 8004aac:	817b      	strh	r3, [r7, #10]
 8004aae:	460b      	mov	r3, r1
 8004ab0:	813b      	strh	r3, [r7, #8]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ab6:	f7fd fa9b 	bl	8001ff0 <HAL_GetTick>
 8004aba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b20      	cmp	r3, #32
 8004ac6:	f040 80d9 	bne.w	8004c7c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	2319      	movs	r3, #25
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	496d      	ldr	r1, [pc, #436]	; (8004c88 <HAL_I2C_Mem_Write+0x1ec>)
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f001 fe77 	bl	80067c8 <I2C_WaitOnFlagUntilTimeout>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e0cc      	b.n	8004c7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d101      	bne.n	8004af2 <HAL_I2C_Mem_Write+0x56>
 8004aee:	2302      	movs	r3, #2
 8004af0:	e0c5      	b.n	8004c7e <HAL_I2C_Mem_Write+0x1e2>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d007      	beq.n	8004b18 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0201 	orr.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2221      	movs	r2, #33	; 0x21
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2240      	movs	r2, #64	; 0x40
 8004b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6a3a      	ldr	r2, [r7, #32]
 8004b42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4a4d      	ldr	r2, [pc, #308]	; (8004c8c <HAL_I2C_Mem_Write+0x1f0>)
 8004b58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b5a:	88f8      	ldrh	r0, [r7, #6]
 8004b5c:	893a      	ldrh	r2, [r7, #8]
 8004b5e:	8979      	ldrh	r1, [r7, #10]
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	9301      	str	r3, [sp, #4]
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	4603      	mov	r3, r0
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f001 fcee 	bl	800654c <I2C_RequestMemoryWrite>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d052      	beq.n	8004c1c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e081      	b.n	8004c7e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f001 fef8 	bl	8006974 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00d      	beq.n	8004ba6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d107      	bne.n	8004ba2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ba0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e06b      	b.n	8004c7e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	781a      	ldrb	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b04      	cmp	r3, #4
 8004be2:	d11b      	bne.n	8004c1c <HAL_I2C_Mem_Write+0x180>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d017      	beq.n	8004c1c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	781a      	ldrb	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1aa      	bne.n	8004b7a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f001 fee4 	bl	80069f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00d      	beq.n	8004c50 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	d107      	bne.n	8004c4c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e016      	b.n	8004c7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	e000      	b.n	8004c7e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c7c:	2302      	movs	r3, #2
  }
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	00100002 	.word	0x00100002
 8004c8c:	ffff0000 	.word	0xffff0000

08004c90 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cb0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004cba:	7bfb      	ldrb	r3, [r7, #15]
 8004cbc:	2b10      	cmp	r3, #16
 8004cbe:	d003      	beq.n	8004cc8 <HAL_I2C_EV_IRQHandler+0x38>
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	2b40      	cmp	r3, #64	; 0x40
 8004cc4:	f040 80c1 	bne.w	8004e4a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10d      	bne.n	8004cfe <HAL_I2C_EV_IRQHandler+0x6e>
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004ce8:	d003      	beq.n	8004cf2 <HAL_I2C_EV_IRQHandler+0x62>
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004cf0:	d101      	bne.n	8004cf6 <HAL_I2C_EV_IRQHandler+0x66>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e000      	b.n	8004cf8 <HAL_I2C_EV_IRQHandler+0x68>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	f000 8132 	beq.w	8004f62 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00c      	beq.n	8004d22 <HAL_I2C_EV_IRQHandler+0x92>
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	0a5b      	lsrs	r3, r3, #9
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d006      	beq.n	8004d22 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f001 ff10 	bl	8006b3a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 fd79 	bl	8005812 <I2C_Master_SB>
 8004d20:	e092      	b.n	8004e48 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	08db      	lsrs	r3, r3, #3
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d009      	beq.n	8004d42 <HAL_I2C_EV_IRQHandler+0xb2>
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	0a5b      	lsrs	r3, r3, #9
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 fdef 	bl	800591e <I2C_Master_ADD10>
 8004d40:	e082      	b.n	8004e48 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	085b      	lsrs	r3, r3, #1
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d009      	beq.n	8004d62 <HAL_I2C_EV_IRQHandler+0xd2>
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	0a5b      	lsrs	r3, r3, #9
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fe09 	bl	8005972 <I2C_Master_ADDR>
 8004d60:	e072      	b.n	8004e48 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	089b      	lsrs	r3, r3, #2
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d03b      	beq.n	8004de6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d7c:	f000 80f3 	beq.w	8004f66 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	09db      	lsrs	r3, r3, #7
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00f      	beq.n	8004dac <HAL_I2C_EV_IRQHandler+0x11c>
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	0a9b      	lsrs	r3, r3, #10
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d009      	beq.n	8004dac <HAL_I2C_EV_IRQHandler+0x11c>
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	089b      	lsrs	r3, r3, #2
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d103      	bne.n	8004dac <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 f9f3 	bl	8005190 <I2C_MasterTransmit_TXE>
 8004daa:	e04d      	b.n	8004e48 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	089b      	lsrs	r3, r3, #2
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 80d6 	beq.w	8004f66 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	0a5b      	lsrs	r3, r3, #9
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 80cf 	beq.w	8004f66 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004dc8:	7bbb      	ldrb	r3, [r7, #14]
 8004dca:	2b21      	cmp	r3, #33	; 0x21
 8004dcc:	d103      	bne.n	8004dd6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 fa7a 	bl	80052c8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004dd4:	e0c7      	b.n	8004f66 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
 8004dd8:	2b40      	cmp	r3, #64	; 0x40
 8004dda:	f040 80c4 	bne.w	8004f66 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fae8 	bl	80053b4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004de4:	e0bf      	b.n	8004f66 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004df0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004df4:	f000 80b7 	beq.w	8004f66 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	099b      	lsrs	r3, r3, #6
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00f      	beq.n	8004e24 <HAL_I2C_EV_IRQHandler+0x194>
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	0a9b      	lsrs	r3, r3, #10
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d009      	beq.n	8004e24 <HAL_I2C_EV_IRQHandler+0x194>
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	089b      	lsrs	r3, r3, #2
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d103      	bne.n	8004e24 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 fb5d 	bl	80054dc <I2C_MasterReceive_RXNE>
 8004e22:	e011      	b.n	8004e48 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	089b      	lsrs	r3, r3, #2
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 809a 	beq.w	8004f66 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	0a5b      	lsrs	r3, r3, #9
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 8093 	beq.w	8004f66 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fbfc 	bl	800563e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e46:	e08e      	b.n	8004f66 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004e48:	e08d      	b.n	8004f66 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d004      	beq.n	8004e5c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	61fb      	str	r3, [r7, #28]
 8004e5a:	e007      	b.n	8004e6c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	085b      	lsrs	r3, r3, #1
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d012      	beq.n	8004e9e <HAL_I2C_EV_IRQHandler+0x20e>
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	0a5b      	lsrs	r3, r3, #9
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00c      	beq.n	8004e9e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004e94:	69b9      	ldr	r1, [r7, #24]
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 ffba 	bl	8005e10 <I2C_Slave_ADDR>
 8004e9c:	e066      	b.n	8004f6c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	091b      	lsrs	r3, r3, #4
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d009      	beq.n	8004ebe <HAL_I2C_EV_IRQHandler+0x22e>
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	0a5b      	lsrs	r3, r3, #9
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fff4 	bl	8005ea4 <I2C_Slave_STOPF>
 8004ebc:	e056      	b.n	8004f6c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004ebe:	7bbb      	ldrb	r3, [r7, #14]
 8004ec0:	2b21      	cmp	r3, #33	; 0x21
 8004ec2:	d002      	beq.n	8004eca <HAL_I2C_EV_IRQHandler+0x23a>
 8004ec4:	7bbb      	ldrb	r3, [r7, #14]
 8004ec6:	2b29      	cmp	r3, #41	; 0x29
 8004ec8:	d125      	bne.n	8004f16 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	09db      	lsrs	r3, r3, #7
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00f      	beq.n	8004ef6 <HAL_I2C_EV_IRQHandler+0x266>
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	0a9b      	lsrs	r3, r3, #10
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d009      	beq.n	8004ef6 <HAL_I2C_EV_IRQHandler+0x266>
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	089b      	lsrs	r3, r3, #2
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d103      	bne.n	8004ef6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 fed0 	bl	8005c94 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ef4:	e039      	b.n	8004f6a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	089b      	lsrs	r3, r3, #2
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d033      	beq.n	8004f6a <HAL_I2C_EV_IRQHandler+0x2da>
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	0a5b      	lsrs	r3, r3, #9
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d02d      	beq.n	8004f6a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fefd 	bl	8005d0e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f14:	e029      	b.n	8004f6a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	099b      	lsrs	r3, r3, #6
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00f      	beq.n	8004f42 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	0a9b      	lsrs	r3, r3, #10
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d009      	beq.n	8004f42 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	089b      	lsrs	r3, r3, #2
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d103      	bne.n	8004f42 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 ff08 	bl	8005d50 <I2C_SlaveReceive_RXNE>
 8004f40:	e014      	b.n	8004f6c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	089b      	lsrs	r3, r3, #2
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00e      	beq.n	8004f6c <HAL_I2C_EV_IRQHandler+0x2dc>
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	0a5b      	lsrs	r3, r3, #9
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d008      	beq.n	8004f6c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 ff36 	bl	8005dcc <I2C_SlaveReceive_BTF>
 8004f60:	e004      	b.n	8004f6c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004f62:	bf00      	nop
 8004f64:	e002      	b.n	8004f6c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f66:	bf00      	nop
 8004f68:	e000      	b.n	8004f6c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f6a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004f6c:	3720      	adds	r7, #32
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b08a      	sub	sp, #40	; 0x28
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f94:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	0a1b      	lsrs	r3, r3, #8
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00e      	beq.n	8004fc0 <HAL_I2C_ER_IRQHandler+0x4e>
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	0a1b      	lsrs	r3, r3, #8
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d008      	beq.n	8004fc0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb0:	f043 0301 	orr.w	r3, r3, #1
 8004fb4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004fbe:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	0a5b      	lsrs	r3, r3, #9
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00e      	beq.n	8004fea <HAL_I2C_ER_IRQHandler+0x78>
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	0a1b      	lsrs	r3, r3, #8
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d008      	beq.n	8004fea <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	f043 0302 	orr.w	r3, r3, #2
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004fe8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	0a9b      	lsrs	r3, r3, #10
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d03f      	beq.n	8005076 <HAL_I2C_ER_IRQHandler+0x104>
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	0a1b      	lsrs	r3, r3, #8
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d039      	beq.n	8005076 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005002:	7efb      	ldrb	r3, [r7, #27]
 8005004:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500a:	b29b      	uxth	r3, r3
 800500c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005014:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800501c:	7ebb      	ldrb	r3, [r7, #26]
 800501e:	2b20      	cmp	r3, #32
 8005020:	d112      	bne.n	8005048 <HAL_I2C_ER_IRQHandler+0xd6>
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10f      	bne.n	8005048 <HAL_I2C_ER_IRQHandler+0xd6>
 8005028:	7cfb      	ldrb	r3, [r7, #19]
 800502a:	2b21      	cmp	r3, #33	; 0x21
 800502c:	d008      	beq.n	8005040 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800502e:	7cfb      	ldrb	r3, [r7, #19]
 8005030:	2b29      	cmp	r3, #41	; 0x29
 8005032:	d005      	beq.n	8005040 <HAL_I2C_ER_IRQHandler+0xce>
 8005034:	7cfb      	ldrb	r3, [r7, #19]
 8005036:	2b28      	cmp	r3, #40	; 0x28
 8005038:	d106      	bne.n	8005048 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2b21      	cmp	r3, #33	; 0x21
 800503e:	d103      	bne.n	8005048 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f001 f85f 	bl	8006104 <I2C_Slave_AF>
 8005046:	e016      	b.n	8005076 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005050:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	f043 0304 	orr.w	r3, r3, #4
 8005058:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800505a:	7efb      	ldrb	r3, [r7, #27]
 800505c:	2b10      	cmp	r3, #16
 800505e:	d002      	beq.n	8005066 <HAL_I2C_ER_IRQHandler+0xf4>
 8005060:	7efb      	ldrb	r3, [r7, #27]
 8005062:	2b40      	cmp	r3, #64	; 0x40
 8005064:	d107      	bne.n	8005076 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005074:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	0adb      	lsrs	r3, r3, #11
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00e      	beq.n	80050a0 <HAL_I2C_ER_IRQHandler+0x12e>
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	0a1b      	lsrs	r3, r3, #8
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d008      	beq.n	80050a0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	f043 0308 	orr.w	r3, r3, #8
 8005094:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800509e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d008      	beq.n	80050b8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	431a      	orrs	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f001 f896 	bl	80061e4 <I2C_ITError>
  }
}
 80050b8:	bf00      	nop
 80050ba:	3728      	adds	r7, #40	; 0x28
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	460b      	mov	r3, r1
 800511a:	70fb      	strb	r3, [r7, #3]
 800511c:	4613      	mov	r3, r2
 800511e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051a6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ac:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d150      	bne.n	8005258 <I2C_MasterTransmit_TXE+0xc8>
 80051b6:	7bfb      	ldrb	r3, [r7, #15]
 80051b8:	2b21      	cmp	r3, #33	; 0x21
 80051ba:	d14d      	bne.n	8005258 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	2b08      	cmp	r3, #8
 80051c0:	d01d      	beq.n	80051fe <I2C_MasterTransmit_TXE+0x6e>
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2b20      	cmp	r3, #32
 80051c6:	d01a      	beq.n	80051fe <I2C_MasterTransmit_TXE+0x6e>
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051ce:	d016      	beq.n	80051fe <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051de:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2211      	movs	r2, #17
 80051e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2220      	movs	r2, #32
 80051f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7ff ff62 	bl	80050c0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80051fc:	e060      	b.n	80052c0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800520c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800521c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2220      	movs	r2, #32
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b40      	cmp	r3, #64	; 0x40
 8005236:	d107      	bne.n	8005248 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7ff ff7d 	bl	8005140 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005246:	e03b      	b.n	80052c0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7ff ff35 	bl	80050c0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005256:	e033      	b.n	80052c0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005258:	7bfb      	ldrb	r3, [r7, #15]
 800525a:	2b21      	cmp	r3, #33	; 0x21
 800525c:	d005      	beq.n	800526a <I2C_MasterTransmit_TXE+0xda>
 800525e:	7bbb      	ldrb	r3, [r7, #14]
 8005260:	2b40      	cmp	r3, #64	; 0x40
 8005262:	d12d      	bne.n	80052c0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005264:	7bfb      	ldrb	r3, [r7, #15]
 8005266:	2b22      	cmp	r3, #34	; 0x22
 8005268:	d12a      	bne.n	80052c0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526e:	b29b      	uxth	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d108      	bne.n	8005286 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005282:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005284:	e01c      	b.n	80052c0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b40      	cmp	r3, #64	; 0x40
 8005290:	d103      	bne.n	800529a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f88e 	bl	80053b4 <I2C_MemoryTransmit_TXE_BTF>
}
 8005298:	e012      	b.n	80052c0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	781a      	ldrb	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	1c5a      	adds	r2, r3, #1
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	3b01      	subs	r3, #1
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80052be:	e7ff      	b.n	80052c0 <I2C_MasterTransmit_TXE+0x130>
 80052c0:	bf00      	nop
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b21      	cmp	r3, #33	; 0x21
 80052e0:	d164      	bne.n	80053ac <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d012      	beq.n	8005312 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f0:	781a      	ldrb	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	1c5a      	adds	r2, r3, #1
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005306:	b29b      	uxth	r3, r3
 8005308:	3b01      	subs	r3, #1
 800530a:	b29a      	uxth	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005310:	e04c      	b.n	80053ac <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b08      	cmp	r3, #8
 8005316:	d01d      	beq.n	8005354 <I2C_MasterTransmit_BTF+0x8c>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2b20      	cmp	r3, #32
 800531c:	d01a      	beq.n	8005354 <I2C_MasterTransmit_BTF+0x8c>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005324:	d016      	beq.n	8005354 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005334:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2211      	movs	r2, #17
 800533a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2220      	movs	r2, #32
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7ff feb7 	bl	80050c0 <HAL_I2C_MasterTxCpltCallback>
}
 8005352:	e02b      	b.n	80053ac <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005362:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005372:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2220      	movs	r2, #32
 800537e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b40      	cmp	r3, #64	; 0x40
 800538c:	d107      	bne.n	800539e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7ff fed2 	bl	8005140 <HAL_I2C_MemTxCpltCallback>
}
 800539c:	e006      	b.n	80053ac <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7ff fe8a 	bl	80050c0 <HAL_I2C_MasterTxCpltCallback>
}
 80053ac:	bf00      	nop
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d11d      	bne.n	8005408 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d10b      	bne.n	80053ec <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e4:	1c9a      	adds	r2, r3, #2
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80053ea:	e073      	b.n	80054d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	121b      	asrs	r3, r3, #8
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005406:	e065      	b.n	80054d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800540c:	2b01      	cmp	r3, #1
 800540e:	d10b      	bne.n	8005428 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005414:	b2da      	uxtb	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005426:	e055      	b.n	80054d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800542c:	2b02      	cmp	r3, #2
 800542e:	d151      	bne.n	80054d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005430:	7bfb      	ldrb	r3, [r7, #15]
 8005432:	2b22      	cmp	r3, #34	; 0x22
 8005434:	d10d      	bne.n	8005452 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005444:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005450:	e040      	b.n	80054d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005456:	b29b      	uxth	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d015      	beq.n	8005488 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800545c:	7bfb      	ldrb	r3, [r7, #15]
 800545e:	2b21      	cmp	r3, #33	; 0x21
 8005460:	d112      	bne.n	8005488 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	781a      	ldrb	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	1c5a      	adds	r2, r3, #1
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547c:	b29b      	uxth	r3, r3
 800547e:	3b01      	subs	r3, #1
 8005480:	b29a      	uxth	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005486:	e025      	b.n	80054d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548c:	b29b      	uxth	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d120      	bne.n	80054d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005492:	7bfb      	ldrb	r3, [r7, #15]
 8005494:	2b21      	cmp	r3, #33	; 0x21
 8005496:	d11d      	bne.n	80054d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054a6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054b6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2220      	movs	r2, #32
 80054c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7ff fe36 	bl	8005140 <HAL_I2C_MemTxCpltCallback>
}
 80054d4:	bf00      	nop
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b22      	cmp	r3, #34	; 0x22
 80054ee:	f040 80a2 	bne.w	8005636 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d921      	bls.n	8005544 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	691a      	ldr	r2, [r3, #16]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	b2d2      	uxtb	r2, r2
 800550c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551c:	b29b      	uxth	r3, r3
 800551e:	3b01      	subs	r3, #1
 8005520:	b29a      	uxth	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800552a:	b29b      	uxth	r3, r3
 800552c:	2b03      	cmp	r3, #3
 800552e:	f040 8082 	bne.w	8005636 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005540:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005542:	e078      	b.n	8005636 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005548:	2b02      	cmp	r3, #2
 800554a:	d074      	beq.n	8005636 <I2C_MasterReceive_RXNE+0x15a>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d002      	beq.n	8005558 <I2C_MasterReceive_RXNE+0x7c>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d16e      	bne.n	8005636 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f001 fa8d 	bl	8006a78 <I2C_WaitOnSTOPRequestThroughIT>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d142      	bne.n	80055ea <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005572:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005582:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691a      	ldr	r2, [r3, #16]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	1c5a      	adds	r2, r3, #1
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	3b01      	subs	r3, #1
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b40      	cmp	r3, #64	; 0x40
 80055bc:	d10a      	bne.n	80055d4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7ff fdc1 	bl	8005154 <HAL_I2C_MemRxCpltCallback>
}
 80055d2:	e030      	b.n	8005636 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2212      	movs	r2, #18
 80055e0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7ff fd76 	bl	80050d4 <HAL_I2C_MasterRxCpltCallback>
}
 80055e8:	e025      	b.n	8005636 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055f8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	691a      	ldr	r2, [r3, #16]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	b2d2      	uxtb	r2, r2
 8005606:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	1c5a      	adds	r2, r3, #1
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005616:	b29b      	uxth	r3, r3
 8005618:	3b01      	subs	r3, #1
 800561a:	b29a      	uxth	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7ff fd99 	bl	8005168 <HAL_I2C_ErrorCallback>
}
 8005636:	bf00      	nop
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b084      	sub	sp, #16
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005650:	b29b      	uxth	r3, r3
 8005652:	2b04      	cmp	r3, #4
 8005654:	d11b      	bne.n	800568e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005664:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	691a      	ldr	r2, [r3, #16]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	b2d2      	uxtb	r2, r2
 8005672:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	1c5a      	adds	r2, r3, #1
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005682:	b29b      	uxth	r3, r3
 8005684:	3b01      	subs	r3, #1
 8005686:	b29a      	uxth	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800568c:	e0bd      	b.n	800580a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005692:	b29b      	uxth	r3, r3
 8005694:	2b03      	cmp	r3, #3
 8005696:	d129      	bne.n	80056ec <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056a6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2b04      	cmp	r3, #4
 80056ac:	d00a      	beq.n	80056c4 <I2C_MasterReceive_BTF+0x86>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d007      	beq.n	80056c4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056c2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	691a      	ldr	r2, [r3, #16]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	b2d2      	uxtb	r2, r2
 80056d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	3b01      	subs	r3, #1
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80056ea:	e08e      	b.n	800580a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d176      	bne.n	80057e4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d002      	beq.n	8005702 <I2C_MasterReceive_BTF+0xc4>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2b10      	cmp	r3, #16
 8005700:	d108      	bne.n	8005714 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	e019      	b.n	8005748 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2b04      	cmp	r3, #4
 8005718:	d002      	beq.n	8005720 <I2C_MasterReceive_BTF+0xe2>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b02      	cmp	r3, #2
 800571e:	d108      	bne.n	8005732 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	e00a      	b.n	8005748 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2b10      	cmp	r3, #16
 8005736:	d007      	beq.n	8005748 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005746:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	691a      	ldr	r2, [r3, #16]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	b2d2      	uxtb	r2, r2
 8005754:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	1c5a      	adds	r2, r3, #1
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005764:	b29b      	uxth	r3, r3
 8005766:	3b01      	subs	r3, #1
 8005768:	b29a      	uxth	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	691a      	ldr	r2, [r3, #16]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005778:	b2d2      	uxtb	r2, r2
 800577a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800578a:	b29b      	uxth	r3, r3
 800578c:	3b01      	subs	r3, #1
 800578e:	b29a      	uxth	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80057a2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b40      	cmp	r3, #64	; 0x40
 80057b6:	d10a      	bne.n	80057ce <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7ff fcc4 	bl	8005154 <HAL_I2C_MemRxCpltCallback>
}
 80057cc:	e01d      	b.n	800580a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2212      	movs	r2, #18
 80057da:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f7ff fc79 	bl	80050d4 <HAL_I2C_MasterRxCpltCallback>
}
 80057e2:	e012      	b.n	800580a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	691a      	ldr	r2, [r3, #16]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	b2d2      	uxtb	r2, r2
 80057f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005800:	b29b      	uxth	r3, r3
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800580a:	bf00      	nop
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005812:	b480      	push	{r7}
 8005814:	b083      	sub	sp, #12
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b40      	cmp	r3, #64	; 0x40
 8005824:	d117      	bne.n	8005856 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800582a:	2b00      	cmp	r3, #0
 800582c:	d109      	bne.n	8005842 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005832:	b2db      	uxtb	r3, r3
 8005834:	461a      	mov	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800583e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005840:	e067      	b.n	8005912 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005846:	b2db      	uxtb	r3, r3
 8005848:	f043 0301 	orr.w	r3, r3, #1
 800584c:	b2da      	uxtb	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	611a      	str	r2, [r3, #16]
}
 8005854:	e05d      	b.n	8005912 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800585e:	d133      	bne.n	80058c8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b21      	cmp	r3, #33	; 0x21
 800586a:	d109      	bne.n	8005880 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005870:	b2db      	uxtb	r3, r3
 8005872:	461a      	mov	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800587c:	611a      	str	r2, [r3, #16]
 800587e:	e008      	b.n	8005892 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005884:	b2db      	uxtb	r3, r3
 8005886:	f043 0301 	orr.w	r3, r3, #1
 800588a:	b2da      	uxtb	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005896:	2b00      	cmp	r3, #0
 8005898:	d004      	beq.n	80058a4 <I2C_Master_SB+0x92>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d108      	bne.n	80058b6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d032      	beq.n	8005912 <I2C_Master_SB+0x100>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d02d      	beq.n	8005912 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058c4:	605a      	str	r2, [r3, #4]
}
 80058c6:	e024      	b.n	8005912 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10e      	bne.n	80058ee <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	11db      	asrs	r3, r3, #7
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	f003 0306 	and.w	r3, r3, #6
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	f063 030f 	orn	r3, r3, #15
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	611a      	str	r2, [r3, #16]
}
 80058ec:	e011      	b.n	8005912 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d10d      	bne.n	8005912 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	11db      	asrs	r3, r3, #7
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	f003 0306 	and.w	r3, r3, #6
 8005904:	b2db      	uxtb	r3, r3
 8005906:	f063 030e 	orn	r3, r3, #14
 800590a:	b2da      	uxtb	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	611a      	str	r2, [r3, #16]
}
 8005912:	bf00      	nop
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800591e:	b480      	push	{r7}
 8005920:	b083      	sub	sp, #12
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592a:	b2da      	uxtb	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005936:	2b00      	cmp	r3, #0
 8005938:	d004      	beq.n	8005944 <I2C_Master_ADD10+0x26>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005940:	2b00      	cmp	r3, #0
 8005942:	d108      	bne.n	8005956 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00c      	beq.n	8005966 <I2C_Master_ADD10+0x48>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005952:	2b00      	cmp	r3, #0
 8005954:	d007      	beq.n	8005966 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005964:	605a      	str	r2, [r3, #4]
  }
}
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005972:	b480      	push	{r7}
 8005974:	b091      	sub	sp, #68	; 0x44
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005980:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005988:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b22      	cmp	r3, #34	; 0x22
 800599a:	f040 8169 	bne.w	8005c70 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10f      	bne.n	80059c6 <I2C_Master_ADDR+0x54>
 80059a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80059aa:	2b40      	cmp	r3, #64	; 0x40
 80059ac:	d10b      	bne.n	80059c6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ae:	2300      	movs	r3, #0
 80059b0:	633b      	str	r3, [r7, #48]	; 0x30
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	633b      	str	r3, [r7, #48]	; 0x30
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	633b      	str	r3, [r7, #48]	; 0x30
 80059c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c4:	e160      	b.n	8005c88 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d11d      	bne.n	8005a0a <I2C_Master_ADDR+0x98>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80059d6:	d118      	bne.n	8005a0a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059d8:	2300      	movs	r3, #0
 80059da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059fc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	651a      	str	r2, [r3, #80]	; 0x50
 8005a08:	e13e      	b.n	8005c88 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d113      	bne.n	8005a3c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a14:	2300      	movs	r3, #0
 8005a16:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	e115      	b.n	8005c68 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	f040 808a 	bne.w	8005b5c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a4e:	d137      	bne.n	8005ac0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a5e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a6e:	d113      	bne.n	8005a98 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a7e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a80:	2300      	movs	r3, #0
 8005a82:	627b      	str	r3, [r7, #36]	; 0x24
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	e0e7      	b.n	8005c68 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a98:	2300      	movs	r3, #0
 8005a9a:	623b      	str	r3, [r7, #32]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	623b      	str	r3, [r7, #32]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	623b      	str	r3, [r7, #32]
 8005aac:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	e0d3      	b.n	8005c68 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac2:	2b08      	cmp	r3, #8
 8005ac4:	d02e      	beq.n	8005b24 <I2C_Master_ADDR+0x1b2>
 8005ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	d02b      	beq.n	8005b24 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ace:	2b12      	cmp	r3, #18
 8005ad0:	d102      	bne.n	8005ad8 <I2C_Master_ADDR+0x166>
 8005ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d125      	bne.n	8005b24 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d00e      	beq.n	8005afc <I2C_Master_ADDR+0x18a>
 8005ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d00b      	beq.n	8005afc <I2C_Master_ADDR+0x18a>
 8005ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae6:	2b10      	cmp	r3, #16
 8005ae8:	d008      	beq.n	8005afc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	e007      	b.n	8005b0c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b0a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	61fb      	str	r3, [r7, #28]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	61fb      	str	r3, [r7, #28]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	61fb      	str	r3, [r7, #28]
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	e0a1      	b.n	8005c68 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b32:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b34:	2300      	movs	r3, #0
 8005b36:	61bb      	str	r3, [r7, #24]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	61bb      	str	r3, [r7, #24]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	61bb      	str	r3, [r7, #24]
 8005b48:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	e085      	b.n	8005c68 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d14d      	bne.n	8005c02 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	d016      	beq.n	8005b9a <I2C_Master_ADDR+0x228>
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d013      	beq.n	8005b9a <I2C_Master_ADDR+0x228>
 8005b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b74:	2b10      	cmp	r3, #16
 8005b76:	d010      	beq.n	8005b9a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b86:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	e007      	b.n	8005baa <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ba8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb8:	d117      	bne.n	8005bea <I2C_Master_ADDR+0x278>
 8005bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005bc0:	d00b      	beq.n	8005bda <I2C_Master_ADDR+0x268>
 8005bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d008      	beq.n	8005bda <I2C_Master_ADDR+0x268>
 8005bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bca:	2b08      	cmp	r3, #8
 8005bcc:	d005      	beq.n	8005bda <I2C_Master_ADDR+0x268>
 8005bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd0:	2b10      	cmp	r3, #16
 8005bd2:	d002      	beq.n	8005bda <I2C_Master_ADDR+0x268>
 8005bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd6:	2b20      	cmp	r3, #32
 8005bd8:	d107      	bne.n	8005bea <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005be8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bea:	2300      	movs	r3, #0
 8005bec:	617b      	str	r3, [r7, #20]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	617b      	str	r3, [r7, #20]
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	e032      	b.n	8005c68 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c10:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c20:	d117      	bne.n	8005c52 <I2C_Master_ADDR+0x2e0>
 8005c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c28:	d00b      	beq.n	8005c42 <I2C_Master_ADDR+0x2d0>
 8005c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d008      	beq.n	8005c42 <I2C_Master_ADDR+0x2d0>
 8005c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c32:	2b08      	cmp	r3, #8
 8005c34:	d005      	beq.n	8005c42 <I2C_Master_ADDR+0x2d0>
 8005c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c38:	2b10      	cmp	r3, #16
 8005c3a:	d002      	beq.n	8005c42 <I2C_Master_ADDR+0x2d0>
 8005c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3e:	2b20      	cmp	r3, #32
 8005c40:	d107      	bne.n	8005c52 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c50:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c52:	2300      	movs	r3, #0
 8005c54:	613b      	str	r3, [r7, #16]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	613b      	str	r3, [r7, #16]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	613b      	str	r3, [r7, #16]
 8005c66:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005c6e:	e00b      	b.n	8005c88 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c70:	2300      	movs	r3, #0
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	60fb      	str	r3, [r7, #12]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	68fb      	ldr	r3, [r7, #12]
}
 8005c86:	e7ff      	b.n	8005c88 <I2C_Master_ADDR+0x316>
 8005c88:	bf00      	nop
 8005c8a:	3744      	adds	r7, #68	; 0x44
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d02b      	beq.n	8005d06 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	781a      	ldrb	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbe:	1c5a      	adds	r2, r3, #1
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d114      	bne.n	8005d06 <I2C_SlaveTransmit_TXE+0x72>
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
 8005cde:	2b29      	cmp	r3, #41	; 0x29
 8005ce0:	d111      	bne.n	8005d06 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cf0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2221      	movs	r2, #33	; 0x21
 8005cf6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2228      	movs	r2, #40	; 0x28
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f7ff f9f1 	bl	80050e8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005d06:	bf00      	nop
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b083      	sub	sp, #12
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d011      	beq.n	8005d44 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d24:	781a      	ldrb	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	1c5a      	adds	r2, r3, #1
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d5e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d02c      	beq.n	8005dc4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	691a      	ldr	r2, [r3, #16]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	b2d2      	uxtb	r2, r2
 8005d76:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d114      	bne.n	8005dc4 <I2C_SlaveReceive_RXNE+0x74>
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8005d9e:	d111      	bne.n	8005dc4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685a      	ldr	r2, [r3, #4]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dae:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2222      	movs	r2, #34	; 0x22
 8005db4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2228      	movs	r2, #40	; 0x28
 8005dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f7ff f99c 	bl	80050fc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005dc4:	bf00      	nop
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d012      	beq.n	8005e04 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	691a      	ldr	r2, [r3, #16]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de8:	b2d2      	uxtb	r2, r2
 8005dea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005e2a:	2b28      	cmp	r3, #40	; 0x28
 8005e2c:	d127      	bne.n	8005e7e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e3c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	089b      	lsrs	r3, r3, #2
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	09db      	lsrs	r3, r3, #7
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d103      	bne.n	8005e62 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	81bb      	strh	r3, [r7, #12]
 8005e60:	e002      	b.n	8005e68 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005e70:	89ba      	ldrh	r2, [r7, #12]
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	4619      	mov	r1, r3
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7ff f94a 	bl	8005110 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005e7c:	e00e      	b.n	8005e9c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60bb      	str	r3, [r7, #8]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	60bb      	str	r3, [r7, #8]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	60bb      	str	r3, [r7, #8]
 8005e92:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005e9c:	bf00      	nop
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ec2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	60bb      	str	r3, [r7, #8]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	60bb      	str	r3, [r7, #8]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f042 0201 	orr.w	r2, r2, #1
 8005ede:	601a      	str	r2, [r3, #0]
 8005ee0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ef0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005efc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f00:	d172      	bne.n	8005fe8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005f02:	7bfb      	ldrb	r3, [r7, #15]
 8005f04:	2b22      	cmp	r3, #34	; 0x22
 8005f06:	d002      	beq.n	8005f0e <I2C_Slave_STOPF+0x6a>
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
 8005f0a:	2b2a      	cmp	r3, #42	; 0x2a
 8005f0c:	d135      	bne.n	8005f7a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d005      	beq.n	8005f32 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	f043 0204 	orr.w	r2, r3, #4
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f40:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7fc ff16 	bl	8002d78 <HAL_DMA_GetState>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d049      	beq.n	8005fe6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f56:	4a69      	ldr	r2, [pc, #420]	; (80060fc <I2C_Slave_STOPF+0x258>)
 8005f58:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fc fd5e 	bl	8002a20 <HAL_DMA_Abort_IT>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d03d      	beq.n	8005fe6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f74:	4610      	mov	r0, r2
 8005f76:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f78:	e035      	b.n	8005fe6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d005      	beq.n	8005f9e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	f043 0204 	orr.w	r2, r3, #4
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fc fee0 	bl	8002d78 <HAL_DMA_GetState>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d014      	beq.n	8005fe8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc2:	4a4e      	ldr	r2, [pc, #312]	; (80060fc <I2C_Slave_STOPF+0x258>)
 8005fc4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fc fd28 	bl	8002a20 <HAL_DMA_Abort_IT>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d008      	beq.n	8005fe8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005fe0:	4610      	mov	r0, r2
 8005fe2:	4798      	blx	r3
 8005fe4:	e000      	b.n	8005fe8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005fe6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d03e      	beq.n	8006070 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	f003 0304 	and.w	r3, r3, #4
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	d112      	bne.n	8006026 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	691a      	ldr	r2, [r3, #16]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600a:	b2d2      	uxtb	r2, r2
 800600c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006012:	1c5a      	adds	r2, r3, #1
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800601c:	b29b      	uxth	r3, r3
 800601e:	3b01      	subs	r3, #1
 8006020:	b29a      	uxth	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006030:	2b40      	cmp	r3, #64	; 0x40
 8006032:	d112      	bne.n	800605a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	691a      	ldr	r2, [r3, #16]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603e:	b2d2      	uxtb	r2, r2
 8006040:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	1c5a      	adds	r2, r3, #1
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006050:	b29b      	uxth	r3, r3
 8006052:	3b01      	subs	r3, #1
 8006054:	b29a      	uxth	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800605e:	b29b      	uxth	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	d005      	beq.n	8006070 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006068:	f043 0204 	orr.w	r2, r3, #4
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006074:	2b00      	cmp	r3, #0
 8006076:	d003      	beq.n	8006080 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f8b3 	bl	80061e4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800607e:	e039      	b.n	80060f4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006080:	7bfb      	ldrb	r3, [r7, #15]
 8006082:	2b2a      	cmp	r3, #42	; 0x2a
 8006084:	d109      	bne.n	800609a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2228      	movs	r2, #40	; 0x28
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f7ff f831 	bl	80050fc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b28      	cmp	r3, #40	; 0x28
 80060a4:	d111      	bne.n	80060ca <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a15      	ldr	r2, [pc, #84]	; (8006100 <I2C_Slave_STOPF+0x25c>)
 80060aa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2220      	movs	r2, #32
 80060b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7ff f832 	bl	800512c <HAL_I2C_ListenCpltCallback>
}
 80060c8:	e014      	b.n	80060f4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ce:	2b22      	cmp	r3, #34	; 0x22
 80060d0:	d002      	beq.n	80060d8 <I2C_Slave_STOPF+0x234>
 80060d2:	7bfb      	ldrb	r3, [r7, #15]
 80060d4:	2b22      	cmp	r3, #34	; 0x22
 80060d6:	d10d      	bne.n	80060f4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2220      	movs	r2, #32
 80060e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7ff f804 	bl	80050fc <HAL_I2C_SlaveRxCpltCallback>
}
 80060f4:	bf00      	nop
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	08006679 	.word	0x08006679
 8006100:	ffff0000 	.word	0xffff0000

08006104 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006112:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006118:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	2b08      	cmp	r3, #8
 800611e:	d002      	beq.n	8006126 <I2C_Slave_AF+0x22>
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2b20      	cmp	r3, #32
 8006124:	d129      	bne.n	800617a <I2C_Slave_AF+0x76>
 8006126:	7bfb      	ldrb	r3, [r7, #15]
 8006128:	2b28      	cmp	r3, #40	; 0x28
 800612a:	d126      	bne.n	800617a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a2c      	ldr	r2, [pc, #176]	; (80061e0 <I2C_Slave_AF+0xdc>)
 8006130:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006140:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800614a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800615a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2220      	movs	r2, #32
 8006166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7fe ffda 	bl	800512c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006178:	e02e      	b.n	80061d8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800617a:	7bfb      	ldrb	r3, [r7, #15]
 800617c:	2b21      	cmp	r3, #33	; 0x21
 800617e:	d126      	bne.n	80061ce <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a17      	ldr	r2, [pc, #92]	; (80061e0 <I2C_Slave_AF+0xdc>)
 8006184:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2221      	movs	r2, #33	; 0x21
 800618a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2220      	movs	r2, #32
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061aa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061b4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061c4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7fe ff8e 	bl	80050e8 <HAL_I2C_SlaveTxCpltCallback>
}
 80061cc:	e004      	b.n	80061d8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061d6:	615a      	str	r2, [r3, #20]
}
 80061d8:	bf00      	nop
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	ffff0000 	.word	0xffff0000

080061e4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80061fc:	7bbb      	ldrb	r3, [r7, #14]
 80061fe:	2b10      	cmp	r3, #16
 8006200:	d002      	beq.n	8006208 <I2C_ITError+0x24>
 8006202:	7bbb      	ldrb	r3, [r7, #14]
 8006204:	2b40      	cmp	r3, #64	; 0x40
 8006206:	d10a      	bne.n	800621e <I2C_ITError+0x3a>
 8006208:	7bfb      	ldrb	r3, [r7, #15]
 800620a:	2b22      	cmp	r3, #34	; 0x22
 800620c:	d107      	bne.n	800621e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800621c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800621e:	7bfb      	ldrb	r3, [r7, #15]
 8006220:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006224:	2b28      	cmp	r3, #40	; 0x28
 8006226:	d107      	bne.n	8006238 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2228      	movs	r2, #40	; 0x28
 8006232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006236:	e015      	b.n	8006264 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006246:	d00a      	beq.n	800625e <I2C_ITError+0x7a>
 8006248:	7bfb      	ldrb	r3, [r7, #15]
 800624a:	2b60      	cmp	r3, #96	; 0x60
 800624c:	d007      	beq.n	800625e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2220      	movs	r2, #32
 8006252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800626e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006272:	d162      	bne.n	800633a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685a      	ldr	r2, [r3, #4]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006282:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006288:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b01      	cmp	r3, #1
 8006290:	d020      	beq.n	80062d4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006296:	4a6a      	ldr	r2, [pc, #424]	; (8006440 <I2C_ITError+0x25c>)
 8006298:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800629e:	4618      	mov	r0, r3
 80062a0:	f7fc fbbe 	bl	8002a20 <HAL_DMA_Abort_IT>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f000 8089 	beq.w	80063be <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 0201 	bic.w	r2, r2, #1
 80062ba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2220      	movs	r2, #32
 80062c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062ce:	4610      	mov	r0, r2
 80062d0:	4798      	blx	r3
 80062d2:	e074      	b.n	80063be <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d8:	4a59      	ldr	r2, [pc, #356]	; (8006440 <I2C_ITError+0x25c>)
 80062da:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fc fb9d 	bl	8002a20 <HAL_DMA_Abort_IT>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d068      	beq.n	80063be <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f6:	2b40      	cmp	r3, #64	; 0x40
 80062f8:	d10b      	bne.n	8006312 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	691a      	ldr	r2, [r3, #16]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006304:	b2d2      	uxtb	r2, r2
 8006306:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f022 0201 	bic.w	r2, r2, #1
 8006320:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2220      	movs	r2, #32
 8006326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006334:	4610      	mov	r0, r2
 8006336:	4798      	blx	r3
 8006338:	e041      	b.n	80063be <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b60      	cmp	r3, #96	; 0x60
 8006344:	d125      	bne.n	8006392 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2220      	movs	r2, #32
 800634a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635e:	2b40      	cmp	r3, #64	; 0x40
 8006360:	d10b      	bne.n	800637a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	691a      	ldr	r2, [r3, #16]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	b2d2      	uxtb	r2, r2
 800636e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	1c5a      	adds	r2, r3, #1
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f022 0201 	bic.w	r2, r2, #1
 8006388:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7fe fef6 	bl	800517c <HAL_I2C_AbortCpltCallback>
 8006390:	e015      	b.n	80063be <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800639c:	2b40      	cmp	r3, #64	; 0x40
 800639e:	d10b      	bne.n	80063b8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	691a      	ldr	r2, [r3, #16]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063aa:	b2d2      	uxtb	r2, r2
 80063ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	1c5a      	adds	r2, r3, #1
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f7fe fed5 	bl	8005168 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10e      	bne.n	80063ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d109      	bne.n	80063ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d104      	bne.n	80063ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d007      	beq.n	80063fc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80063fa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006402:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	2b04      	cmp	r3, #4
 800640e:	d113      	bne.n	8006438 <I2C_ITError+0x254>
 8006410:	7bfb      	ldrb	r3, [r7, #15]
 8006412:	2b28      	cmp	r3, #40	; 0x28
 8006414:	d110      	bne.n	8006438 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a0a      	ldr	r2, [pc, #40]	; (8006444 <I2C_ITError+0x260>)
 800641a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2220      	movs	r2, #32
 8006426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7fe fe7a 	bl	800512c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006438:	bf00      	nop
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	08006679 	.word	0x08006679
 8006444:	ffff0000 	.word	0xffff0000

08006448 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b088      	sub	sp, #32
 800644c:	af02      	add	r7, sp, #8
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	607a      	str	r2, [r7, #4]
 8006452:	603b      	str	r3, [r7, #0]
 8006454:	460b      	mov	r3, r1
 8006456:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	2b08      	cmp	r3, #8
 8006462:	d006      	beq.n	8006472 <I2C_MasterRequestWrite+0x2a>
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d003      	beq.n	8006472 <I2C_MasterRequestWrite+0x2a>
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006470:	d108      	bne.n	8006484 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	e00b      	b.n	800649c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006488:	2b12      	cmp	r3, #18
 800648a:	d107      	bne.n	800649c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800649a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	9300      	str	r3, [sp, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 f98d 	bl	80067c8 <I2C_WaitOnFlagUntilTimeout>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00d      	beq.n	80064d0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064c2:	d103      	bne.n	80064cc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e035      	b.n	800653c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064d8:	d108      	bne.n	80064ec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064da:	897b      	ldrh	r3, [r7, #10]
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	461a      	mov	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80064e8:	611a      	str	r2, [r3, #16]
 80064ea:	e01b      	b.n	8006524 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80064ec:	897b      	ldrh	r3, [r7, #10]
 80064ee:	11db      	asrs	r3, r3, #7
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	f003 0306 	and.w	r3, r3, #6
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	f063 030f 	orn	r3, r3, #15
 80064fc:	b2da      	uxtb	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	490e      	ldr	r1, [pc, #56]	; (8006544 <I2C_MasterRequestWrite+0xfc>)
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f000 f9b3 	bl	8006876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e010      	b.n	800653c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800651a:	897b      	ldrh	r3, [r7, #10]
 800651c:	b2da      	uxtb	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	4907      	ldr	r1, [pc, #28]	; (8006548 <I2C_MasterRequestWrite+0x100>)
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f000 f9a3 	bl	8006876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e000      	b.n	800653c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3718      	adds	r7, #24
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	00010008 	.word	0x00010008
 8006548:	00010002 	.word	0x00010002

0800654c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b088      	sub	sp, #32
 8006550:	af02      	add	r7, sp, #8
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	4608      	mov	r0, r1
 8006556:	4611      	mov	r1, r2
 8006558:	461a      	mov	r2, r3
 800655a:	4603      	mov	r3, r0
 800655c:	817b      	strh	r3, [r7, #10]
 800655e:	460b      	mov	r3, r1
 8006560:	813b      	strh	r3, [r7, #8]
 8006562:	4613      	mov	r3, r2
 8006564:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006574:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	2200      	movs	r2, #0
 800657e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 f920 	bl	80067c8 <I2C_WaitOnFlagUntilTimeout>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00d      	beq.n	80065aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800659c:	d103      	bne.n	80065a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e05f      	b.n	800666a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065aa:	897b      	ldrh	r3, [r7, #10]
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	461a      	mov	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	6a3a      	ldr	r2, [r7, #32]
 80065be:	492d      	ldr	r1, [pc, #180]	; (8006674 <I2C_RequestMemoryWrite+0x128>)
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 f958 	bl	8006876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d001      	beq.n	80065d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e04c      	b.n	800666a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065d0:	2300      	movs	r3, #0
 80065d2:	617b      	str	r3, [r7, #20]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	617b      	str	r3, [r7, #20]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065e8:	6a39      	ldr	r1, [r7, #32]
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f000 f9c2 	bl	8006974 <I2C_WaitOnTXEFlagUntilTimeout>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00d      	beq.n	8006612 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	2b04      	cmp	r3, #4
 80065fc:	d107      	bne.n	800660e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800660c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e02b      	b.n	800666a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006612:	88fb      	ldrh	r3, [r7, #6]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d105      	bne.n	8006624 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006618:	893b      	ldrh	r3, [r7, #8]
 800661a:	b2da      	uxtb	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	611a      	str	r2, [r3, #16]
 8006622:	e021      	b.n	8006668 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006624:	893b      	ldrh	r3, [r7, #8]
 8006626:	0a1b      	lsrs	r3, r3, #8
 8006628:	b29b      	uxth	r3, r3
 800662a:	b2da      	uxtb	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006634:	6a39      	ldr	r1, [r7, #32]
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f000 f99c 	bl	8006974 <I2C_WaitOnTXEFlagUntilTimeout>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00d      	beq.n	800665e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006646:	2b04      	cmp	r3, #4
 8006648:	d107      	bne.n	800665a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006658:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e005      	b.n	800666a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800665e:	893b      	ldrh	r3, [r7, #8]
 8006660:	b2da      	uxtb	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3718      	adds	r7, #24
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	00010002 	.word	0x00010002

08006678 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006680:	2300      	movs	r3, #0
 8006682:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006688:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006690:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006692:	4b4b      	ldr	r3, [pc, #300]	; (80067c0 <I2C_DMAAbort+0x148>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	08db      	lsrs	r3, r3, #3
 8006698:	4a4a      	ldr	r2, [pc, #296]	; (80067c4 <I2C_DMAAbort+0x14c>)
 800669a:	fba2 2303 	umull	r2, r3, r2, r3
 800669e:	0a1a      	lsrs	r2, r3, #8
 80066a0:	4613      	mov	r3, r2
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4413      	add	r3, r2
 80066a6:	00da      	lsls	r2, r3, #3
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d106      	bne.n	80066c0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b6:	f043 0220 	orr.w	r2, r3, #32
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80066be:	e00a      	b.n	80066d6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066d4:	d0ea      	beq.n	80066ac <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e2:	2200      	movs	r2, #0
 80066e4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f2:	2200      	movs	r2, #0
 80066f4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006704:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	2200      	movs	r2, #0
 800670a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006710:	2b00      	cmp	r3, #0
 8006712:	d003      	beq.n	800671c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006718:	2200      	movs	r2, #0
 800671a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006720:	2b00      	cmp	r3, #0
 8006722:	d003      	beq.n	800672c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006728:	2200      	movs	r2, #0
 800672a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 0201 	bic.w	r2, r2, #1
 800673a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b60      	cmp	r3, #96	; 0x60
 8006746:	d10e      	bne.n	8006766 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	2220      	movs	r2, #32
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	2200      	movs	r2, #0
 800675c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800675e:	6978      	ldr	r0, [r7, #20]
 8006760:	f7fe fd0c 	bl	800517c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006764:	e027      	b.n	80067b6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006766:	7cfb      	ldrb	r3, [r7, #19]
 8006768:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800676c:	2b28      	cmp	r3, #40	; 0x28
 800676e:	d117      	bne.n	80067a0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0201 	orr.w	r2, r2, #1
 800677e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800678e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	2200      	movs	r2, #0
 8006794:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	2228      	movs	r2, #40	; 0x28
 800679a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800679e:	e007      	b.n	80067b0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	2220      	movs	r2, #32
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80067b0:	6978      	ldr	r0, [r7, #20]
 80067b2:	f7fe fcd9 	bl	8005168 <HAL_I2C_ErrorCallback>
}
 80067b6:	bf00      	nop
 80067b8:	3718      	adds	r7, #24
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	200002b8 	.word	0x200002b8
 80067c4:	14f8b589 	.word	0x14f8b589

080067c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	603b      	str	r3, [r7, #0]
 80067d4:	4613      	mov	r3, r2
 80067d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067d8:	e025      	b.n	8006826 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e0:	d021      	beq.n	8006826 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067e2:	f7fb fc05 	bl	8001ff0 <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d302      	bcc.n	80067f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d116      	bne.n	8006826 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2220      	movs	r2, #32
 8006802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006812:	f043 0220 	orr.w	r2, r3, #32
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e023      	b.n	800686e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	0c1b      	lsrs	r3, r3, #16
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b01      	cmp	r3, #1
 800682e:	d10d      	bne.n	800684c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	43da      	mvns	r2, r3
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	4013      	ands	r3, r2
 800683c:	b29b      	uxth	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	bf0c      	ite	eq
 8006842:	2301      	moveq	r3, #1
 8006844:	2300      	movne	r3, #0
 8006846:	b2db      	uxtb	r3, r3
 8006848:	461a      	mov	r2, r3
 800684a:	e00c      	b.n	8006866 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	43da      	mvns	r2, r3
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	4013      	ands	r3, r2
 8006858:	b29b      	uxth	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	bf0c      	ite	eq
 800685e:	2301      	moveq	r3, #1
 8006860:	2300      	movne	r3, #0
 8006862:	b2db      	uxtb	r3, r3
 8006864:	461a      	mov	r2, r3
 8006866:	79fb      	ldrb	r3, [r7, #7]
 8006868:	429a      	cmp	r2, r3
 800686a:	d0b6      	beq.n	80067da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b084      	sub	sp, #16
 800687a:	af00      	add	r7, sp, #0
 800687c:	60f8      	str	r0, [r7, #12]
 800687e:	60b9      	str	r1, [r7, #8]
 8006880:	607a      	str	r2, [r7, #4]
 8006882:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006884:	e051      	b.n	800692a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006894:	d123      	bne.n	80068de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80068ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2220      	movs	r2, #32
 80068ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ca:	f043 0204 	orr.w	r2, r3, #4
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e046      	b.n	800696c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e4:	d021      	beq.n	800692a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068e6:	f7fb fb83 	bl	8001ff0 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d302      	bcc.n	80068fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d116      	bne.n	800692a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2220      	movs	r2, #32
 8006906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006916:	f043 0220 	orr.w	r2, r3, #32
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e020      	b.n	800696c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	0c1b      	lsrs	r3, r3, #16
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b01      	cmp	r3, #1
 8006932:	d10c      	bne.n	800694e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	43da      	mvns	r2, r3
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	4013      	ands	r3, r2
 8006940:	b29b      	uxth	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	bf14      	ite	ne
 8006946:	2301      	movne	r3, #1
 8006948:	2300      	moveq	r3, #0
 800694a:	b2db      	uxtb	r3, r3
 800694c:	e00b      	b.n	8006966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	43da      	mvns	r2, r3
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	4013      	ands	r3, r2
 800695a:	b29b      	uxth	r3, r3
 800695c:	2b00      	cmp	r3, #0
 800695e:	bf14      	ite	ne
 8006960:	2301      	movne	r3, #1
 8006962:	2300      	moveq	r3, #0
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d18d      	bne.n	8006886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006980:	e02d      	b.n	80069de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f000 f8aa 	bl	8006adc <I2C_IsAcknowledgeFailed>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d001      	beq.n	8006992 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e02d      	b.n	80069ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006998:	d021      	beq.n	80069de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800699a:	f7fb fb29 	bl	8001ff0 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d302      	bcc.n	80069b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d116      	bne.n	80069de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2220      	movs	r2, #32
 80069ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	f043 0220 	orr.w	r2, r3, #32
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e007      	b.n	80069ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	695b      	ldr	r3, [r3, #20]
 80069e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e8:	2b80      	cmp	r3, #128	; 0x80
 80069ea:	d1ca      	bne.n	8006982 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b084      	sub	sp, #16
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	60f8      	str	r0, [r7, #12]
 80069fe:	60b9      	str	r1, [r7, #8]
 8006a00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a02:	e02d      	b.n	8006a60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 f869 	bl	8006adc <I2C_IsAcknowledgeFailed>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e02d      	b.n	8006a70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1a:	d021      	beq.n	8006a60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a1c:	f7fb fae8 	bl	8001ff0 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d302      	bcc.n	8006a32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d116      	bne.n	8006a60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4c:	f043 0220 	orr.w	r2, r3, #32
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e007      	b.n	8006a70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	f003 0304 	and.w	r3, r3, #4
 8006a6a:	2b04      	cmp	r3, #4
 8006a6c:	d1ca      	bne.n	8006a04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a80:	2300      	movs	r3, #0
 8006a82:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006a84:	4b13      	ldr	r3, [pc, #76]	; (8006ad4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	08db      	lsrs	r3, r3, #3
 8006a8a:	4a13      	ldr	r2, [pc, #76]	; (8006ad8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a90:	0a1a      	lsrs	r2, r3, #8
 8006a92:	4613      	mov	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d107      	bne.n	8006ab6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aaa:	f043 0220 	orr.w	r2, r3, #32
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e008      	b.n	8006ac8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ac4:	d0e9      	beq.n	8006a9a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	200002b8 	.word	0x200002b8
 8006ad8:	14f8b589 	.word	0x14f8b589

08006adc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006af2:	d11b      	bne.n	8006b2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006afc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2220      	movs	r2, #32
 8006b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b18:	f043 0204 	orr.w	r2, r3, #4
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e000      	b.n	8006b2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	370c      	adds	r7, #12
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b083      	sub	sp, #12
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b46:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006b4a:	d103      	bne.n	8006b54 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006b52:	e007      	b.n	8006b64 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b58:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006b5c:	d102      	bne.n	8006b64 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2208      	movs	r2, #8
 8006b62:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e264      	b.n	800704c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0301 	and.w	r3, r3, #1
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d075      	beq.n	8006c7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b8e:	4ba3      	ldr	r3, [pc, #652]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f003 030c 	and.w	r3, r3, #12
 8006b96:	2b04      	cmp	r3, #4
 8006b98:	d00c      	beq.n	8006bb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b9a:	4ba0      	ldr	r3, [pc, #640]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ba2:	2b08      	cmp	r3, #8
 8006ba4:	d112      	bne.n	8006bcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ba6:	4b9d      	ldr	r3, [pc, #628]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bb2:	d10b      	bne.n	8006bcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bb4:	4b99      	ldr	r3, [pc, #612]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d05b      	beq.n	8006c78 <HAL_RCC_OscConfig+0x108>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d157      	bne.n	8006c78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e23f      	b.n	800704c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bd4:	d106      	bne.n	8006be4 <HAL_RCC_OscConfig+0x74>
 8006bd6:	4b91      	ldr	r3, [pc, #580]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a90      	ldr	r2, [pc, #576]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006be0:	6013      	str	r3, [r2, #0]
 8006be2:	e01d      	b.n	8006c20 <HAL_RCC_OscConfig+0xb0>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bec:	d10c      	bne.n	8006c08 <HAL_RCC_OscConfig+0x98>
 8006bee:	4b8b      	ldr	r3, [pc, #556]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a8a      	ldr	r2, [pc, #552]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bf8:	6013      	str	r3, [r2, #0]
 8006bfa:	4b88      	ldr	r3, [pc, #544]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a87      	ldr	r2, [pc, #540]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c04:	6013      	str	r3, [r2, #0]
 8006c06:	e00b      	b.n	8006c20 <HAL_RCC_OscConfig+0xb0>
 8006c08:	4b84      	ldr	r3, [pc, #528]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a83      	ldr	r2, [pc, #524]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c12:	6013      	str	r3, [r2, #0]
 8006c14:	4b81      	ldr	r3, [pc, #516]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a80      	ldr	r2, [pc, #512]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d013      	beq.n	8006c50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c28:	f7fb f9e2 	bl	8001ff0 <HAL_GetTick>
 8006c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c2e:	e008      	b.n	8006c42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c30:	f7fb f9de 	bl	8001ff0 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	2b64      	cmp	r3, #100	; 0x64
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e204      	b.n	800704c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c42:	4b76      	ldr	r3, [pc, #472]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d0f0      	beq.n	8006c30 <HAL_RCC_OscConfig+0xc0>
 8006c4e:	e014      	b.n	8006c7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c50:	f7fb f9ce 	bl	8001ff0 <HAL_GetTick>
 8006c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c56:	e008      	b.n	8006c6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c58:	f7fb f9ca 	bl	8001ff0 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	2b64      	cmp	r3, #100	; 0x64
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e1f0      	b.n	800704c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c6a:	4b6c      	ldr	r3, [pc, #432]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1f0      	bne.n	8006c58 <HAL_RCC_OscConfig+0xe8>
 8006c76:	e000      	b.n	8006c7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d063      	beq.n	8006d4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c86:	4b65      	ldr	r3, [pc, #404]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f003 030c 	and.w	r3, r3, #12
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00b      	beq.n	8006caa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c92:	4b62      	ldr	r3, [pc, #392]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c9a:	2b08      	cmp	r3, #8
 8006c9c:	d11c      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c9e:	4b5f      	ldr	r3, [pc, #380]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d116      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006caa:	4b5c      	ldr	r3, [pc, #368]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0302 	and.w	r3, r3, #2
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d005      	beq.n	8006cc2 <HAL_RCC_OscConfig+0x152>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d001      	beq.n	8006cc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e1c4      	b.n	800704c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cc2:	4b56      	ldr	r3, [pc, #344]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	00db      	lsls	r3, r3, #3
 8006cd0:	4952      	ldr	r1, [pc, #328]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cd6:	e03a      	b.n	8006d4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d020      	beq.n	8006d22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ce0:	4b4f      	ldr	r3, [pc, #316]	; (8006e20 <HAL_RCC_OscConfig+0x2b0>)
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce6:	f7fb f983 	bl	8001ff0 <HAL_GetTick>
 8006cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cec:	e008      	b.n	8006d00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cee:	f7fb f97f 	bl	8001ff0 <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d901      	bls.n	8006d00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e1a5      	b.n	800704c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d00:	4b46      	ldr	r3, [pc, #280]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0302 	and.w	r3, r3, #2
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d0f0      	beq.n	8006cee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d0c:	4b43      	ldr	r3, [pc, #268]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	00db      	lsls	r3, r3, #3
 8006d1a:	4940      	ldr	r1, [pc, #256]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	600b      	str	r3, [r1, #0]
 8006d20:	e015      	b.n	8006d4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d22:	4b3f      	ldr	r3, [pc, #252]	; (8006e20 <HAL_RCC_OscConfig+0x2b0>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d28:	f7fb f962 	bl	8001ff0 <HAL_GetTick>
 8006d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d2e:	e008      	b.n	8006d42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d30:	f7fb f95e 	bl	8001ff0 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d901      	bls.n	8006d42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e184      	b.n	800704c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d42:	4b36      	ldr	r3, [pc, #216]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1f0      	bne.n	8006d30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0308 	and.w	r3, r3, #8
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d030      	beq.n	8006dbc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d016      	beq.n	8006d90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d62:	4b30      	ldr	r3, [pc, #192]	; (8006e24 <HAL_RCC_OscConfig+0x2b4>)
 8006d64:	2201      	movs	r2, #1
 8006d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d68:	f7fb f942 	bl	8001ff0 <HAL_GetTick>
 8006d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d6e:	e008      	b.n	8006d82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d70:	f7fb f93e 	bl	8001ff0 <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d901      	bls.n	8006d82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e164      	b.n	800704c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d82:	4b26      	ldr	r3, [pc, #152]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d86:	f003 0302 	and.w	r3, r3, #2
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0f0      	beq.n	8006d70 <HAL_RCC_OscConfig+0x200>
 8006d8e:	e015      	b.n	8006dbc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d90:	4b24      	ldr	r3, [pc, #144]	; (8006e24 <HAL_RCC_OscConfig+0x2b4>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d96:	f7fb f92b 	bl	8001ff0 <HAL_GetTick>
 8006d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d9c:	e008      	b.n	8006db0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d9e:	f7fb f927 	bl	8001ff0 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d901      	bls.n	8006db0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e14d      	b.n	800704c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006db0:	4b1a      	ldr	r3, [pc, #104]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006db4:	f003 0302 	and.w	r3, r3, #2
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1f0      	bne.n	8006d9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0304 	and.w	r3, r3, #4
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f000 80a0 	beq.w	8006f0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dce:	4b13      	ldr	r3, [pc, #76]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10f      	bne.n	8006dfa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60bb      	str	r3, [r7, #8]
 8006dde:	4b0f      	ldr	r3, [pc, #60]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de2:	4a0e      	ldr	r2, [pc, #56]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006de8:	6413      	str	r3, [r2, #64]	; 0x40
 8006dea:	4b0c      	ldr	r3, [pc, #48]	; (8006e1c <HAL_RCC_OscConfig+0x2ac>)
 8006dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006df2:	60bb      	str	r3, [r7, #8]
 8006df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006df6:	2301      	movs	r3, #1
 8006df8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dfa:	4b0b      	ldr	r3, [pc, #44]	; (8006e28 <HAL_RCC_OscConfig+0x2b8>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d121      	bne.n	8006e4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e06:	4b08      	ldr	r3, [pc, #32]	; (8006e28 <HAL_RCC_OscConfig+0x2b8>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a07      	ldr	r2, [pc, #28]	; (8006e28 <HAL_RCC_OscConfig+0x2b8>)
 8006e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e12:	f7fb f8ed 	bl	8001ff0 <HAL_GetTick>
 8006e16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e18:	e011      	b.n	8006e3e <HAL_RCC_OscConfig+0x2ce>
 8006e1a:	bf00      	nop
 8006e1c:	40023800 	.word	0x40023800
 8006e20:	42470000 	.word	0x42470000
 8006e24:	42470e80 	.word	0x42470e80
 8006e28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e2c:	f7fb f8e0 	bl	8001ff0 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d901      	bls.n	8006e3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e106      	b.n	800704c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e3e:	4b85      	ldr	r3, [pc, #532]	; (8007054 <HAL_RCC_OscConfig+0x4e4>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d0f0      	beq.n	8006e2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d106      	bne.n	8006e60 <HAL_RCC_OscConfig+0x2f0>
 8006e52:	4b81      	ldr	r3, [pc, #516]	; (8007058 <HAL_RCC_OscConfig+0x4e8>)
 8006e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e56:	4a80      	ldr	r2, [pc, #512]	; (8007058 <HAL_RCC_OscConfig+0x4e8>)
 8006e58:	f043 0301 	orr.w	r3, r3, #1
 8006e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e5e:	e01c      	b.n	8006e9a <HAL_RCC_OscConfig+0x32a>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	2b05      	cmp	r3, #5
 8006e66:	d10c      	bne.n	8006e82 <HAL_RCC_OscConfig+0x312>
 8006e68:	4b7b      	ldr	r3, [pc, #492]	; (8007058 <HAL_RCC_OscConfig+0x4e8>)
 8006e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e6c:	4a7a      	ldr	r2, [pc, #488]	; (8007058 <HAL_RCC_OscConfig+0x4e8>)
 8006e6e:	f043 0304 	orr.w	r3, r3, #4
 8006e72:	6713      	str	r3, [r2, #112]	; 0x70
 8006e74:	4b78      	ldr	r3, [pc, #480]	; (8007058 <HAL_RCC_OscConfig+0x4e8>)
 8006e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e78:	4a77      	ldr	r2, [pc, #476]	; (8007058 <HAL_RCC_OscConfig+0x4e8>)
 8006e7a:	f043 0301 	orr.w	r3, r3, #1
 8006e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8006e80:	e00b      	b.n	8006e9a <HAL_RCC_OscConfig+0x32a>
 8006e82:	4b75      	ldr	r3, [pc, #468]	; (8007058 <HAL_RCC_OscConfig+0x4e8>)
 8006e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e86:	4a74      	ldr	r2, [pc, #464]	; (8007058 <HAL_RCC_OscConfig+0x4e8>)
 8006e88:	f023 0301 	bic.w	r3, r3, #1
 8006e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e8e:	4b72      	ldr	r3, [pc, #456]	; (8007058 <HAL_RCC_OscConfig+0x4e8>)
 8006e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e92:	4a71      	ldr	r2, [pc, #452]	; (8007058 <HAL_RCC_OscConfig+0x4e8>)
 8006e94:	f023 0304 	bic.w	r3, r3, #4
 8006e98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d015      	beq.n	8006ece <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ea2:	f7fb f8a5 	bl	8001ff0 <HAL_GetTick>
 8006ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ea8:	e00a      	b.n	8006ec0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006eaa:	f7fb f8a1 	bl	8001ff0 <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d901      	bls.n	8006ec0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e0c5      	b.n	800704c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ec0:	4b65      	ldr	r3, [pc, #404]	; (8007058 <HAL_RCC_OscConfig+0x4e8>)
 8006ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec4:	f003 0302 	and.w	r3, r3, #2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d0ee      	beq.n	8006eaa <HAL_RCC_OscConfig+0x33a>
 8006ecc:	e014      	b.n	8006ef8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ece:	f7fb f88f 	bl	8001ff0 <HAL_GetTick>
 8006ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ed4:	e00a      	b.n	8006eec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ed6:	f7fb f88b 	bl	8001ff0 <HAL_GetTick>
 8006eda:	4602      	mov	r2, r0
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d901      	bls.n	8006eec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e0af      	b.n	800704c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006eec:	4b5a      	ldr	r3, [pc, #360]	; (8007058 <HAL_RCC_OscConfig+0x4e8>)
 8006eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef0:	f003 0302 	and.w	r3, r3, #2
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1ee      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ef8:	7dfb      	ldrb	r3, [r7, #23]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d105      	bne.n	8006f0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006efe:	4b56      	ldr	r3, [pc, #344]	; (8007058 <HAL_RCC_OscConfig+0x4e8>)
 8006f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f02:	4a55      	ldr	r2, [pc, #340]	; (8007058 <HAL_RCC_OscConfig+0x4e8>)
 8006f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f000 809b 	beq.w	800704a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f14:	4b50      	ldr	r3, [pc, #320]	; (8007058 <HAL_RCC_OscConfig+0x4e8>)
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f003 030c 	and.w	r3, r3, #12
 8006f1c:	2b08      	cmp	r3, #8
 8006f1e:	d05c      	beq.n	8006fda <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d141      	bne.n	8006fac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f28:	4b4c      	ldr	r3, [pc, #304]	; (800705c <HAL_RCC_OscConfig+0x4ec>)
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f2e:	f7fb f85f 	bl	8001ff0 <HAL_GetTick>
 8006f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f34:	e008      	b.n	8006f48 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f36:	f7fb f85b 	bl	8001ff0 <HAL_GetTick>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d901      	bls.n	8006f48 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e081      	b.n	800704c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f48:	4b43      	ldr	r3, [pc, #268]	; (8007058 <HAL_RCC_OscConfig+0x4e8>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1f0      	bne.n	8006f36 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	69da      	ldr	r2, [r3, #28]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a1b      	ldr	r3, [r3, #32]
 8006f5c:	431a      	orrs	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f62:	019b      	lsls	r3, r3, #6
 8006f64:	431a      	orrs	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f6a:	085b      	lsrs	r3, r3, #1
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	041b      	lsls	r3, r3, #16
 8006f70:	431a      	orrs	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f76:	061b      	lsls	r3, r3, #24
 8006f78:	4937      	ldr	r1, [pc, #220]	; (8007058 <HAL_RCC_OscConfig+0x4e8>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f7e:	4b37      	ldr	r3, [pc, #220]	; (800705c <HAL_RCC_OscConfig+0x4ec>)
 8006f80:	2201      	movs	r2, #1
 8006f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f84:	f7fb f834 	bl	8001ff0 <HAL_GetTick>
 8006f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f8a:	e008      	b.n	8006f9e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f8c:	f7fb f830 	bl	8001ff0 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d901      	bls.n	8006f9e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e056      	b.n	800704c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f9e:	4b2e      	ldr	r3, [pc, #184]	; (8007058 <HAL_RCC_OscConfig+0x4e8>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d0f0      	beq.n	8006f8c <HAL_RCC_OscConfig+0x41c>
 8006faa:	e04e      	b.n	800704a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fac:	4b2b      	ldr	r3, [pc, #172]	; (800705c <HAL_RCC_OscConfig+0x4ec>)
 8006fae:	2200      	movs	r2, #0
 8006fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fb2:	f7fb f81d 	bl	8001ff0 <HAL_GetTick>
 8006fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fb8:	e008      	b.n	8006fcc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fba:	f7fb f819 	bl	8001ff0 <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d901      	bls.n	8006fcc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e03f      	b.n	800704c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fcc:	4b22      	ldr	r3, [pc, #136]	; (8007058 <HAL_RCC_OscConfig+0x4e8>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1f0      	bne.n	8006fba <HAL_RCC_OscConfig+0x44a>
 8006fd8:	e037      	b.n	800704a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d101      	bne.n	8006fe6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e032      	b.n	800704c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006fe6:	4b1c      	ldr	r3, [pc, #112]	; (8007058 <HAL_RCC_OscConfig+0x4e8>)
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d028      	beq.n	8007046 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d121      	bne.n	8007046 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800700c:	429a      	cmp	r2, r3
 800700e:	d11a      	bne.n	8007046 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007016:	4013      	ands	r3, r2
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800701c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800701e:	4293      	cmp	r3, r2
 8007020:	d111      	bne.n	8007046 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702c:	085b      	lsrs	r3, r3, #1
 800702e:	3b01      	subs	r3, #1
 8007030:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007032:	429a      	cmp	r2, r3
 8007034:	d107      	bne.n	8007046 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007040:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007042:	429a      	cmp	r2, r3
 8007044:	d001      	beq.n	800704a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e000      	b.n	800704c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3718      	adds	r7, #24
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	40007000 	.word	0x40007000
 8007058:	40023800 	.word	0x40023800
 800705c:	42470060 	.word	0x42470060

08007060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d101      	bne.n	8007074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e0cc      	b.n	800720e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007074:	4b68      	ldr	r3, [pc, #416]	; (8007218 <HAL_RCC_ClockConfig+0x1b8>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0307 	and.w	r3, r3, #7
 800707c:	683a      	ldr	r2, [r7, #0]
 800707e:	429a      	cmp	r2, r3
 8007080:	d90c      	bls.n	800709c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007082:	4b65      	ldr	r3, [pc, #404]	; (8007218 <HAL_RCC_ClockConfig+0x1b8>)
 8007084:	683a      	ldr	r2, [r7, #0]
 8007086:	b2d2      	uxtb	r2, r2
 8007088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800708a:	4b63      	ldr	r3, [pc, #396]	; (8007218 <HAL_RCC_ClockConfig+0x1b8>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0307 	and.w	r3, r3, #7
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	429a      	cmp	r2, r3
 8007096:	d001      	beq.n	800709c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e0b8      	b.n	800720e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0302 	and.w	r3, r3, #2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d020      	beq.n	80070ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0304 	and.w	r3, r3, #4
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d005      	beq.n	80070c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070b4:	4b59      	ldr	r3, [pc, #356]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	4a58      	ldr	r2, [pc, #352]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80070ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80070be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0308 	and.w	r3, r3, #8
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d005      	beq.n	80070d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070cc:	4b53      	ldr	r3, [pc, #332]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	4a52      	ldr	r2, [pc, #328]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80070d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80070d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070d8:	4b50      	ldr	r3, [pc, #320]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	494d      	ldr	r1, [pc, #308]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d044      	beq.n	8007180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d107      	bne.n	800710e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070fe:	4b47      	ldr	r3, [pc, #284]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d119      	bne.n	800713e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e07f      	b.n	800720e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	2b02      	cmp	r3, #2
 8007114:	d003      	beq.n	800711e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800711a:	2b03      	cmp	r3, #3
 800711c:	d107      	bne.n	800712e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800711e:	4b3f      	ldr	r3, [pc, #252]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d109      	bne.n	800713e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e06f      	b.n	800720e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800712e:	4b3b      	ldr	r3, [pc, #236]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0302 	and.w	r3, r3, #2
 8007136:	2b00      	cmp	r3, #0
 8007138:	d101      	bne.n	800713e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e067      	b.n	800720e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800713e:	4b37      	ldr	r3, [pc, #220]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f023 0203 	bic.w	r2, r3, #3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	4934      	ldr	r1, [pc, #208]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 800714c:	4313      	orrs	r3, r2
 800714e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007150:	f7fa ff4e 	bl	8001ff0 <HAL_GetTick>
 8007154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007156:	e00a      	b.n	800716e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007158:	f7fa ff4a 	bl	8001ff0 <HAL_GetTick>
 800715c:	4602      	mov	r2, r0
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	f241 3288 	movw	r2, #5000	; 0x1388
 8007166:	4293      	cmp	r3, r2
 8007168:	d901      	bls.n	800716e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e04f      	b.n	800720e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800716e:	4b2b      	ldr	r3, [pc, #172]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f003 020c 	and.w	r2, r3, #12
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	429a      	cmp	r2, r3
 800717e:	d1eb      	bne.n	8007158 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007180:	4b25      	ldr	r3, [pc, #148]	; (8007218 <HAL_RCC_ClockConfig+0x1b8>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0307 	and.w	r3, r3, #7
 8007188:	683a      	ldr	r2, [r7, #0]
 800718a:	429a      	cmp	r2, r3
 800718c:	d20c      	bcs.n	80071a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800718e:	4b22      	ldr	r3, [pc, #136]	; (8007218 <HAL_RCC_ClockConfig+0x1b8>)
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	b2d2      	uxtb	r2, r2
 8007194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007196:	4b20      	ldr	r3, [pc, #128]	; (8007218 <HAL_RCC_ClockConfig+0x1b8>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0307 	and.w	r3, r3, #7
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d001      	beq.n	80071a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e032      	b.n	800720e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0304 	and.w	r3, r3, #4
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d008      	beq.n	80071c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071b4:	4b19      	ldr	r3, [pc, #100]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	4916      	ldr	r1, [pc, #88]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0308 	and.w	r3, r3, #8
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d009      	beq.n	80071e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071d2:	4b12      	ldr	r3, [pc, #72]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	00db      	lsls	r3, r3, #3
 80071e0:	490e      	ldr	r1, [pc, #56]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80071e6:	f000 f889 	bl	80072fc <HAL_RCC_GetSysClockFreq>
 80071ea:	4602      	mov	r2, r0
 80071ec:	4b0b      	ldr	r3, [pc, #44]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	091b      	lsrs	r3, r3, #4
 80071f2:	f003 030f 	and.w	r3, r3, #15
 80071f6:	490a      	ldr	r1, [pc, #40]	; (8007220 <HAL_RCC_ClockConfig+0x1c0>)
 80071f8:	5ccb      	ldrb	r3, [r1, r3]
 80071fa:	fa22 f303 	lsr.w	r3, r2, r3
 80071fe:	4a09      	ldr	r2, [pc, #36]	; (8007224 <HAL_RCC_ClockConfig+0x1c4>)
 8007200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007202:	4b09      	ldr	r3, [pc, #36]	; (8007228 <HAL_RCC_ClockConfig+0x1c8>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4618      	mov	r0, r3
 8007208:	f7fa feae 	bl	8001f68 <HAL_InitTick>

  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	40023c00 	.word	0x40023c00
 800721c:	40023800 	.word	0x40023800
 8007220:	080091c0 	.word	0x080091c0
 8007224:	200002b8 	.word	0x200002b8
 8007228:	200002bc 	.word	0x200002bc

0800722c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b08c      	sub	sp, #48	; 0x30
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d129      	bne.n	8007292 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800723e:	2300      	movs	r3, #0
 8007240:	61bb      	str	r3, [r7, #24]
 8007242:	4b2b      	ldr	r3, [pc, #172]	; (80072f0 <HAL_RCC_MCOConfig+0xc4>)
 8007244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007246:	4a2a      	ldr	r2, [pc, #168]	; (80072f0 <HAL_RCC_MCOConfig+0xc4>)
 8007248:	f043 0301 	orr.w	r3, r3, #1
 800724c:	6313      	str	r3, [r2, #48]	; 0x30
 800724e:	4b28      	ldr	r3, [pc, #160]	; (80072f0 <HAL_RCC_MCOConfig+0xc4>)
 8007250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	61bb      	str	r3, [r7, #24]
 8007258:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800725a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800725e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007260:	2302      	movs	r3, #2
 8007262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007264:	2303      	movs	r3, #3
 8007266:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007268:	2300      	movs	r3, #0
 800726a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800726c:	2300      	movs	r3, #0
 800726e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007270:	f107 031c 	add.w	r3, r7, #28
 8007274:	4619      	mov	r1, r3
 8007276:	481f      	ldr	r0, [pc, #124]	; (80072f4 <HAL_RCC_MCOConfig+0xc8>)
 8007278:	f7fc fff4 	bl	8004264 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800727c:	4b1c      	ldr	r3, [pc, #112]	; (80072f0 <HAL_RCC_MCOConfig+0xc4>)
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8007284:	68b9      	ldr	r1, [r7, #8]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	430b      	orrs	r3, r1
 800728a:	4919      	ldr	r1, [pc, #100]	; (80072f0 <HAL_RCC_MCOConfig+0xc4>)
 800728c:	4313      	orrs	r3, r2
 800728e:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8007290:	e029      	b.n	80072e6 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8007292:	2300      	movs	r3, #0
 8007294:	617b      	str	r3, [r7, #20]
 8007296:	4b16      	ldr	r3, [pc, #88]	; (80072f0 <HAL_RCC_MCOConfig+0xc4>)
 8007298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729a:	4a15      	ldr	r2, [pc, #84]	; (80072f0 <HAL_RCC_MCOConfig+0xc4>)
 800729c:	f043 0304 	orr.w	r3, r3, #4
 80072a0:	6313      	str	r3, [r2, #48]	; 0x30
 80072a2:	4b13      	ldr	r3, [pc, #76]	; (80072f0 <HAL_RCC_MCOConfig+0xc4>)
 80072a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a6:	f003 0304 	and.w	r3, r3, #4
 80072aa:	617b      	str	r3, [r7, #20]
 80072ac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80072ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072b4:	2302      	movs	r3, #2
 80072b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072b8:	2303      	movs	r3, #3
 80072ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072bc:	2300      	movs	r3, #0
 80072be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80072c0:	2300      	movs	r3, #0
 80072c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80072c4:	f107 031c 	add.w	r3, r7, #28
 80072c8:	4619      	mov	r1, r3
 80072ca:	480b      	ldr	r0, [pc, #44]	; (80072f8 <HAL_RCC_MCOConfig+0xcc>)
 80072cc:	f7fc ffca 	bl	8004264 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80072d0:	4b07      	ldr	r3, [pc, #28]	; (80072f0 <HAL_RCC_MCOConfig+0xc4>)
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	00d9      	lsls	r1, r3, #3
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	430b      	orrs	r3, r1
 80072e0:	4903      	ldr	r1, [pc, #12]	; (80072f0 <HAL_RCC_MCOConfig+0xc4>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	608b      	str	r3, [r1, #8]
}
 80072e6:	bf00      	nop
 80072e8:	3730      	adds	r7, #48	; 0x30
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	40023800 	.word	0x40023800
 80072f4:	40020000 	.word	0x40020000
 80072f8:	40020800 	.word	0x40020800

080072fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007300:	b084      	sub	sp, #16
 8007302:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007304:	2300      	movs	r3, #0
 8007306:	607b      	str	r3, [r7, #4]
 8007308:	2300      	movs	r3, #0
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	2300      	movs	r3, #0
 800730e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007310:	2300      	movs	r3, #0
 8007312:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007314:	4b67      	ldr	r3, [pc, #412]	; (80074b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f003 030c 	and.w	r3, r3, #12
 800731c:	2b08      	cmp	r3, #8
 800731e:	d00d      	beq.n	800733c <HAL_RCC_GetSysClockFreq+0x40>
 8007320:	2b08      	cmp	r3, #8
 8007322:	f200 80bd 	bhi.w	80074a0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007326:	2b00      	cmp	r3, #0
 8007328:	d002      	beq.n	8007330 <HAL_RCC_GetSysClockFreq+0x34>
 800732a:	2b04      	cmp	r3, #4
 800732c:	d003      	beq.n	8007336 <HAL_RCC_GetSysClockFreq+0x3a>
 800732e:	e0b7      	b.n	80074a0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007330:	4b61      	ldr	r3, [pc, #388]	; (80074b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007332:	60bb      	str	r3, [r7, #8]
       break;
 8007334:	e0b7      	b.n	80074a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007336:	4b61      	ldr	r3, [pc, #388]	; (80074bc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007338:	60bb      	str	r3, [r7, #8]
      break;
 800733a:	e0b4      	b.n	80074a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800733c:	4b5d      	ldr	r3, [pc, #372]	; (80074b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007344:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007346:	4b5b      	ldr	r3, [pc, #364]	; (80074b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800734e:	2b00      	cmp	r3, #0
 8007350:	d04d      	beq.n	80073ee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007352:	4b58      	ldr	r3, [pc, #352]	; (80074b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	099b      	lsrs	r3, r3, #6
 8007358:	461a      	mov	r2, r3
 800735a:	f04f 0300 	mov.w	r3, #0
 800735e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007362:	f04f 0100 	mov.w	r1, #0
 8007366:	ea02 0800 	and.w	r8, r2, r0
 800736a:	ea03 0901 	and.w	r9, r3, r1
 800736e:	4640      	mov	r0, r8
 8007370:	4649      	mov	r1, r9
 8007372:	f04f 0200 	mov.w	r2, #0
 8007376:	f04f 0300 	mov.w	r3, #0
 800737a:	014b      	lsls	r3, r1, #5
 800737c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007380:	0142      	lsls	r2, r0, #5
 8007382:	4610      	mov	r0, r2
 8007384:	4619      	mov	r1, r3
 8007386:	ebb0 0008 	subs.w	r0, r0, r8
 800738a:	eb61 0109 	sbc.w	r1, r1, r9
 800738e:	f04f 0200 	mov.w	r2, #0
 8007392:	f04f 0300 	mov.w	r3, #0
 8007396:	018b      	lsls	r3, r1, #6
 8007398:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800739c:	0182      	lsls	r2, r0, #6
 800739e:	1a12      	subs	r2, r2, r0
 80073a0:	eb63 0301 	sbc.w	r3, r3, r1
 80073a4:	f04f 0000 	mov.w	r0, #0
 80073a8:	f04f 0100 	mov.w	r1, #0
 80073ac:	00d9      	lsls	r1, r3, #3
 80073ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80073b2:	00d0      	lsls	r0, r2, #3
 80073b4:	4602      	mov	r2, r0
 80073b6:	460b      	mov	r3, r1
 80073b8:	eb12 0208 	adds.w	r2, r2, r8
 80073bc:	eb43 0309 	adc.w	r3, r3, r9
 80073c0:	f04f 0000 	mov.w	r0, #0
 80073c4:	f04f 0100 	mov.w	r1, #0
 80073c8:	0259      	lsls	r1, r3, #9
 80073ca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80073ce:	0250      	lsls	r0, r2, #9
 80073d0:	4602      	mov	r2, r0
 80073d2:	460b      	mov	r3, r1
 80073d4:	4610      	mov	r0, r2
 80073d6:	4619      	mov	r1, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	461a      	mov	r2, r3
 80073dc:	f04f 0300 	mov.w	r3, #0
 80073e0:	f7f8 fef2 	bl	80001c8 <__aeabi_uldivmod>
 80073e4:	4602      	mov	r2, r0
 80073e6:	460b      	mov	r3, r1
 80073e8:	4613      	mov	r3, r2
 80073ea:	60fb      	str	r3, [r7, #12]
 80073ec:	e04a      	b.n	8007484 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073ee:	4b31      	ldr	r3, [pc, #196]	; (80074b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	099b      	lsrs	r3, r3, #6
 80073f4:	461a      	mov	r2, r3
 80073f6:	f04f 0300 	mov.w	r3, #0
 80073fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80073fe:	f04f 0100 	mov.w	r1, #0
 8007402:	ea02 0400 	and.w	r4, r2, r0
 8007406:	ea03 0501 	and.w	r5, r3, r1
 800740a:	4620      	mov	r0, r4
 800740c:	4629      	mov	r1, r5
 800740e:	f04f 0200 	mov.w	r2, #0
 8007412:	f04f 0300 	mov.w	r3, #0
 8007416:	014b      	lsls	r3, r1, #5
 8007418:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800741c:	0142      	lsls	r2, r0, #5
 800741e:	4610      	mov	r0, r2
 8007420:	4619      	mov	r1, r3
 8007422:	1b00      	subs	r0, r0, r4
 8007424:	eb61 0105 	sbc.w	r1, r1, r5
 8007428:	f04f 0200 	mov.w	r2, #0
 800742c:	f04f 0300 	mov.w	r3, #0
 8007430:	018b      	lsls	r3, r1, #6
 8007432:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007436:	0182      	lsls	r2, r0, #6
 8007438:	1a12      	subs	r2, r2, r0
 800743a:	eb63 0301 	sbc.w	r3, r3, r1
 800743e:	f04f 0000 	mov.w	r0, #0
 8007442:	f04f 0100 	mov.w	r1, #0
 8007446:	00d9      	lsls	r1, r3, #3
 8007448:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800744c:	00d0      	lsls	r0, r2, #3
 800744e:	4602      	mov	r2, r0
 8007450:	460b      	mov	r3, r1
 8007452:	1912      	adds	r2, r2, r4
 8007454:	eb45 0303 	adc.w	r3, r5, r3
 8007458:	f04f 0000 	mov.w	r0, #0
 800745c:	f04f 0100 	mov.w	r1, #0
 8007460:	0299      	lsls	r1, r3, #10
 8007462:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007466:	0290      	lsls	r0, r2, #10
 8007468:	4602      	mov	r2, r0
 800746a:	460b      	mov	r3, r1
 800746c:	4610      	mov	r0, r2
 800746e:	4619      	mov	r1, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	461a      	mov	r2, r3
 8007474:	f04f 0300 	mov.w	r3, #0
 8007478:	f7f8 fea6 	bl	80001c8 <__aeabi_uldivmod>
 800747c:	4602      	mov	r2, r0
 800747e:	460b      	mov	r3, r1
 8007480:	4613      	mov	r3, r2
 8007482:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007484:	4b0b      	ldr	r3, [pc, #44]	; (80074b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	0c1b      	lsrs	r3, r3, #16
 800748a:	f003 0303 	and.w	r3, r3, #3
 800748e:	3301      	adds	r3, #1
 8007490:	005b      	lsls	r3, r3, #1
 8007492:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	fbb2 f3f3 	udiv	r3, r2, r3
 800749c:	60bb      	str	r3, [r7, #8]
      break;
 800749e:	e002      	b.n	80074a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80074a0:	4b05      	ldr	r3, [pc, #20]	; (80074b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80074a2:	60bb      	str	r3, [r7, #8]
      break;
 80074a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074a6:	68bb      	ldr	r3, [r7, #8]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80074b2:	bf00      	nop
 80074b4:	40023800 	.word	0x40023800
 80074b8:	00f42400 	.word	0x00f42400
 80074bc:	007a1200 	.word	0x007a1200

080074c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074c0:	b480      	push	{r7}
 80074c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80074c4:	4b03      	ldr	r3, [pc, #12]	; (80074d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80074c6:	681b      	ldr	r3, [r3, #0]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	200002b8 	.word	0x200002b8

080074d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80074dc:	f7ff fff0 	bl	80074c0 <HAL_RCC_GetHCLKFreq>
 80074e0:	4602      	mov	r2, r0
 80074e2:	4b05      	ldr	r3, [pc, #20]	; (80074f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	0a9b      	lsrs	r3, r3, #10
 80074e8:	f003 0307 	and.w	r3, r3, #7
 80074ec:	4903      	ldr	r1, [pc, #12]	; (80074fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80074ee:	5ccb      	ldrb	r3, [r1, r3]
 80074f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	40023800 	.word	0x40023800
 80074fc:	080091d0 	.word	0x080091d0

08007500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007504:	f7ff ffdc 	bl	80074c0 <HAL_RCC_GetHCLKFreq>
 8007508:	4602      	mov	r2, r0
 800750a:	4b05      	ldr	r3, [pc, #20]	; (8007520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	0b5b      	lsrs	r3, r3, #13
 8007510:	f003 0307 	and.w	r3, r3, #7
 8007514:	4903      	ldr	r1, [pc, #12]	; (8007524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007516:	5ccb      	ldrb	r3, [r1, r3]
 8007518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800751c:	4618      	mov	r0, r3
 800751e:	bd80      	pop	{r7, pc}
 8007520:	40023800 	.word	0x40023800
 8007524:	080091d0 	.word	0x080091d0

08007528 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e07b      	b.n	8007632 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753e:	2b00      	cmp	r3, #0
 8007540:	d108      	bne.n	8007554 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800754a:	d009      	beq.n	8007560 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	61da      	str	r2, [r3, #28]
 8007552:	e005      	b.n	8007560 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	d106      	bne.n	8007580 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7fa fb60 	bl	8001c40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2202      	movs	r2, #2
 8007584:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007596:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80075a8:	431a      	orrs	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075b2:	431a      	orrs	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	f003 0302 	and.w	r3, r3, #2
 80075bc:	431a      	orrs	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	431a      	orrs	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075d0:	431a      	orrs	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	69db      	ldr	r3, [r3, #28]
 80075d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075da:	431a      	orrs	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a1b      	ldr	r3, [r3, #32]
 80075e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075e4:	ea42 0103 	orr.w	r1, r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	430a      	orrs	r2, r1
 80075f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	0c1b      	lsrs	r3, r3, #16
 80075fe:	f003 0104 	and.w	r1, r3, #4
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007606:	f003 0210 	and.w	r2, r3, #16
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	69da      	ldr	r2, [r3, #28]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007620:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3708      	adds	r7, #8
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b088      	sub	sp, #32
 800763e:	af00      	add	r7, sp, #0
 8007640:	60f8      	str	r0, [r7, #12]
 8007642:	60b9      	str	r1, [r7, #8]
 8007644:	603b      	str	r3, [r7, #0]
 8007646:	4613      	mov	r3, r2
 8007648:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007654:	2b01      	cmp	r3, #1
 8007656:	d101      	bne.n	800765c <HAL_SPI_Transmit+0x22>
 8007658:	2302      	movs	r3, #2
 800765a:	e126      	b.n	80078aa <HAL_SPI_Transmit+0x270>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007664:	f7fa fcc4 	bl	8001ff0 <HAL_GetTick>
 8007668:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800766a:	88fb      	ldrh	r3, [r7, #6]
 800766c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b01      	cmp	r3, #1
 8007678:	d002      	beq.n	8007680 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800767a:	2302      	movs	r3, #2
 800767c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800767e:	e10b      	b.n	8007898 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d002      	beq.n	800768c <HAL_SPI_Transmit+0x52>
 8007686:	88fb      	ldrh	r3, [r7, #6]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d102      	bne.n	8007692 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007690:	e102      	b.n	8007898 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2203      	movs	r2, #3
 8007696:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	88fa      	ldrh	r2, [r7, #6]
 80076aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	88fa      	ldrh	r2, [r7, #6]
 80076b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076d8:	d10f      	bne.n	80076fa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007704:	2b40      	cmp	r3, #64	; 0x40
 8007706:	d007      	beq.n	8007718 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007716:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007720:	d14b      	bne.n	80077ba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d002      	beq.n	8007730 <HAL_SPI_Transmit+0xf6>
 800772a:	8afb      	ldrh	r3, [r7, #22]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d13e      	bne.n	80077ae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007734:	881a      	ldrh	r2, [r3, #0]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007740:	1c9a      	adds	r2, r3, #2
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800774a:	b29b      	uxth	r3, r3
 800774c:	3b01      	subs	r3, #1
 800774e:	b29a      	uxth	r2, r3
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007754:	e02b      	b.n	80077ae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f003 0302 	and.w	r3, r3, #2
 8007760:	2b02      	cmp	r3, #2
 8007762:	d112      	bne.n	800778a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007768:	881a      	ldrh	r2, [r3, #0]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007774:	1c9a      	adds	r2, r3, #2
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800777e:	b29b      	uxth	r3, r3
 8007780:	3b01      	subs	r3, #1
 8007782:	b29a      	uxth	r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	86da      	strh	r2, [r3, #54]	; 0x36
 8007788:	e011      	b.n	80077ae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800778a:	f7fa fc31 	bl	8001ff0 <HAL_GetTick>
 800778e:	4602      	mov	r2, r0
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	1ad3      	subs	r3, r2, r3
 8007794:	683a      	ldr	r2, [r7, #0]
 8007796:	429a      	cmp	r2, r3
 8007798:	d803      	bhi.n	80077a2 <HAL_SPI_Transmit+0x168>
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a0:	d102      	bne.n	80077a8 <HAL_SPI_Transmit+0x16e>
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d102      	bne.n	80077ae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80077ac:	e074      	b.n	8007898 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1ce      	bne.n	8007756 <HAL_SPI_Transmit+0x11c>
 80077b8:	e04c      	b.n	8007854 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d002      	beq.n	80077c8 <HAL_SPI_Transmit+0x18e>
 80077c2:	8afb      	ldrh	r3, [r7, #22]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d140      	bne.n	800784a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	330c      	adds	r3, #12
 80077d2:	7812      	ldrb	r2, [r2, #0]
 80077d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	3b01      	subs	r3, #1
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80077ee:	e02c      	b.n	800784a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f003 0302 	and.w	r3, r3, #2
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d113      	bne.n	8007826 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	330c      	adds	r3, #12
 8007808:	7812      	ldrb	r2, [r2, #0]
 800780a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007810:	1c5a      	adds	r2, r3, #1
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800781a:	b29b      	uxth	r3, r3
 800781c:	3b01      	subs	r3, #1
 800781e:	b29a      	uxth	r2, r3
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	86da      	strh	r2, [r3, #54]	; 0x36
 8007824:	e011      	b.n	800784a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007826:	f7fa fbe3 	bl	8001ff0 <HAL_GetTick>
 800782a:	4602      	mov	r2, r0
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	683a      	ldr	r2, [r7, #0]
 8007832:	429a      	cmp	r2, r3
 8007834:	d803      	bhi.n	800783e <HAL_SPI_Transmit+0x204>
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800783c:	d102      	bne.n	8007844 <HAL_SPI_Transmit+0x20a>
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d102      	bne.n	800784a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007848:	e026      	b.n	8007898 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800784e:	b29b      	uxth	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1cd      	bne.n	80077f0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007854:	69ba      	ldr	r2, [r7, #24]
 8007856:	6839      	ldr	r1, [r7, #0]
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f000 fa63 	bl	8007d24 <SPI_EndRxTxTransaction>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d002      	beq.n	800786a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2220      	movs	r2, #32
 8007868:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10a      	bne.n	8007888 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007872:	2300      	movs	r3, #0
 8007874:	613b      	str	r3, [r7, #16]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	613b      	str	r3, [r7, #16]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	613b      	str	r3, [r7, #16]
 8007886:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800788c:	2b00      	cmp	r3, #0
 800788e:	d002      	beq.n	8007896 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	77fb      	strb	r3, [r7, #31]
 8007894:	e000      	b.n	8007898 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007896:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80078a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3720      	adds	r7, #32
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b08c      	sub	sp, #48	; 0x30
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	60f8      	str	r0, [r7, #12]
 80078ba:	60b9      	str	r1, [r7, #8]
 80078bc:	607a      	str	r2, [r7, #4]
 80078be:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80078c0:	2301      	movs	r3, #1
 80078c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80078c4:	2300      	movs	r3, #0
 80078c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d101      	bne.n	80078d8 <HAL_SPI_TransmitReceive+0x26>
 80078d4:	2302      	movs	r3, #2
 80078d6:	e18a      	b.n	8007bee <HAL_SPI_TransmitReceive+0x33c>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078e0:	f7fa fb86 	bl	8001ff0 <HAL_GetTick>
 80078e4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80078f6:	887b      	ldrh	r3, [r7, #2]
 80078f8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80078fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d00f      	beq.n	8007922 <HAL_SPI_TransmitReceive+0x70>
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007908:	d107      	bne.n	800791a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d103      	bne.n	800791a <HAL_SPI_TransmitReceive+0x68>
 8007912:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007916:	2b04      	cmp	r3, #4
 8007918:	d003      	beq.n	8007922 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800791a:	2302      	movs	r3, #2
 800791c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007920:	e15b      	b.n	8007bda <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d005      	beq.n	8007934 <HAL_SPI_TransmitReceive+0x82>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d002      	beq.n	8007934 <HAL_SPI_TransmitReceive+0x82>
 800792e:	887b      	ldrh	r3, [r7, #2]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d103      	bne.n	800793c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800793a:	e14e      	b.n	8007bda <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007942:	b2db      	uxtb	r3, r3
 8007944:	2b04      	cmp	r3, #4
 8007946:	d003      	beq.n	8007950 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2205      	movs	r2, #5
 800794c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	887a      	ldrh	r2, [r7, #2]
 8007960:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	887a      	ldrh	r2, [r7, #2]
 8007966:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	887a      	ldrh	r2, [r7, #2]
 8007972:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	887a      	ldrh	r2, [r7, #2]
 8007978:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007990:	2b40      	cmp	r3, #64	; 0x40
 8007992:	d007      	beq.n	80079a4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079ac:	d178      	bne.n	8007aa0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d002      	beq.n	80079bc <HAL_SPI_TransmitReceive+0x10a>
 80079b6:	8b7b      	ldrh	r3, [r7, #26]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d166      	bne.n	8007a8a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c0:	881a      	ldrh	r2, [r3, #0]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079cc:	1c9a      	adds	r2, r3, #2
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	3b01      	subs	r3, #1
 80079da:	b29a      	uxth	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079e0:	e053      	b.n	8007a8a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	f003 0302 	and.w	r3, r3, #2
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d11b      	bne.n	8007a28 <HAL_SPI_TransmitReceive+0x176>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d016      	beq.n	8007a28 <HAL_SPI_TransmitReceive+0x176>
 80079fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d113      	bne.n	8007a28 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a04:	881a      	ldrh	r2, [r3, #0]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a10:	1c9a      	adds	r2, r3, #2
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a24:	2300      	movs	r3, #0
 8007a26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	f003 0301 	and.w	r3, r3, #1
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d119      	bne.n	8007a6a <HAL_SPI_TransmitReceive+0x1b8>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d014      	beq.n	8007a6a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68da      	ldr	r2, [r3, #12]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4a:	b292      	uxth	r2, r2
 8007a4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a52:	1c9a      	adds	r2, r3, #2
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a66:	2301      	movs	r3, #1
 8007a68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a6a:	f7fa fac1 	bl	8001ff0 <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d807      	bhi.n	8007a8a <HAL_SPI_TransmitReceive+0x1d8>
 8007a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a80:	d003      	beq.n	8007a8a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007a82:	2303      	movs	r3, #3
 8007a84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007a88:	e0a7      	b.n	8007bda <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1a6      	bne.n	80079e2 <HAL_SPI_TransmitReceive+0x130>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1a1      	bne.n	80079e2 <HAL_SPI_TransmitReceive+0x130>
 8007a9e:	e07c      	b.n	8007b9a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d002      	beq.n	8007aae <HAL_SPI_TransmitReceive+0x1fc>
 8007aa8:	8b7b      	ldrh	r3, [r7, #26]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d16b      	bne.n	8007b86 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	330c      	adds	r3, #12
 8007ab8:	7812      	ldrb	r2, [r2, #0]
 8007aba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac0:	1c5a      	adds	r2, r3, #1
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	3b01      	subs	r3, #1
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ad4:	e057      	b.n	8007b86 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f003 0302 	and.w	r3, r3, #2
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d11c      	bne.n	8007b1e <HAL_SPI_TransmitReceive+0x26c>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d017      	beq.n	8007b1e <HAL_SPI_TransmitReceive+0x26c>
 8007aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d114      	bne.n	8007b1e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	330c      	adds	r3, #12
 8007afe:	7812      	ldrb	r2, [r2, #0]
 8007b00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b06:	1c5a      	adds	r2, r3, #1
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	3b01      	subs	r3, #1
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	f003 0301 	and.w	r3, r3, #1
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d119      	bne.n	8007b60 <HAL_SPI_TransmitReceive+0x2ae>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d014      	beq.n	8007b60 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68da      	ldr	r2, [r3, #12]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b40:	b2d2      	uxtb	r2, r2
 8007b42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b48:	1c5a      	adds	r2, r3, #1
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	3b01      	subs	r3, #1
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007b60:	f7fa fa46 	bl	8001ff0 <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d803      	bhi.n	8007b78 <HAL_SPI_TransmitReceive+0x2c6>
 8007b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b76:	d102      	bne.n	8007b7e <HAL_SPI_TransmitReceive+0x2cc>
 8007b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d103      	bne.n	8007b86 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007b84:	e029      	b.n	8007bda <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1a2      	bne.n	8007ad6 <HAL_SPI_TransmitReceive+0x224>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d19d      	bne.n	8007ad6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f000 f8c0 	bl	8007d24 <SPI_EndRxTxTransaction>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d006      	beq.n	8007bb8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2220      	movs	r2, #32
 8007bb4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007bb6:	e010      	b.n	8007bda <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10b      	bne.n	8007bd8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	617b      	str	r3, [r7, #20]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	617b      	str	r3, [r7, #20]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	617b      	str	r3, [r7, #20]
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	e000      	b.n	8007bda <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007bd8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007bea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3730      	adds	r7, #48	; 0x30
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b083      	sub	sp, #12
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c04:	b2db      	uxtb	r3, r3
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
	...

08007c14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b088      	sub	sp, #32
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	603b      	str	r3, [r7, #0]
 8007c20:	4613      	mov	r3, r2
 8007c22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c24:	f7fa f9e4 	bl	8001ff0 <HAL_GetTick>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2c:	1a9b      	subs	r3, r3, r2
 8007c2e:	683a      	ldr	r2, [r7, #0]
 8007c30:	4413      	add	r3, r2
 8007c32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c34:	f7fa f9dc 	bl	8001ff0 <HAL_GetTick>
 8007c38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c3a:	4b39      	ldr	r3, [pc, #228]	; (8007d20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	015b      	lsls	r3, r3, #5
 8007c40:	0d1b      	lsrs	r3, r3, #20
 8007c42:	69fa      	ldr	r2, [r7, #28]
 8007c44:	fb02 f303 	mul.w	r3, r2, r3
 8007c48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c4a:	e054      	b.n	8007cf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c52:	d050      	beq.n	8007cf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c54:	f7fa f9cc 	bl	8001ff0 <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	69fa      	ldr	r2, [r7, #28]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d902      	bls.n	8007c6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d13d      	bne.n	8007ce6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	685a      	ldr	r2, [r3, #4]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c82:	d111      	bne.n	8007ca8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c8c:	d004      	beq.n	8007c98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c96:	d107      	bne.n	8007ca8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ca6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cb0:	d10f      	bne.n	8007cd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cc0:	601a      	str	r2, [r3, #0]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e017      	b.n	8007d16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d101      	bne.n	8007cf0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007cec:	2300      	movs	r3, #0
 8007cee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	689a      	ldr	r2, [r3, #8]
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	4013      	ands	r3, r2
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	bf0c      	ite	eq
 8007d06:	2301      	moveq	r3, #1
 8007d08:	2300      	movne	r3, #0
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	79fb      	ldrb	r3, [r7, #7]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d19b      	bne.n	8007c4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3720      	adds	r7, #32
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	200002b8 	.word	0x200002b8

08007d24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b088      	sub	sp, #32
 8007d28:	af02      	add	r7, sp, #8
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007d30:	4b1b      	ldr	r3, [pc, #108]	; (8007da0 <SPI_EndRxTxTransaction+0x7c>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a1b      	ldr	r2, [pc, #108]	; (8007da4 <SPI_EndRxTxTransaction+0x80>)
 8007d36:	fba2 2303 	umull	r2, r3, r2, r3
 8007d3a:	0d5b      	lsrs	r3, r3, #21
 8007d3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d40:	fb02 f303 	mul.w	r3, r2, r3
 8007d44:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d4e:	d112      	bne.n	8007d76 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	2200      	movs	r2, #0
 8007d58:	2180      	movs	r1, #128	; 0x80
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f7ff ff5a 	bl	8007c14 <SPI_WaitFlagStateUntilTimeout>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d016      	beq.n	8007d94 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d6a:	f043 0220 	orr.w	r2, r3, #32
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e00f      	b.n	8007d96 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00a      	beq.n	8007d92 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d8c:	2b80      	cmp	r3, #128	; 0x80
 8007d8e:	d0f2      	beq.n	8007d76 <SPI_EndRxTxTransaction+0x52>
 8007d90:	e000      	b.n	8007d94 <SPI_EndRxTxTransaction+0x70>
        break;
 8007d92:	bf00      	nop
  }

  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3718      	adds	r7, #24
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	200002b8 	.word	0x200002b8
 8007da4:	165e9f81 	.word	0x165e9f81

08007da8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d101      	bne.n	8007dba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e03f      	b.n	8007e3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d106      	bne.n	8007dd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f7f9 ff9e 	bl	8001d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2224      	movs	r2, #36	; 0x24
 8007dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68da      	ldr	r2, [r3, #12]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007dea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fde5 	bl	80089bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	691a      	ldr	r2, [r3, #16]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	695a      	ldr	r2, [r3, #20]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68da      	ldr	r2, [r3, #12]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2220      	movs	r2, #32
 8007e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2220      	movs	r2, #32
 8007e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3708      	adds	r7, #8
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b08a      	sub	sp, #40	; 0x28
 8007e46:	af02      	add	r7, sp, #8
 8007e48:	60f8      	str	r0, [r7, #12]
 8007e4a:	60b9      	str	r1, [r7, #8]
 8007e4c:	603b      	str	r3, [r7, #0]
 8007e4e:	4613      	mov	r3, r2
 8007e50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007e52:	2300      	movs	r3, #0
 8007e54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	2b20      	cmp	r3, #32
 8007e60:	d17c      	bne.n	8007f5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d002      	beq.n	8007e6e <HAL_UART_Transmit+0x2c>
 8007e68:	88fb      	ldrh	r3, [r7, #6]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d101      	bne.n	8007e72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e075      	b.n	8007f5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d101      	bne.n	8007e80 <HAL_UART_Transmit+0x3e>
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	e06e      	b.n	8007f5e <HAL_UART_Transmit+0x11c>
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2221      	movs	r2, #33	; 0x21
 8007e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e96:	f7fa f8ab 	bl	8001ff0 <HAL_GetTick>
 8007e9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	88fa      	ldrh	r2, [r7, #6]
 8007ea0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	88fa      	ldrh	r2, [r7, #6]
 8007ea6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eb0:	d108      	bne.n	8007ec4 <HAL_UART_Transmit+0x82>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d104      	bne.n	8007ec4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	61bb      	str	r3, [r7, #24]
 8007ec2:	e003      	b.n	8007ecc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007ed4:	e02a      	b.n	8007f2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	2200      	movs	r2, #0
 8007ede:	2180      	movs	r1, #128	; 0x80
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f000 fb29 	bl	8008538 <UART_WaitOnFlagUntilTimeout>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d001      	beq.n	8007ef0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e036      	b.n	8007f5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d10b      	bne.n	8007f0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	881b      	ldrh	r3, [r3, #0]
 8007efa:	461a      	mov	r2, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	3302      	adds	r3, #2
 8007f0a:	61bb      	str	r3, [r7, #24]
 8007f0c:	e007      	b.n	8007f1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	781a      	ldrb	r2, [r3, #0]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	3b01      	subs	r3, #1
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1cf      	bne.n	8007ed6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	2140      	movs	r1, #64	; 0x40
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 faf9 	bl	8008538 <UART_WaitOnFlagUntilTimeout>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d001      	beq.n	8007f50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e006      	b.n	8007f5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2220      	movs	r2, #32
 8007f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	e000      	b.n	8007f5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007f5c:	2302      	movs	r3, #2
  }
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3720      	adds	r7, #32
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b084      	sub	sp, #16
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	60f8      	str	r0, [r7, #12]
 8007f6e:	60b9      	str	r1, [r7, #8]
 8007f70:	4613      	mov	r3, r2
 8007f72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	2b20      	cmp	r3, #32
 8007f7e:	d11d      	bne.n	8007fbc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d002      	beq.n	8007f8c <HAL_UART_Receive_IT+0x26>
 8007f86:	88fb      	ldrh	r3, [r7, #6]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d101      	bne.n	8007f90 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e016      	b.n	8007fbe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d101      	bne.n	8007f9e <HAL_UART_Receive_IT+0x38>
 8007f9a:	2302      	movs	r3, #2
 8007f9c:	e00f      	b.n	8007fbe <HAL_UART_Receive_IT+0x58>
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007fac:	88fb      	ldrh	r3, [r7, #6]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	68b9      	ldr	r1, [r7, #8]
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f000 fb2e 	bl	8008614 <UART_Start_Receive_IT>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	e000      	b.n	8007fbe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007fbc:	2302      	movs	r3, #2
  }
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
	...

08007fc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b0ba      	sub	sp, #232	; 0xe8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ffe:	f003 030f 	and.w	r3, r3, #15
 8008002:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008006:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800800a:	2b00      	cmp	r3, #0
 800800c:	d10f      	bne.n	800802e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800800e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008012:	f003 0320 	and.w	r3, r3, #32
 8008016:	2b00      	cmp	r3, #0
 8008018:	d009      	beq.n	800802e <HAL_UART_IRQHandler+0x66>
 800801a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800801e:	f003 0320 	and.w	r3, r3, #32
 8008022:	2b00      	cmp	r3, #0
 8008024:	d003      	beq.n	800802e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fc0d 	bl	8008846 <UART_Receive_IT>
      return;
 800802c:	e256      	b.n	80084dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800802e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008032:	2b00      	cmp	r3, #0
 8008034:	f000 80de 	beq.w	80081f4 <HAL_UART_IRQHandler+0x22c>
 8008038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800803c:	f003 0301 	and.w	r3, r3, #1
 8008040:	2b00      	cmp	r3, #0
 8008042:	d106      	bne.n	8008052 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008048:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800804c:	2b00      	cmp	r3, #0
 800804e:	f000 80d1 	beq.w	80081f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00b      	beq.n	8008076 <HAL_UART_IRQHandler+0xae>
 800805e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008066:	2b00      	cmp	r3, #0
 8008068:	d005      	beq.n	8008076 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806e:	f043 0201 	orr.w	r2, r3, #1
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800807a:	f003 0304 	and.w	r3, r3, #4
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00b      	beq.n	800809a <HAL_UART_IRQHandler+0xd2>
 8008082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008086:	f003 0301 	and.w	r3, r3, #1
 800808a:	2b00      	cmp	r3, #0
 800808c:	d005      	beq.n	800809a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008092:	f043 0202 	orr.w	r2, r3, #2
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800809a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800809e:	f003 0302 	and.w	r3, r3, #2
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00b      	beq.n	80080be <HAL_UART_IRQHandler+0xf6>
 80080a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080aa:	f003 0301 	and.w	r3, r3, #1
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d005      	beq.n	80080be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b6:	f043 0204 	orr.w	r2, r3, #4
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80080be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080c2:	f003 0308 	and.w	r3, r3, #8
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d011      	beq.n	80080ee <HAL_UART_IRQHandler+0x126>
 80080ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080ce:	f003 0320 	and.w	r3, r3, #32
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d105      	bne.n	80080e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80080d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d005      	beq.n	80080ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e6:	f043 0208 	orr.w	r2, r3, #8
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f000 81ed 	beq.w	80084d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80080f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080fc:	f003 0320 	and.w	r3, r3, #32
 8008100:	2b00      	cmp	r3, #0
 8008102:	d008      	beq.n	8008116 <HAL_UART_IRQHandler+0x14e>
 8008104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008108:	f003 0320 	and.w	r3, r3, #32
 800810c:	2b00      	cmp	r3, #0
 800810e:	d002      	beq.n	8008116 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 fb98 	bl	8008846 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	695b      	ldr	r3, [r3, #20]
 800811c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008120:	2b40      	cmp	r3, #64	; 0x40
 8008122:	bf0c      	ite	eq
 8008124:	2301      	moveq	r3, #1
 8008126:	2300      	movne	r3, #0
 8008128:	b2db      	uxtb	r3, r3
 800812a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008132:	f003 0308 	and.w	r3, r3, #8
 8008136:	2b00      	cmp	r3, #0
 8008138:	d103      	bne.n	8008142 <HAL_UART_IRQHandler+0x17a>
 800813a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800813e:	2b00      	cmp	r3, #0
 8008140:	d04f      	beq.n	80081e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 faa0 	bl	8008688 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	695b      	ldr	r3, [r3, #20]
 800814e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008152:	2b40      	cmp	r3, #64	; 0x40
 8008154:	d141      	bne.n	80081da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	3314      	adds	r3, #20
 800815c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008160:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008164:	e853 3f00 	ldrex	r3, [r3]
 8008168:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800816c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008174:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	3314      	adds	r3, #20
 800817e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008182:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008186:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800818e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008192:	e841 2300 	strex	r3, r2, [r1]
 8008196:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800819a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d1d9      	bne.n	8008156 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d013      	beq.n	80081d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ae:	4a7d      	ldr	r2, [pc, #500]	; (80083a4 <HAL_UART_IRQHandler+0x3dc>)
 80081b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7fa fc32 	bl	8002a20 <HAL_DMA_Abort_IT>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d016      	beq.n	80081f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80081cc:	4610      	mov	r0, r2
 80081ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081d0:	e00e      	b.n	80081f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f99a 	bl	800850c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081d8:	e00a      	b.n	80081f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f996 	bl	800850c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081e0:	e006      	b.n	80081f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f992 	bl	800850c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80081ee:	e170      	b.n	80084d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081f0:	bf00      	nop
    return;
 80081f2:	e16e      	b.n	80084d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	f040 814a 	bne.w	8008492 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80081fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008202:	f003 0310 	and.w	r3, r3, #16
 8008206:	2b00      	cmp	r3, #0
 8008208:	f000 8143 	beq.w	8008492 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800820c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008210:	f003 0310 	and.w	r3, r3, #16
 8008214:	2b00      	cmp	r3, #0
 8008216:	f000 813c 	beq.w	8008492 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800821a:	2300      	movs	r3, #0
 800821c:	60bb      	str	r3, [r7, #8]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	60bb      	str	r3, [r7, #8]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	60bb      	str	r3, [r7, #8]
 800822e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	695b      	ldr	r3, [r3, #20]
 8008236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800823a:	2b40      	cmp	r3, #64	; 0x40
 800823c:	f040 80b4 	bne.w	80083a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800824c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 8140 	beq.w	80084d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800825a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800825e:	429a      	cmp	r2, r3
 8008260:	f080 8139 	bcs.w	80084d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800826a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008276:	f000 8088 	beq.w	800838a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	330c      	adds	r3, #12
 8008280:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008284:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008288:	e853 3f00 	ldrex	r3, [r3]
 800828c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008290:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008298:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	330c      	adds	r3, #12
 80082a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80082a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80082aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80082b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80082b6:	e841 2300 	strex	r3, r2, [r1]
 80082ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80082be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1d9      	bne.n	800827a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	3314      	adds	r3, #20
 80082cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082d0:	e853 3f00 	ldrex	r3, [r3]
 80082d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80082d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082d8:	f023 0301 	bic.w	r3, r3, #1
 80082dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	3314      	adds	r3, #20
 80082e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80082ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80082ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80082f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80082f6:	e841 2300 	strex	r3, r2, [r1]
 80082fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80082fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1e1      	bne.n	80082c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	3314      	adds	r3, #20
 8008308:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800830c:	e853 3f00 	ldrex	r3, [r3]
 8008310:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008318:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	3314      	adds	r3, #20
 8008322:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008326:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008328:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800832c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800832e:	e841 2300 	strex	r3, r2, [r1]
 8008332:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008336:	2b00      	cmp	r3, #0
 8008338:	d1e3      	bne.n	8008302 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2220      	movs	r2, #32
 800833e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	330c      	adds	r3, #12
 800834e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008352:	e853 3f00 	ldrex	r3, [r3]
 8008356:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800835a:	f023 0310 	bic.w	r3, r3, #16
 800835e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	330c      	adds	r3, #12
 8008368:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800836c:	65ba      	str	r2, [r7, #88]	; 0x58
 800836e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008370:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008372:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008374:	e841 2300 	strex	r3, r2, [r1]
 8008378:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800837a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1e3      	bne.n	8008348 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008384:	4618      	mov	r0, r3
 8008386:	f7fa fadb 	bl	8002940 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008392:	b29b      	uxth	r3, r3
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	b29b      	uxth	r3, r3
 8008398:	4619      	mov	r1, r3
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f8c0 	bl	8008520 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80083a0:	e099      	b.n	80084d6 <HAL_UART_IRQHandler+0x50e>
 80083a2:	bf00      	nop
 80083a4:	0800874f 	.word	0x0800874f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083bc:	b29b      	uxth	r3, r3
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f000 808b 	beq.w	80084da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80083c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f000 8086 	beq.w	80084da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	330c      	adds	r3, #12
 80083d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d8:	e853 3f00 	ldrex	r3, [r3]
 80083dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	330c      	adds	r3, #12
 80083ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80083f2:	647a      	str	r2, [r7, #68]	; 0x44
 80083f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80083f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083fa:	e841 2300 	strex	r3, r2, [r1]
 80083fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1e3      	bne.n	80083ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	3314      	adds	r3, #20
 800840c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008410:	e853 3f00 	ldrex	r3, [r3]
 8008414:	623b      	str	r3, [r7, #32]
   return(result);
 8008416:	6a3b      	ldr	r3, [r7, #32]
 8008418:	f023 0301 	bic.w	r3, r3, #1
 800841c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	3314      	adds	r3, #20
 8008426:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800842a:	633a      	str	r2, [r7, #48]	; 0x30
 800842c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008432:	e841 2300 	strex	r3, r2, [r1]
 8008436:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1e3      	bne.n	8008406 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2220      	movs	r2, #32
 8008442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	330c      	adds	r3, #12
 8008452:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	e853 3f00 	ldrex	r3, [r3]
 800845a:	60fb      	str	r3, [r7, #12]
   return(result);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f023 0310 	bic.w	r3, r3, #16
 8008462:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	330c      	adds	r3, #12
 800846c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008470:	61fa      	str	r2, [r7, #28]
 8008472:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008474:	69b9      	ldr	r1, [r7, #24]
 8008476:	69fa      	ldr	r2, [r7, #28]
 8008478:	e841 2300 	strex	r3, r2, [r1]
 800847c:	617b      	str	r3, [r7, #20]
   return(result);
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d1e3      	bne.n	800844c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008484:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008488:	4619      	mov	r1, r3
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 f848 	bl	8008520 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008490:	e023      	b.n	80084da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800849a:	2b00      	cmp	r3, #0
 800849c:	d009      	beq.n	80084b2 <HAL_UART_IRQHandler+0x4ea>
 800849e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d003      	beq.n	80084b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f963 	bl	8008776 <UART_Transmit_IT>
    return;
 80084b0:	e014      	b.n	80084dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80084b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00e      	beq.n	80084dc <HAL_UART_IRQHandler+0x514>
 80084be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d008      	beq.n	80084dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f9a3 	bl	8008816 <UART_EndTransmit_IT>
    return;
 80084d0:	e004      	b.n	80084dc <HAL_UART_IRQHandler+0x514>
    return;
 80084d2:	bf00      	nop
 80084d4:	e002      	b.n	80084dc <HAL_UART_IRQHandler+0x514>
      return;
 80084d6:	bf00      	nop
 80084d8:	e000      	b.n	80084dc <HAL_UART_IRQHandler+0x514>
      return;
 80084da:	bf00      	nop
  }
}
 80084dc:	37e8      	adds	r7, #232	; 0xe8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop

080084e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008514:	bf00      	nop
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	460b      	mov	r3, r1
 800852a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b090      	sub	sp, #64	; 0x40
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	603b      	str	r3, [r7, #0]
 8008544:	4613      	mov	r3, r2
 8008546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008548:	e050      	b.n	80085ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800854a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800854c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008550:	d04c      	beq.n	80085ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008554:	2b00      	cmp	r3, #0
 8008556:	d007      	beq.n	8008568 <UART_WaitOnFlagUntilTimeout+0x30>
 8008558:	f7f9 fd4a 	bl	8001ff0 <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008564:	429a      	cmp	r2, r3
 8008566:	d241      	bcs.n	80085ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	330c      	adds	r3, #12
 800856e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008572:	e853 3f00 	ldrex	r3, [r3]
 8008576:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800857e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	330c      	adds	r3, #12
 8008586:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008588:	637a      	str	r2, [r7, #52]	; 0x34
 800858a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800858e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008590:	e841 2300 	strex	r3, r2, [r1]
 8008594:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1e5      	bne.n	8008568 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	3314      	adds	r3, #20
 80085a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	e853 3f00 	ldrex	r3, [r3]
 80085aa:	613b      	str	r3, [r7, #16]
   return(result);
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	f023 0301 	bic.w	r3, r3, #1
 80085b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	3314      	adds	r3, #20
 80085ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085bc:	623a      	str	r2, [r7, #32]
 80085be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c0:	69f9      	ldr	r1, [r7, #28]
 80085c2:	6a3a      	ldr	r2, [r7, #32]
 80085c4:	e841 2300 	strex	r3, r2, [r1]
 80085c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1e5      	bne.n	800859c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2220      	movs	r2, #32
 80085d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2220      	movs	r2, #32
 80085dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80085e8:	2303      	movs	r3, #3
 80085ea:	e00f      	b.n	800860c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	4013      	ands	r3, r2
 80085f6:	68ba      	ldr	r2, [r7, #8]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	bf0c      	ite	eq
 80085fc:	2301      	moveq	r3, #1
 80085fe:	2300      	movne	r3, #0
 8008600:	b2db      	uxtb	r3, r3
 8008602:	461a      	mov	r2, r3
 8008604:	79fb      	ldrb	r3, [r7, #7]
 8008606:	429a      	cmp	r2, r3
 8008608:	d09f      	beq.n	800854a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3740      	adds	r7, #64	; 0x40
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	4613      	mov	r3, r2
 8008620:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	88fa      	ldrh	r2, [r7, #6]
 800862c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	88fa      	ldrh	r2, [r7, #6]
 8008632:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2222      	movs	r2, #34	; 0x22
 800863e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2200      	movs	r2, #0
 8008646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68da      	ldr	r2, [r3, #12]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008658:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	695a      	ldr	r2, [r3, #20]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f042 0201 	orr.w	r2, r2, #1
 8008668:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68da      	ldr	r2, [r3, #12]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f042 0220 	orr.w	r2, r2, #32
 8008678:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3714      	adds	r7, #20
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008688:	b480      	push	{r7}
 800868a:	b095      	sub	sp, #84	; 0x54
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	330c      	adds	r3, #12
 8008696:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800869a:	e853 3f00 	ldrex	r3, [r3]
 800869e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	330c      	adds	r3, #12
 80086ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086b0:	643a      	str	r2, [r7, #64]	; 0x40
 80086b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086b8:	e841 2300 	strex	r3, r2, [r1]
 80086bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1e5      	bne.n	8008690 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	3314      	adds	r3, #20
 80086ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086cc:	6a3b      	ldr	r3, [r7, #32]
 80086ce:	e853 3f00 	ldrex	r3, [r3]
 80086d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	f023 0301 	bic.w	r3, r3, #1
 80086da:	64bb      	str	r3, [r7, #72]	; 0x48
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	3314      	adds	r3, #20
 80086e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086ec:	e841 2300 	strex	r3, r2, [r1]
 80086f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1e5      	bne.n	80086c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d119      	bne.n	8008734 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	330c      	adds	r3, #12
 8008706:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	e853 3f00 	ldrex	r3, [r3]
 800870e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	f023 0310 	bic.w	r3, r3, #16
 8008716:	647b      	str	r3, [r7, #68]	; 0x44
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	330c      	adds	r3, #12
 800871e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008720:	61ba      	str	r2, [r7, #24]
 8008722:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008724:	6979      	ldr	r1, [r7, #20]
 8008726:	69ba      	ldr	r2, [r7, #24]
 8008728:	e841 2300 	strex	r3, r2, [r1]
 800872c:	613b      	str	r3, [r7, #16]
   return(result);
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1e5      	bne.n	8008700 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2220      	movs	r2, #32
 8008738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008742:	bf00      	nop
 8008744:	3754      	adds	r7, #84	; 0x54
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr

0800874e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b084      	sub	sp, #16
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800875a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2200      	movs	r2, #0
 8008766:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008768:	68f8      	ldr	r0, [r7, #12]
 800876a:	f7ff fecf 	bl	800850c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800876e:	bf00      	nop
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008776:	b480      	push	{r7}
 8008778:	b085      	sub	sp, #20
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008784:	b2db      	uxtb	r3, r3
 8008786:	2b21      	cmp	r3, #33	; 0x21
 8008788:	d13e      	bne.n	8008808 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008792:	d114      	bne.n	80087be <UART_Transmit_IT+0x48>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d110      	bne.n	80087be <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a1b      	ldr	r3, [r3, #32]
 80087a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	881b      	ldrh	r3, [r3, #0]
 80087a6:	461a      	mov	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a1b      	ldr	r3, [r3, #32]
 80087b6:	1c9a      	adds	r2, r3, #2
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	621a      	str	r2, [r3, #32]
 80087bc:	e008      	b.n	80087d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a1b      	ldr	r3, [r3, #32]
 80087c2:	1c59      	adds	r1, r3, #1
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	6211      	str	r1, [r2, #32]
 80087c8:	781a      	ldrb	r2, [r3, #0]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	3b01      	subs	r3, #1
 80087d8:	b29b      	uxth	r3, r3
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	4619      	mov	r1, r3
 80087de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d10f      	bne.n	8008804 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68da      	ldr	r2, [r3, #12]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	68da      	ldr	r2, [r3, #12]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008802:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008804:	2300      	movs	r3, #0
 8008806:	e000      	b.n	800880a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008808:	2302      	movs	r3, #2
  }
}
 800880a:	4618      	mov	r0, r3
 800880c:	3714      	adds	r7, #20
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr

08008816 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b082      	sub	sp, #8
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	68da      	ldr	r2, [r3, #12]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800882c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2220      	movs	r2, #32
 8008832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f7ff fe54 	bl	80084e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b08c      	sub	sp, #48	; 0x30
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008854:	b2db      	uxtb	r3, r3
 8008856:	2b22      	cmp	r3, #34	; 0x22
 8008858:	f040 80ab 	bne.w	80089b2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008864:	d117      	bne.n	8008896 <UART_Receive_IT+0x50>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d113      	bne.n	8008896 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800886e:	2300      	movs	r3, #0
 8008870:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008876:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	b29b      	uxth	r3, r3
 8008880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008884:	b29a      	uxth	r2, r3
 8008886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008888:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800888e:	1c9a      	adds	r2, r3, #2
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	629a      	str	r2, [r3, #40]	; 0x28
 8008894:	e026      	b.n	80088e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800889a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800889c:	2300      	movs	r3, #0
 800889e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088a8:	d007      	beq.n	80088ba <UART_Receive_IT+0x74>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d10a      	bne.n	80088c8 <UART_Receive_IT+0x82>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d106      	bne.n	80088c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	b2da      	uxtb	r2, r3
 80088c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c4:	701a      	strb	r2, [r3, #0]
 80088c6:	e008      	b.n	80088da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088d4:	b2da      	uxtb	r2, r3
 80088d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088de:	1c5a      	adds	r2, r3, #1
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	3b01      	subs	r3, #1
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	4619      	mov	r1, r3
 80088f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d15a      	bne.n	80089ae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68da      	ldr	r2, [r3, #12]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f022 0220 	bic.w	r2, r2, #32
 8008906:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	68da      	ldr	r2, [r3, #12]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008916:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	695a      	ldr	r2, [r3, #20]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f022 0201 	bic.w	r2, r2, #1
 8008926:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2220      	movs	r2, #32
 800892c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008934:	2b01      	cmp	r3, #1
 8008936:	d135      	bne.n	80089a4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	330c      	adds	r3, #12
 8008944:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	e853 3f00 	ldrex	r3, [r3]
 800894c:	613b      	str	r3, [r7, #16]
   return(result);
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	f023 0310 	bic.w	r3, r3, #16
 8008954:	627b      	str	r3, [r7, #36]	; 0x24
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	330c      	adds	r3, #12
 800895c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800895e:	623a      	str	r2, [r7, #32]
 8008960:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008962:	69f9      	ldr	r1, [r7, #28]
 8008964:	6a3a      	ldr	r2, [r7, #32]
 8008966:	e841 2300 	strex	r3, r2, [r1]
 800896a:	61bb      	str	r3, [r7, #24]
   return(result);
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1e5      	bne.n	800893e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0310 	and.w	r3, r3, #16
 800897c:	2b10      	cmp	r3, #16
 800897e:	d10a      	bne.n	8008996 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008980:	2300      	movs	r3, #0
 8008982:	60fb      	str	r3, [r7, #12]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	60fb      	str	r3, [r7, #12]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	60fb      	str	r3, [r7, #12]
 8008994:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800899a:	4619      	mov	r1, r3
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f7ff fdbf 	bl	8008520 <HAL_UARTEx_RxEventCallback>
 80089a2:	e002      	b.n	80089aa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f7ff fda7 	bl	80084f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80089aa:	2300      	movs	r3, #0
 80089ac:	e002      	b.n	80089b4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80089ae:	2300      	movs	r3, #0
 80089b0:	e000      	b.n	80089b4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80089b2:	2302      	movs	r3, #2
  }
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3730      	adds	r7, #48	; 0x30
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c0:	b09f      	sub	sp, #124	; 0x7c
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80089d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089d2:	68d9      	ldr	r1, [r3, #12]
 80089d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	ea40 0301 	orr.w	r3, r0, r1
 80089dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80089de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089e0:	689a      	ldr	r2, [r3, #8]
 80089e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	431a      	orrs	r2, r3
 80089e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089ea:	695b      	ldr	r3, [r3, #20]
 80089ec:	431a      	orrs	r2, r3
 80089ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089f0:	69db      	ldr	r3, [r3, #28]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80089f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008a00:	f021 010c 	bic.w	r1, r1, #12
 8008a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a0a:	430b      	orrs	r3, r1
 8008a0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a1a:	6999      	ldr	r1, [r3, #24]
 8008a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	ea40 0301 	orr.w	r3, r0, r1
 8008a24:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	4bc5      	ldr	r3, [pc, #788]	; (8008d40 <UART_SetConfig+0x384>)
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d004      	beq.n	8008a3a <UART_SetConfig+0x7e>
 8008a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	4bc3      	ldr	r3, [pc, #780]	; (8008d44 <UART_SetConfig+0x388>)
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d103      	bne.n	8008a42 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a3a:	f7fe fd61 	bl	8007500 <HAL_RCC_GetPCLK2Freq>
 8008a3e:	6778      	str	r0, [r7, #116]	; 0x74
 8008a40:	e002      	b.n	8008a48 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008a42:	f7fe fd49 	bl	80074d8 <HAL_RCC_GetPCLK1Freq>
 8008a46:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a4a:	69db      	ldr	r3, [r3, #28]
 8008a4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a50:	f040 80b6 	bne.w	8008bc0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a56:	461c      	mov	r4, r3
 8008a58:	f04f 0500 	mov.w	r5, #0
 8008a5c:	4622      	mov	r2, r4
 8008a5e:	462b      	mov	r3, r5
 8008a60:	1891      	adds	r1, r2, r2
 8008a62:	6439      	str	r1, [r7, #64]	; 0x40
 8008a64:	415b      	adcs	r3, r3
 8008a66:	647b      	str	r3, [r7, #68]	; 0x44
 8008a68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008a6c:	1912      	adds	r2, r2, r4
 8008a6e:	eb45 0303 	adc.w	r3, r5, r3
 8008a72:	f04f 0000 	mov.w	r0, #0
 8008a76:	f04f 0100 	mov.w	r1, #0
 8008a7a:	00d9      	lsls	r1, r3, #3
 8008a7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a80:	00d0      	lsls	r0, r2, #3
 8008a82:	4602      	mov	r2, r0
 8008a84:	460b      	mov	r3, r1
 8008a86:	1911      	adds	r1, r2, r4
 8008a88:	6639      	str	r1, [r7, #96]	; 0x60
 8008a8a:	416b      	adcs	r3, r5
 8008a8c:	667b      	str	r3, [r7, #100]	; 0x64
 8008a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	461a      	mov	r2, r3
 8008a94:	f04f 0300 	mov.w	r3, #0
 8008a98:	1891      	adds	r1, r2, r2
 8008a9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008a9c:	415b      	adcs	r3, r3
 8008a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008aa0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008aa4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008aa8:	f7f7 fb8e 	bl	80001c8 <__aeabi_uldivmod>
 8008aac:	4602      	mov	r2, r0
 8008aae:	460b      	mov	r3, r1
 8008ab0:	4ba5      	ldr	r3, [pc, #660]	; (8008d48 <UART_SetConfig+0x38c>)
 8008ab2:	fba3 2302 	umull	r2, r3, r3, r2
 8008ab6:	095b      	lsrs	r3, r3, #5
 8008ab8:	011e      	lsls	r6, r3, #4
 8008aba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008abc:	461c      	mov	r4, r3
 8008abe:	f04f 0500 	mov.w	r5, #0
 8008ac2:	4622      	mov	r2, r4
 8008ac4:	462b      	mov	r3, r5
 8008ac6:	1891      	adds	r1, r2, r2
 8008ac8:	6339      	str	r1, [r7, #48]	; 0x30
 8008aca:	415b      	adcs	r3, r3
 8008acc:	637b      	str	r3, [r7, #52]	; 0x34
 8008ace:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008ad2:	1912      	adds	r2, r2, r4
 8008ad4:	eb45 0303 	adc.w	r3, r5, r3
 8008ad8:	f04f 0000 	mov.w	r0, #0
 8008adc:	f04f 0100 	mov.w	r1, #0
 8008ae0:	00d9      	lsls	r1, r3, #3
 8008ae2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008ae6:	00d0      	lsls	r0, r2, #3
 8008ae8:	4602      	mov	r2, r0
 8008aea:	460b      	mov	r3, r1
 8008aec:	1911      	adds	r1, r2, r4
 8008aee:	65b9      	str	r1, [r7, #88]	; 0x58
 8008af0:	416b      	adcs	r3, r5
 8008af2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	461a      	mov	r2, r3
 8008afa:	f04f 0300 	mov.w	r3, #0
 8008afe:	1891      	adds	r1, r2, r2
 8008b00:	62b9      	str	r1, [r7, #40]	; 0x28
 8008b02:	415b      	adcs	r3, r3
 8008b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008b0a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008b0e:	f7f7 fb5b 	bl	80001c8 <__aeabi_uldivmod>
 8008b12:	4602      	mov	r2, r0
 8008b14:	460b      	mov	r3, r1
 8008b16:	4b8c      	ldr	r3, [pc, #560]	; (8008d48 <UART_SetConfig+0x38c>)
 8008b18:	fba3 1302 	umull	r1, r3, r3, r2
 8008b1c:	095b      	lsrs	r3, r3, #5
 8008b1e:	2164      	movs	r1, #100	; 0x64
 8008b20:	fb01 f303 	mul.w	r3, r1, r3
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	00db      	lsls	r3, r3, #3
 8008b28:	3332      	adds	r3, #50	; 0x32
 8008b2a:	4a87      	ldr	r2, [pc, #540]	; (8008d48 <UART_SetConfig+0x38c>)
 8008b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b30:	095b      	lsrs	r3, r3, #5
 8008b32:	005b      	lsls	r3, r3, #1
 8008b34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008b38:	441e      	add	r6, r3
 8008b3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f04f 0100 	mov.w	r1, #0
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	1894      	adds	r4, r2, r2
 8008b48:	623c      	str	r4, [r7, #32]
 8008b4a:	415b      	adcs	r3, r3
 8008b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8008b4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b52:	1812      	adds	r2, r2, r0
 8008b54:	eb41 0303 	adc.w	r3, r1, r3
 8008b58:	f04f 0400 	mov.w	r4, #0
 8008b5c:	f04f 0500 	mov.w	r5, #0
 8008b60:	00dd      	lsls	r5, r3, #3
 8008b62:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008b66:	00d4      	lsls	r4, r2, #3
 8008b68:	4622      	mov	r2, r4
 8008b6a:	462b      	mov	r3, r5
 8008b6c:	1814      	adds	r4, r2, r0
 8008b6e:	653c      	str	r4, [r7, #80]	; 0x50
 8008b70:	414b      	adcs	r3, r1
 8008b72:	657b      	str	r3, [r7, #84]	; 0x54
 8008b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	461a      	mov	r2, r3
 8008b7a:	f04f 0300 	mov.w	r3, #0
 8008b7e:	1891      	adds	r1, r2, r2
 8008b80:	61b9      	str	r1, [r7, #24]
 8008b82:	415b      	adcs	r3, r3
 8008b84:	61fb      	str	r3, [r7, #28]
 8008b86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b8a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008b8e:	f7f7 fb1b 	bl	80001c8 <__aeabi_uldivmod>
 8008b92:	4602      	mov	r2, r0
 8008b94:	460b      	mov	r3, r1
 8008b96:	4b6c      	ldr	r3, [pc, #432]	; (8008d48 <UART_SetConfig+0x38c>)
 8008b98:	fba3 1302 	umull	r1, r3, r3, r2
 8008b9c:	095b      	lsrs	r3, r3, #5
 8008b9e:	2164      	movs	r1, #100	; 0x64
 8008ba0:	fb01 f303 	mul.w	r3, r1, r3
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	00db      	lsls	r3, r3, #3
 8008ba8:	3332      	adds	r3, #50	; 0x32
 8008baa:	4a67      	ldr	r2, [pc, #412]	; (8008d48 <UART_SetConfig+0x38c>)
 8008bac:	fba2 2303 	umull	r2, r3, r2, r3
 8008bb0:	095b      	lsrs	r3, r3, #5
 8008bb2:	f003 0207 	and.w	r2, r3, #7
 8008bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4432      	add	r2, r6
 8008bbc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008bbe:	e0b9      	b.n	8008d34 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008bc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bc2:	461c      	mov	r4, r3
 8008bc4:	f04f 0500 	mov.w	r5, #0
 8008bc8:	4622      	mov	r2, r4
 8008bca:	462b      	mov	r3, r5
 8008bcc:	1891      	adds	r1, r2, r2
 8008bce:	6139      	str	r1, [r7, #16]
 8008bd0:	415b      	adcs	r3, r3
 8008bd2:	617b      	str	r3, [r7, #20]
 8008bd4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008bd8:	1912      	adds	r2, r2, r4
 8008bda:	eb45 0303 	adc.w	r3, r5, r3
 8008bde:	f04f 0000 	mov.w	r0, #0
 8008be2:	f04f 0100 	mov.w	r1, #0
 8008be6:	00d9      	lsls	r1, r3, #3
 8008be8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008bec:	00d0      	lsls	r0, r2, #3
 8008bee:	4602      	mov	r2, r0
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	eb12 0804 	adds.w	r8, r2, r4
 8008bf6:	eb43 0905 	adc.w	r9, r3, r5
 8008bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f04f 0100 	mov.w	r1, #0
 8008c04:	f04f 0200 	mov.w	r2, #0
 8008c08:	f04f 0300 	mov.w	r3, #0
 8008c0c:	008b      	lsls	r3, r1, #2
 8008c0e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008c12:	0082      	lsls	r2, r0, #2
 8008c14:	4640      	mov	r0, r8
 8008c16:	4649      	mov	r1, r9
 8008c18:	f7f7 fad6 	bl	80001c8 <__aeabi_uldivmod>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4b49      	ldr	r3, [pc, #292]	; (8008d48 <UART_SetConfig+0x38c>)
 8008c22:	fba3 2302 	umull	r2, r3, r3, r2
 8008c26:	095b      	lsrs	r3, r3, #5
 8008c28:	011e      	lsls	r6, r3, #4
 8008c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f04f 0100 	mov.w	r1, #0
 8008c32:	4602      	mov	r2, r0
 8008c34:	460b      	mov	r3, r1
 8008c36:	1894      	adds	r4, r2, r2
 8008c38:	60bc      	str	r4, [r7, #8]
 8008c3a:	415b      	adcs	r3, r3
 8008c3c:	60fb      	str	r3, [r7, #12]
 8008c3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c42:	1812      	adds	r2, r2, r0
 8008c44:	eb41 0303 	adc.w	r3, r1, r3
 8008c48:	f04f 0400 	mov.w	r4, #0
 8008c4c:	f04f 0500 	mov.w	r5, #0
 8008c50:	00dd      	lsls	r5, r3, #3
 8008c52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008c56:	00d4      	lsls	r4, r2, #3
 8008c58:	4622      	mov	r2, r4
 8008c5a:	462b      	mov	r3, r5
 8008c5c:	1814      	adds	r4, r2, r0
 8008c5e:	64bc      	str	r4, [r7, #72]	; 0x48
 8008c60:	414b      	adcs	r3, r1
 8008c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f04f 0100 	mov.w	r1, #0
 8008c6e:	f04f 0200 	mov.w	r2, #0
 8008c72:	f04f 0300 	mov.w	r3, #0
 8008c76:	008b      	lsls	r3, r1, #2
 8008c78:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008c7c:	0082      	lsls	r2, r0, #2
 8008c7e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008c82:	f7f7 faa1 	bl	80001c8 <__aeabi_uldivmod>
 8008c86:	4602      	mov	r2, r0
 8008c88:	460b      	mov	r3, r1
 8008c8a:	4b2f      	ldr	r3, [pc, #188]	; (8008d48 <UART_SetConfig+0x38c>)
 8008c8c:	fba3 1302 	umull	r1, r3, r3, r2
 8008c90:	095b      	lsrs	r3, r3, #5
 8008c92:	2164      	movs	r1, #100	; 0x64
 8008c94:	fb01 f303 	mul.w	r3, r1, r3
 8008c98:	1ad3      	subs	r3, r2, r3
 8008c9a:	011b      	lsls	r3, r3, #4
 8008c9c:	3332      	adds	r3, #50	; 0x32
 8008c9e:	4a2a      	ldr	r2, [pc, #168]	; (8008d48 <UART_SetConfig+0x38c>)
 8008ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ca4:	095b      	lsrs	r3, r3, #5
 8008ca6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008caa:	441e      	add	r6, r3
 8008cac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f04f 0100 	mov.w	r1, #0
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	1894      	adds	r4, r2, r2
 8008cba:	603c      	str	r4, [r7, #0]
 8008cbc:	415b      	adcs	r3, r3
 8008cbe:	607b      	str	r3, [r7, #4]
 8008cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cc4:	1812      	adds	r2, r2, r0
 8008cc6:	eb41 0303 	adc.w	r3, r1, r3
 8008cca:	f04f 0400 	mov.w	r4, #0
 8008cce:	f04f 0500 	mov.w	r5, #0
 8008cd2:	00dd      	lsls	r5, r3, #3
 8008cd4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008cd8:	00d4      	lsls	r4, r2, #3
 8008cda:	4622      	mov	r2, r4
 8008cdc:	462b      	mov	r3, r5
 8008cde:	eb12 0a00 	adds.w	sl, r2, r0
 8008ce2:	eb43 0b01 	adc.w	fp, r3, r1
 8008ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	4618      	mov	r0, r3
 8008cec:	f04f 0100 	mov.w	r1, #0
 8008cf0:	f04f 0200 	mov.w	r2, #0
 8008cf4:	f04f 0300 	mov.w	r3, #0
 8008cf8:	008b      	lsls	r3, r1, #2
 8008cfa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008cfe:	0082      	lsls	r2, r0, #2
 8008d00:	4650      	mov	r0, sl
 8008d02:	4659      	mov	r1, fp
 8008d04:	f7f7 fa60 	bl	80001c8 <__aeabi_uldivmod>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	4b0e      	ldr	r3, [pc, #56]	; (8008d48 <UART_SetConfig+0x38c>)
 8008d0e:	fba3 1302 	umull	r1, r3, r3, r2
 8008d12:	095b      	lsrs	r3, r3, #5
 8008d14:	2164      	movs	r1, #100	; 0x64
 8008d16:	fb01 f303 	mul.w	r3, r1, r3
 8008d1a:	1ad3      	subs	r3, r2, r3
 8008d1c:	011b      	lsls	r3, r3, #4
 8008d1e:	3332      	adds	r3, #50	; 0x32
 8008d20:	4a09      	ldr	r2, [pc, #36]	; (8008d48 <UART_SetConfig+0x38c>)
 8008d22:	fba2 2303 	umull	r2, r3, r2, r3
 8008d26:	095b      	lsrs	r3, r3, #5
 8008d28:	f003 020f 	and.w	r2, r3, #15
 8008d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4432      	add	r2, r6
 8008d32:	609a      	str	r2, [r3, #8]
}
 8008d34:	bf00      	nop
 8008d36:	377c      	adds	r7, #124	; 0x7c
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d3e:	bf00      	nop
 8008d40:	40011000 	.word	0x40011000
 8008d44:	40011400 	.word	0x40011400
 8008d48:	51eb851f 	.word	0x51eb851f

08008d4c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008d50:	4904      	ldr	r1, [pc, #16]	; (8008d64 <MX_FATFS_Init+0x18>)
 8008d52:	4805      	ldr	r0, [pc, #20]	; (8008d68 <MX_FATFS_Init+0x1c>)
 8008d54:	f000 f8b6 	bl	8008ec4 <FATFS_LinkDriver>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	4b03      	ldr	r3, [pc, #12]	; (8008d6c <MX_FATFS_Init+0x20>)
 8008d5e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008d60:	bf00      	nop
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	2000ce7c 	.word	0x2000ce7c
 8008d68:	200002c4 	.word	0x200002c4
 8008d6c:	2000ce80 	.word	0x2000ce80

08008d70 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	4603      	mov	r3, r0
 8008d78:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	 Stat = SD_disk_initialize(pdrv);
 8008d7a:	79fb      	ldrb	r3, [r7, #7]
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7f7 fe47 	bl	8000a10 <SD_disk_initialize>
 8008d82:	4603      	mov	r3, r0
 8008d84:	461a      	mov	r2, r3
 8008d86:	4b04      	ldr	r3, [pc, #16]	; (8008d98 <USER_initialize+0x28>)
 8008d88:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008d8a:	4b03      	ldr	r3, [pc, #12]	; (8008d98 <USER_initialize+0x28>)
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3708      	adds	r7, #8
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	200002c1 	.word	0x200002c1

08008d9c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	4603      	mov	r3, r0
 8008da4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8008da6:	79fb      	ldrb	r3, [r7, #7]
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7f7 ff1b 	bl	8000be4 <SD_disk_status>
 8008dae:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3708      	adds	r7, #8
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60b9      	str	r1, [r7, #8]
 8008dc0:	607a      	str	r2, [r7, #4]
 8008dc2:	603b      	str	r3, [r7, #0]
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8008dc8:	7bf8      	ldrb	r0, [r7, #15]
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	68b9      	ldr	r1, [r7, #8]
 8008dd0:	f7f7 ff1e 	bl	8000c10 <SD_disk_read>
 8008dd4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b084      	sub	sp, #16
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	607a      	str	r2, [r7, #4]
 8008de8:	603b      	str	r3, [r7, #0]
 8008dea:	4603      	mov	r3, r0
 8008dec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8008dee:	7bf8      	ldrb	r0, [r7, #15]
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	68b9      	ldr	r1, [r7, #8]
 8008df6:	f7f7 ff75 	bl	8000ce4 <SD_disk_write>
 8008dfa:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	603a      	str	r2, [r7, #0]
 8008e0e:	71fb      	strb	r3, [r7, #7]
 8008e10:	460b      	mov	r3, r1
 8008e12:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8008e14:	79b9      	ldrb	r1, [r7, #6]
 8008e16:	79fb      	ldrb	r3, [r7, #7]
 8008e18:	683a      	ldr	r2, [r7, #0]
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7f7 ffe6 	bl	8000dec <SD_disk_ioctl>
 8008e20:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3708      	adds	r7, #8
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
	...

08008e2c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b087      	sub	sp, #28
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	4613      	mov	r3, r2
 8008e38:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008e42:	4b1f      	ldr	r3, [pc, #124]	; (8008ec0 <FATFS_LinkDriverEx+0x94>)
 8008e44:	7a5b      	ldrb	r3, [r3, #9]
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d131      	bne.n	8008eb0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008e4c:	4b1c      	ldr	r3, [pc, #112]	; (8008ec0 <FATFS_LinkDriverEx+0x94>)
 8008e4e:	7a5b      	ldrb	r3, [r3, #9]
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	461a      	mov	r2, r3
 8008e54:	4b1a      	ldr	r3, [pc, #104]	; (8008ec0 <FATFS_LinkDriverEx+0x94>)
 8008e56:	2100      	movs	r1, #0
 8008e58:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008e5a:	4b19      	ldr	r3, [pc, #100]	; (8008ec0 <FATFS_LinkDriverEx+0x94>)
 8008e5c:	7a5b      	ldrb	r3, [r3, #9]
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	4a17      	ldr	r2, [pc, #92]	; (8008ec0 <FATFS_LinkDriverEx+0x94>)
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4413      	add	r3, r2
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008e6a:	4b15      	ldr	r3, [pc, #84]	; (8008ec0 <FATFS_LinkDriverEx+0x94>)
 8008e6c:	7a5b      	ldrb	r3, [r3, #9]
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	461a      	mov	r2, r3
 8008e72:	4b13      	ldr	r3, [pc, #76]	; (8008ec0 <FATFS_LinkDriverEx+0x94>)
 8008e74:	4413      	add	r3, r2
 8008e76:	79fa      	ldrb	r2, [r7, #7]
 8008e78:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008e7a:	4b11      	ldr	r3, [pc, #68]	; (8008ec0 <FATFS_LinkDriverEx+0x94>)
 8008e7c:	7a5b      	ldrb	r3, [r3, #9]
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	1c5a      	adds	r2, r3, #1
 8008e82:	b2d1      	uxtb	r1, r2
 8008e84:	4a0e      	ldr	r2, [pc, #56]	; (8008ec0 <FATFS_LinkDriverEx+0x94>)
 8008e86:	7251      	strb	r1, [r2, #9]
 8008e88:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008e8a:	7dbb      	ldrb	r3, [r7, #22]
 8008e8c:	3330      	adds	r3, #48	; 0x30
 8008e8e:	b2da      	uxtb	r2, r3
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	3301      	adds	r3, #1
 8008e98:	223a      	movs	r2, #58	; 0x3a
 8008e9a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	3302      	adds	r3, #2
 8008ea0:	222f      	movs	r2, #47	; 0x2f
 8008ea2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	3303      	adds	r3, #3
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008eac:	2300      	movs	r3, #0
 8008eae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	371c      	adds	r7, #28
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	2000ce68 	.word	0x2000ce68

08008ec4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008ece:	2200      	movs	r2, #0
 8008ed0:	6839      	ldr	r1, [r7, #0]
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f7ff ffaa 	bl	8008e2c <FATFS_LinkDriverEx>
 8008ed8:	4603      	mov	r3, r0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
	...

08008ee4 <__libc_init_array>:
 8008ee4:	b570      	push	{r4, r5, r6, lr}
 8008ee6:	4d0d      	ldr	r5, [pc, #52]	; (8008f1c <__libc_init_array+0x38>)
 8008ee8:	4c0d      	ldr	r4, [pc, #52]	; (8008f20 <__libc_init_array+0x3c>)
 8008eea:	1b64      	subs	r4, r4, r5
 8008eec:	10a4      	asrs	r4, r4, #2
 8008eee:	2600      	movs	r6, #0
 8008ef0:	42a6      	cmp	r6, r4
 8008ef2:	d109      	bne.n	8008f08 <__libc_init_array+0x24>
 8008ef4:	4d0b      	ldr	r5, [pc, #44]	; (8008f24 <__libc_init_array+0x40>)
 8008ef6:	4c0c      	ldr	r4, [pc, #48]	; (8008f28 <__libc_init_array+0x44>)
 8008ef8:	f000 f820 	bl	8008f3c <_init>
 8008efc:	1b64      	subs	r4, r4, r5
 8008efe:	10a4      	asrs	r4, r4, #2
 8008f00:	2600      	movs	r6, #0
 8008f02:	42a6      	cmp	r6, r4
 8008f04:	d105      	bne.n	8008f12 <__libc_init_array+0x2e>
 8008f06:	bd70      	pop	{r4, r5, r6, pc}
 8008f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f0c:	4798      	blx	r3
 8008f0e:	3601      	adds	r6, #1
 8008f10:	e7ee      	b.n	8008ef0 <__libc_init_array+0xc>
 8008f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f16:	4798      	blx	r3
 8008f18:	3601      	adds	r6, #1
 8008f1a:	e7f2      	b.n	8008f02 <__libc_init_array+0x1e>
 8008f1c:	080091e8 	.word	0x080091e8
 8008f20:	080091e8 	.word	0x080091e8
 8008f24:	080091e8 	.word	0x080091e8
 8008f28:	080091f0 	.word	0x080091f0

08008f2c <memset>:
 8008f2c:	4402      	add	r2, r0
 8008f2e:	4603      	mov	r3, r0
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d100      	bne.n	8008f36 <memset+0xa>
 8008f34:	4770      	bx	lr
 8008f36:	f803 1b01 	strb.w	r1, [r3], #1
 8008f3a:	e7f9      	b.n	8008f30 <memset+0x4>

08008f3c <_init>:
 8008f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f3e:	bf00      	nop
 8008f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f42:	bc08      	pop	{r3}
 8008f44:	469e      	mov	lr, r3
 8008f46:	4770      	bx	lr

08008f48 <_fini>:
 8008f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f4a:	bf00      	nop
 8008f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f4e:	bc08      	pop	{r3}
 8008f50:	469e      	mov	lr, r3
 8008f52:	4770      	bx	lr
